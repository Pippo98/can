syntax = "proto3";
package primary;


enum RaceType {
    RaceType_ACCELERATION = 0;
    RaceType_SKIDPAD = 1;
    RaceType_AUTOCROSS = 2;
    RaceType_ENDURANCE = 3;
}

enum InverterStatus {
    InverterStatus_OFF = 0;
    InverterStatus_IDLE = 1;
    InverterStatus_ON = 2;
}

enum CarStatus {
    CarStatus_IDLE = 0;
    CarStatus_SETUP = 1;
    CarStatus_RUN = 2;
}

enum Toggle {
    Toggle_ON = 0;
    Toggle_OFF = 1;
}

enum TractionControl {
    TractionControl_OFF = 0;
    TractionControl_SLIP_CONTROL = 1;
    TractionControl_TORQUE_VECTORING = 2;
    TractionControl_COMPLETE = 3;
}

enum TsStatus {
    TsStatus_OFF = 0;
    TsStatus_PRECHARGE = 1;
    TsStatus_ON = 2;
    TsStatus_FATAL = 3;
}

enum Map {
    Map_R = 0;
    Map_D20 = 1;
    Map_D40 = 2;
    Map_D60 = 3;
    Map_D80 = 4;
    Map_D100 = 5;
}

enum SetCarStatus {
    SetCarStatus_IDLE = 0;
    SetCarStatus_RUN = 1;
}

enum Bound {
    Bound_SET_MAX = 0;
    Bound_SET_MIN = 1;
}

enum Pedal {
    Pedal_ACCELERATOR = 0;
    Pedal_BRAKE = 1;
}

enum Cooling {
    Cooling_SET_MAX = 0;
    Cooling_SET_OFF = 1;
}

message BMS_HV_JMP_TO_BLT {
    uint64 _inner_timestamp = 1;
}

message STEER_VERSION {
    uint32 component_version = 1;
    uint32 cancicd_version = 2;
    uint64 _inner_timestamp = 3;
}

message DAS_VERSION {
    uint32 component_version = 1;
    uint32 cancicd_version = 2;
    uint64 _inner_timestamp = 3;
}

message HV_VERSION {
    uint32 component_version = 1;
    uint32 cancicd_version = 2;
    uint64 _inner_timestamp = 3;
}

message LV_VERSION {
    uint32 component_version = 1;
    uint32 cancicd_version = 2;
    uint64 _inner_timestamp = 3;
}

message TLM_VERSION {
    uint32 component_version = 1;
    uint32 cancicd_version = 2;
    uint64 _inner_timestamp = 3;
}

message TIMESTAMP {
    uint32 timestamp = 1;
    uint64 _inner_timestamp = 2;
}

message SET_TLM_STATUS {
    uint32 driver = 1;
    uint32 circuit = 2;
    RaceType race_type = 3;
    Toggle tlm_status = 4;
    uint64 _inner_timestamp = 5;
}

message TLM_STATUS {
    uint32 driver = 1;
    uint32 circuit = 2;
    RaceType race_type = 3;
    Toggle tlm_status = 4;
    uint64 _inner_timestamp = 5;
}

message STEER_SYSTEM_STATUS {
    uint32 soc_temp = 1;
    uint64 _inner_timestamp = 2;
}

message HV_VOLTAGE {
    uint32 pack_voltage = 1;
    uint32 bus_voltage = 2;
    uint32 max_cell_voltage = 3;
    uint32 min_cell_voltage = 4;
    uint64 _inner_timestamp = 5;
}

message HV_CURRENT {
    uint32 current = 1;
    uint32 power = 2;
    uint32 energy = 3;
    uint32 soc = 4;
    uint64 _inner_timestamp = 5;
}

message HV_TEMP {
    uint32 average_temp = 1;
    uint32 max_temp = 2;
    uint32 min_temp = 3;
    uint64 _inner_timestamp = 4;
}

message HV_ERRORS {
    uint32 warnings = 1;
    uint32 errors = 2;
    uint64 _inner_timestamp = 3;
}

message HV_CAN_FORWARD {
    Toggle can_forward_set = 1;
    uint64 _inner_timestamp = 2;
}

message HV_FANS_OVERRIDE {
    uint32 fans_speed = 1;
    Toggle fans_override = 2;
    uint64 _inner_timestamp = 3;
}

message HV_CAN_FORWARD_STATUS {
    Toggle can_forward_status = 1;
    uint64 _inner_timestamp = 2;
}

message HV_FANS_OVERRIDE_STATUS {
    uint32 fans_speed = 1;
    Toggle fans_override = 2;
    uint64 _inner_timestamp = 3;
}

message TS_STATUS {
    TsStatus ts_status = 1;
    uint64 _inner_timestamp = 2;
}

message SET_TS_STATUS_DAS {
    Toggle ts_status_set = 1;
    uint64 _inner_timestamp = 2;
}
message SET_TS_STATUS_HANDCART {
    Toggle ts_status_set = 1;
    uint64 _inner_timestamp = 2;
}

message STEER_STATUS {
    Map map = 1;
    TractionControl traction_control = 2;
    uint64 _inner_timestamp = 3;
}

message SET_CAR_STATUS {
    SetCarStatus car_status_set = 1;
    uint64 _inner_timestamp = 2;
}

message SET_PEDALS_RANGE {
    Bound bound = 1;
    Pedal pedal = 2;
    uint64 _inner_timestamp = 3;
}

message SET_STEERING_ANGLE_RANGE {
    Bound bound = 1;
    uint64 _inner_timestamp = 2;
}

message CAR_STATUS {
    InverterStatus inverter_l = 1;
    InverterStatus inverter_r = 2;
    CarStatus car_status = 3;
    uint64 _inner_timestamp = 4;
}

message DAS_ERRORS {
    uint32 das_error = 1;
    uint64 _inner_timestamp = 2;
}

message LV_CURRENT {
    uint32 current = 1;
    uint64 _inner_timestamp = 2;
}

message LV_VOLTAGE {
    uint32 voltage_1 = 1;
    uint32 voltage_2 = 2;
    uint32 voltage_3 = 3;
    uint32 voltage_4 = 4;
    uint64 _inner_timestamp = 5;
}

message LV_TOTAL_VOLTAGE {
    uint32 total_voltage = 1;
    uint64 _inner_timestamp = 2;
}

message LV_TEMPERATURE {
    uint32 bp_temperature_1 = 1;
    uint32 bp_temperature_2 = 2;
    uint32 dcdc12_temperature = 3;
    uint32 dcdc24_temperature = 4;
    uint64 _inner_timestamp = 5;
}

message COOLING_STATUS {
    uint32 radiators_speed = 1;
    uint32 pumps_speed = 2;
    uint64 _inner_timestamp = 3;
}

message SET_RADIATOR_SPEED {
    Cooling radiator_speed = 1;
    uint64 _inner_timestamp = 2;
}

message SET_PUMPS_SPEED {
    Cooling pumps_speed = 1;
    uint64 _inner_timestamp = 2;
}

message SET_INVERTER_CONNECTION_STATUS {
    Toggle status = 1;
    uint64 _inner_timestamp = 2;
}

message INVERTER_CONNECTION_STATUS {
    Toggle status = 1;
    uint64 _inner_timestamp = 2;
}

message SHUTDOWN_STATUS {
    bool input = 1;
    bool output = 2;
    uint64 _inner_timestamp = 3;
}

message MARKER {
    uint64 _inner_timestamp = 1;
}

message HV_CELLS_VOLTAGE {
    uint32 voltage_0 = 1;
    uint32 voltage_1 = 2;
    uint32 voltage_2 = 3;
    uint32 start_index = 4;
    uint64 _inner_timestamp = 5;
}

message HV_CELLS_TEMP {
    uint32 start_index = 1;
    uint32 temp_0 = 2;
    uint32 temp_1 = 3;
    uint32 temp_2 = 4;
    uint32 temp_3 = 5;
    uint32 temp_4 = 6;
    uint32 temp_5 = 7;
    uint32 temp_6 = 8;
    uint64 _inner_timestamp = 9;
}

message HV_CELL_BALANCING_STATUS {
    Toggle balancing_status = 1;
    uint64 _inner_timestamp = 2;
}

message SET_CELL_BALANCING_STATUS {
    Toggle set_balancing_status = 1;
    uint64 _inner_timestamp = 2;
}

message HANDCART_STATUS {
    bool connected = 1;
    uint64 _inner_timestamp = 2;
}

message SPEED {
    uint32 encoder_r = 1;
    uint32 encoder_l = 2;
    uint32 inverter_r = 3;
    uint32 inverter_l = 4;
    uint64 _inner_timestamp = 5;
}

message INV_L_REQUEST {
    uint32 data_0 = 1;
    uint32 data_1 = 2;
    uint32 data_2 = 3;
    uint32 data_3 = 4;
    uint32 data_4 = 5;
    uint32 data_5 = 6;
    uint32 data_6 = 7;
    uint32 data_7 = 8;
    uint64 _inner_timestamp = 9;
}

message INV_R_REQUEST {
    uint32 data_0 = 1;
    uint32 data_1 = 2;
    uint32 data_2 = 3;
    uint32 data_3 = 4;
    uint32 data_4 = 5;
    uint32 data_5 = 6;
    uint32 data_6 = 7;
    uint32 data_7 = 8;
    uint64 _inner_timestamp = 9;
}

message INV_L_RESPONSE {
    uint32 reg_id = 1;
    uint32 data_0 = 2;
    uint32 data_1 = 3;
    uint32 data_2 = 4;
    uint32 data_3 = 5;
    uint32 data_4 = 6;
    uint32 data_5 = 7;
    uint32 data_6 = 8;
    uint64 _inner_timestamp = 9;
}

message INV_R_RESPONSE {
    uint32 reg_id = 1;
    uint32 data_0 = 2;
    uint32 data_1 = 3;
    uint32 data_2 = 4;
    uint32 data_3 = 5;
    uint32 data_4 = 6;
    uint32 data_5 = 7;
    uint32 data_6 = 8;
    uint64 _inner_timestamp = 9;
}

message FLASH_CELLBOARD_0_TX {
    uint64 _inner_timestamp = 1;
}

message FLASH_CELLBOARD_0_RX {
    uint64 _inner_timestamp = 1;
}

message FLASH_CELLBOARD_1_TX {
    uint64 _inner_timestamp = 1;
}

message FLASH_CELLBOARD_1_RX {
    uint64 _inner_timestamp = 1;
}

message FLASH_CELLBOARD_2_TX {
    uint64 _inner_timestamp = 1;
}

message FLASH_CELLBOARD_2_RX {
    uint64 _inner_timestamp = 1;
}

message FLASH_CELLBOARD_3_TX {
    uint64 _inner_timestamp = 1;
}

message FLASH_CELLBOARD_3_RX {
    uint64 _inner_timestamp = 1;
}

message FLASH_CELLBOARD_4_TX {
    uint64 _inner_timestamp = 1;
}

message FLASH_CELLBOARD_4_RX {
    uint64 _inner_timestamp = 1;
}

message FLASH_CELLBOARD_5_TX {
    uint64 _inner_timestamp = 1;
}

message FLASH_CELLBOARD_5_RX {
    uint64 _inner_timestamp = 1;
}

message BRUSA_NLG5_CTL {
    uint64 _inner_timestamp = 1;
}

message BRUSA_ST {
    uint64 _inner_timestamp = 1;
}

message BRUSA_ACT_I {
    uint64 _inner_timestamp = 1;
}

message BRUSA_ACT_II {
    uint64 _inner_timestamp = 1;
}

message BRUSA_TEMP {
    uint64 _inner_timestamp = 1;
}

message BRUSA_ERR {
    uint64 _inner_timestamp = 1;
}

message BMS_HV_CHIMERA {
    uint64 _inner_timestamp = 1;
}

message ECU_CHIMERA {
    uint64 _inner_timestamp = 1;
}


message Pack {
    repeated BMS_HV_JMP_TO_BLT BMS_HV_JMP_TO_BLT = 1;
    repeated STEER_VERSION STEER_VERSION = 2;
    repeated DAS_VERSION DAS_VERSION = 3;
    repeated HV_VERSION HV_VERSION = 4;
    repeated LV_VERSION LV_VERSION = 5;
    repeated TLM_VERSION TLM_VERSION = 6;
    repeated TIMESTAMP TIMESTAMP = 7;
    repeated SET_TLM_STATUS SET_TLM_STATUS = 8;
    repeated TLM_STATUS TLM_STATUS = 9;
    repeated STEER_SYSTEM_STATUS STEER_SYSTEM_STATUS = 10;
    repeated HV_VOLTAGE HV_VOLTAGE = 11;
    repeated HV_CURRENT HV_CURRENT = 12;
    repeated HV_TEMP HV_TEMP = 13;
    repeated HV_ERRORS HV_ERRORS = 14;
    repeated HV_CAN_FORWARD HV_CAN_FORWARD = 15;
    repeated HV_FANS_OVERRIDE HV_FANS_OVERRIDE = 16;
    repeated HV_CAN_FORWARD_STATUS HV_CAN_FORWARD_STATUS = 17;
    repeated HV_FANS_OVERRIDE_STATUS HV_FANS_OVERRIDE_STATUS = 18;
    repeated TS_STATUS TS_STATUS = 19;
    repeated SET_TS_STATUS_DAS SET_TS_STATUS_DAS = 20;
    repeated SET_TS_STATUS_HANDCART SET_TS_STATUS_HANDCART = 21;
    repeated STEER_STATUS STEER_STATUS = 22;
    repeated SET_CAR_STATUS SET_CAR_STATUS = 23;
    repeated SET_PEDALS_RANGE SET_PEDALS_RANGE = 24;
    repeated SET_STEERING_ANGLE_RANGE SET_STEERING_ANGLE_RANGE = 25;
    repeated CAR_STATUS CAR_STATUS = 26;
    repeated DAS_ERRORS DAS_ERRORS = 27;
    repeated LV_CURRENT LV_CURRENT = 28;
    repeated LV_VOLTAGE LV_VOLTAGE = 29;
    repeated LV_TOTAL_VOLTAGE LV_TOTAL_VOLTAGE = 30;
    repeated LV_TEMPERATURE LV_TEMPERATURE = 31;
    repeated COOLING_STATUS COOLING_STATUS = 32;
    repeated SET_RADIATOR_SPEED SET_RADIATOR_SPEED = 33;
    repeated SET_PUMPS_SPEED SET_PUMPS_SPEED = 34;
    repeated SET_INVERTER_CONNECTION_STATUS SET_INVERTER_CONNECTION_STATUS = 35;
    repeated INVERTER_CONNECTION_STATUS INVERTER_CONNECTION_STATUS = 36;
    repeated SHUTDOWN_STATUS SHUTDOWN_STATUS = 37;
    repeated MARKER MARKER = 38;
    repeated HV_CELLS_VOLTAGE HV_CELLS_VOLTAGE = 39;
    repeated HV_CELLS_TEMP HV_CELLS_TEMP = 40;
    repeated HV_CELL_BALANCING_STATUS HV_CELL_BALANCING_STATUS = 41;
    repeated SET_CELL_BALANCING_STATUS SET_CELL_BALANCING_STATUS = 42;
    repeated HANDCART_STATUS HANDCART_STATUS = 43;
    repeated SPEED SPEED = 44;
    repeated INV_L_REQUEST INV_L_REQUEST = 45;
    repeated INV_R_REQUEST INV_R_REQUEST = 46;
    repeated INV_L_RESPONSE INV_L_RESPONSE = 47;
    repeated INV_R_RESPONSE INV_R_RESPONSE = 48;
    repeated FLASH_CELLBOARD_0_TX FLASH_CELLBOARD_0_TX = 49;
    repeated FLASH_CELLBOARD_0_RX FLASH_CELLBOARD_0_RX = 50;
    repeated FLASH_CELLBOARD_1_TX FLASH_CELLBOARD_1_TX = 51;
    repeated FLASH_CELLBOARD_1_RX FLASH_CELLBOARD_1_RX = 52;
    repeated FLASH_CELLBOARD_2_TX FLASH_CELLBOARD_2_TX = 53;
    repeated FLASH_CELLBOARD_2_RX FLASH_CELLBOARD_2_RX = 54;
    repeated FLASH_CELLBOARD_3_TX FLASH_CELLBOARD_3_TX = 55;
    repeated FLASH_CELLBOARD_3_RX FLASH_CELLBOARD_3_RX = 56;
    repeated FLASH_CELLBOARD_4_TX FLASH_CELLBOARD_4_TX = 57;
    repeated FLASH_CELLBOARD_4_RX FLASH_CELLBOARD_4_RX = 58;
    repeated FLASH_CELLBOARD_5_TX FLASH_CELLBOARD_5_TX = 59;
    repeated FLASH_CELLBOARD_5_RX FLASH_CELLBOARD_5_RX = 60;
    repeated BRUSA_NLG5_CTL BRUSA_NLG5_CTL = 61;
    repeated BRUSA_ST BRUSA_ST = 62;
    repeated BRUSA_ACT_I BRUSA_ACT_I = 63;
    repeated BRUSA_ACT_II BRUSA_ACT_II = 64;
    repeated BRUSA_TEMP BRUSA_TEMP = 65;
    repeated BRUSA_ERR BRUSA_ERR = 66;
    repeated BMS_HV_CHIMERA BMS_HV_CHIMERA = 67;
    repeated ECU_CHIMERA ECU_CHIMERA = 68;
}