// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primary.proto

#include "primary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace primary {
constexpr SteerVersion::SteerVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u)
  , timestamp_(0u){}
struct SteerVersionDefaultTypeInternal {
  constexpr SteerVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SteerVersionDefaultTypeInternal() {}
  union {
    SteerVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SteerVersionDefaultTypeInternal _SteerVersion_default_instance_;
constexpr DasVersion::DasVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u)
  , timestamp_(0u){}
struct DasVersionDefaultTypeInternal {
  constexpr DasVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DasVersionDefaultTypeInternal() {}
  union {
    DasVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DasVersionDefaultTypeInternal _DasVersion_default_instance_;
constexpr HvVersion::HvVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u)
  , timestamp_(0u){}
struct HvVersionDefaultTypeInternal {
  constexpr HvVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HvVersionDefaultTypeInternal() {}
  union {
    HvVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HvVersionDefaultTypeInternal _HvVersion_default_instance_;
constexpr LvVersion::LvVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u)
  , timestamp_(0u){}
struct LvVersionDefaultTypeInternal {
  constexpr LvVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LvVersionDefaultTypeInternal() {}
  union {
    LvVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LvVersionDefaultTypeInternal _LvVersion_default_instance_;
constexpr TlmVersion::TlmVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u)
  , timestamp_(0u){}
struct TlmVersionDefaultTypeInternal {
  constexpr TlmVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TlmVersionDefaultTypeInternal() {}
  union {
    TlmVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TlmVersionDefaultTypeInternal _TlmVersion_default_instance_;
constexpr Timestamp::Timestamp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(0u){}
struct TimestampDefaultTypeInternal {
  constexpr TimestampDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimestampDefaultTypeInternal() {}
  union {
    Timestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimestampDefaultTypeInternal _Timestamp_default_instance_;
constexpr SetTlmStatus::SetTlmStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tlm_status_(0)

  , race_type_(0)

  , driver_(0u)
  , circuit_(0u)
  , timestamp_(0u){}
struct SetTlmStatusDefaultTypeInternal {
  constexpr SetTlmStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetTlmStatusDefaultTypeInternal() {}
  union {
    SetTlmStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetTlmStatusDefaultTypeInternal _SetTlmStatus_default_instance_;
constexpr SteerSystemStatus::SteerSystemStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : soc_temp_(0u)
  , timestamp_(0u){}
struct SteerSystemStatusDefaultTypeInternal {
  constexpr SteerSystemStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SteerSystemStatusDefaultTypeInternal() {}
  union {
    SteerSystemStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SteerSystemStatusDefaultTypeInternal _SteerSystemStatus_default_instance_;
constexpr Marker::Marker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(0u){}
struct MarkerDefaultTypeInternal {
  constexpr MarkerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarkerDefaultTypeInternal() {}
  union {
    Marker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarkerDefaultTypeInternal _Marker_default_instance_;
constexpr TlmStatus::TlmStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tlm_status_(0)

  , race_type_(0)

  , driver_(0u)
  , circuit_(0u)
  , timestamp_(0u){}
struct TlmStatusDefaultTypeInternal {
  constexpr TlmStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TlmStatusDefaultTypeInternal() {}
  union {
    TlmStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TlmStatusDefaultTypeInternal _TlmStatus_default_instance_;
constexpr CarStatus::CarStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inverter_l_(0)

  , inverter_r_(0)

  , car_status_(0)

  , timestamp_(0u){}
struct CarStatusDefaultTypeInternal {
  constexpr CarStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CarStatusDefaultTypeInternal() {}
  union {
    CarStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CarStatusDefaultTypeInternal _CarStatus_default_instance_;
constexpr DasErrors::DasErrors(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : das_error_(0u)
  , timestamp_(0u){}
struct DasErrorsDefaultTypeInternal {
  constexpr DasErrorsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DasErrorsDefaultTypeInternal() {}
  union {
    DasErrors _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DasErrorsDefaultTypeInternal _DasErrors_default_instance_;
constexpr Speed::Speed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoder_r_(0u)
  , encoder_l_(0u)
  , inverter_r_(0u)
  , inverter_l_(0u)
  , timestamp_(0u){}
struct SpeedDefaultTypeInternal {
  constexpr SpeedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeedDefaultTypeInternal() {}
  union {
    Speed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeedDefaultTypeInternal _Speed_default_instance_;
constexpr HvVoltage::HvVoltage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pack_voltage_(0u)
  , bus_voltage_(0u)
  , max_cell_voltage_(0u)
  , min_cell_voltage_(0u)
  , timestamp_(0u){}
struct HvVoltageDefaultTypeInternal {
  constexpr HvVoltageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HvVoltageDefaultTypeInternal() {}
  union {
    HvVoltage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HvVoltageDefaultTypeInternal _HvVoltage_default_instance_;
constexpr HvCurrent::HvCurrent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_(0u)
  , power_(0)
  , timestamp_(0u){}
struct HvCurrentDefaultTypeInternal {
  constexpr HvCurrentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HvCurrentDefaultTypeInternal() {}
  union {
    HvCurrent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HvCurrentDefaultTypeInternal _HvCurrent_default_instance_;
constexpr HvTemp::HvTemp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : average_temp_(0u)
  , max_temp_(0u)
  , min_temp_(0u)
  , timestamp_(0u){}
struct HvTempDefaultTypeInternal {
  constexpr HvTempDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HvTempDefaultTypeInternal() {}
  union {
    HvTemp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HvTempDefaultTypeInternal _HvTemp_default_instance_;
constexpr HvErrors::HvErrors(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : warnings_(0u)
  , errors_(0u)
  , timestamp_(0u){}
struct HvErrorsDefaultTypeInternal {
  constexpr HvErrorsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HvErrorsDefaultTypeInternal() {}
  union {
    HvErrors _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HvErrorsDefaultTypeInternal _HvErrors_default_instance_;
constexpr TsStatus::TsStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ts_status_(0)

  , timestamp_(0u){}
struct TsStatusDefaultTypeInternal {
  constexpr TsStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TsStatusDefaultTypeInternal() {}
  union {
    TsStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TsStatusDefaultTypeInternal _TsStatus_default_instance_;
constexpr SetTsStatus::SetTsStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ts_status_set_(0)

  , timestamp_(0u){}
struct SetTsStatusDefaultTypeInternal {
  constexpr SetTsStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetTsStatusDefaultTypeInternal() {}
  union {
    SetTsStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetTsStatusDefaultTypeInternal _SetTsStatus_default_instance_;
constexpr SetCellBalancingStatus::SetCellBalancingStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : set_balancing_status_(0)

  , timestamp_(0u){}
struct SetCellBalancingStatusDefaultTypeInternal {
  constexpr SetCellBalancingStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetCellBalancingStatusDefaultTypeInternal() {}
  union {
    SetCellBalancingStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetCellBalancingStatusDefaultTypeInternal _SetCellBalancingStatus_default_instance_;
constexpr HandcartStatus::HandcartStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connected_(false)
  , timestamp_(0u){}
struct HandcartStatusDefaultTypeInternal {
  constexpr HandcartStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HandcartStatusDefaultTypeInternal() {}
  union {
    HandcartStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HandcartStatusDefaultTypeInternal _HandcartStatus_default_instance_;
constexpr SteerStatus::SteerStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : traction_control_(0)

  , map_(0)

  , timestamp_(0u){}
struct SteerStatusDefaultTypeInternal {
  constexpr SteerStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SteerStatusDefaultTypeInternal() {}
  union {
    SteerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SteerStatusDefaultTypeInternal _SteerStatus_default_instance_;
constexpr SetCarStatus::SetCarStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : car_status_set_(0)

  , timestamp_(0u){}
struct SetCarStatusDefaultTypeInternal {
  constexpr SetCarStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetCarStatusDefaultTypeInternal() {}
  union {
    SetCarStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetCarStatusDefaultTypeInternal _SetCarStatus_default_instance_;
constexpr SetPedalsRange::SetPedalsRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bound_(0)

  , pedal_(0)

  , timestamp_(0u){}
struct SetPedalsRangeDefaultTypeInternal {
  constexpr SetPedalsRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPedalsRangeDefaultTypeInternal() {}
  union {
    SetPedalsRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPedalsRangeDefaultTypeInternal _SetPedalsRange_default_instance_;
constexpr LvCurrent::LvCurrent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_(0u)
  , timestamp_(0u){}
struct LvCurrentDefaultTypeInternal {
  constexpr LvCurrentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LvCurrentDefaultTypeInternal() {}
  union {
    LvCurrent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LvCurrentDefaultTypeInternal _LvCurrent_default_instance_;
constexpr LvVoltage::LvVoltage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_voltage_(0u)
  , voltage_1_(0u)
  , voltage_2_(0u)
  , voltage_3_(0u)
  , voltage_4_(0u)
  , timestamp_(0u){}
struct LvVoltageDefaultTypeInternal {
  constexpr LvVoltageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LvVoltageDefaultTypeInternal() {}
  union {
    LvVoltage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LvVoltageDefaultTypeInternal _LvVoltage_default_instance_;
constexpr LvTemperature::LvTemperature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bp_temperature_(0u)
  , dcdc_temperature_(0u)
  , timestamp_(0u){}
struct LvTemperatureDefaultTypeInternal {
  constexpr LvTemperatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LvTemperatureDefaultTypeInternal() {}
  union {
    LvTemperature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LvTemperatureDefaultTypeInternal _LvTemperature_default_instance_;
constexpr CoolingStatus::CoolingStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hv_fan_speed_(0u)
  , lv_fan_speed_(0u)
  , pump_speed_(0u)
  , timestamp_(0u){}
struct CoolingStatusDefaultTypeInternal {
  constexpr CoolingStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoolingStatusDefaultTypeInternal() {}
  union {
    CoolingStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoolingStatusDefaultTypeInternal _CoolingStatus_default_instance_;
constexpr HvCellsVoltage::HvCellsVoltage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_index_(0u)
  , voltage_0_(0u)
  , voltage_1_(0u)
  , voltage_2_(0u)
  , timestamp_(0u){}
struct HvCellsVoltageDefaultTypeInternal {
  constexpr HvCellsVoltageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HvCellsVoltageDefaultTypeInternal() {}
  union {
    HvCellsVoltage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HvCellsVoltageDefaultTypeInternal _HvCellsVoltage_default_instance_;
constexpr HvCellsTemp::HvCellsTemp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_index_(0u)
  , temp_0_(0u)
  , temp_1_(0u)
  , temp_2_(0u)
  , temp_3_(0u)
  , temp_4_(0u)
  , temp_5_(0u)
  , temp_6_(0u)
  , timestamp_(0u){}
struct HvCellsTempDefaultTypeInternal {
  constexpr HvCellsTempDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HvCellsTempDefaultTypeInternal() {}
  union {
    HvCellsTemp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HvCellsTempDefaultTypeInternal _HvCellsTemp_default_instance_;
constexpr HvCellBalancingStatus::HvCellBalancingStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : balancing_status_(0)

  , timestamp_(0u){}
struct HvCellBalancingStatusDefaultTypeInternal {
  constexpr HvCellBalancingStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HvCellBalancingStatusDefaultTypeInternal() {}
  union {
    HvCellBalancingStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HvCellBalancingStatusDefaultTypeInternal _HvCellBalancingStatus_default_instance_;
constexpr InvLSetTorque::InvLSetTorque(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : regid_(0u)
  , lsb_(0u)
  , msb_(0u)
  , timestamp_(0u){}
struct InvLSetTorqueDefaultTypeInternal {
  constexpr InvLSetTorqueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvLSetTorqueDefaultTypeInternal() {}
  union {
    InvLSetTorque _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvLSetTorqueDefaultTypeInternal _InvLSetTorque_default_instance_;
constexpr InvLResponse::InvLResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reg_id_(0u)
  , reg_val_(0u)
  , timestamp_(0u){}
struct InvLResponseDefaultTypeInternal {
  constexpr InvLResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvLResponseDefaultTypeInternal() {}
  union {
    InvLResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvLResponseDefaultTypeInternal _InvLResponse_default_instance_;
constexpr PrimaryFenice::PrimaryFenice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steer_version_()
  , das_version_()
  , hv_version_()
  , lv_version_()
  , tlm_version_()
  , timestamp_()
  , set_tlm_status_()
  , steer_system_status_()
  , marker_()
  , tlm_status_()
  , car_status_()
  , das_errors_()
  , speed_()
  , hv_voltage_()
  , hv_current_()
  , hv_temp_()
  , hv_errors_()
  , ts_status_()
  , set_ts_status_()
  , set_cell_balancing_status_()
  , handcart_status_()
  , steer_status_()
  , set_car_status_()
  , set_pedals_range_()
  , lv_current_()
  , lv_voltage_()
  , lv_temperature_()
  , cooling_status_()
  , hv_cells_voltage_()
  , hv_cells_temp_()
  , hv_cell_balancing_status_()
  , inv_l_set_torque_()
  , inv_l_response_(){}
struct PrimaryFeniceDefaultTypeInternal {
  constexpr PrimaryFeniceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrimaryFeniceDefaultTypeInternal() {}
  union {
    PrimaryFenice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrimaryFeniceDefaultTypeInternal _PrimaryFenice_default_instance_;
}  // namespace primary
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_primary_2eproto[34];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_primary_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_primary_2eproto = nullptr;

const uint32_t TableStruct_primary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SteerVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SteerVersion, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::SteerVersion, cancicd_version_),
  PROTOBUF_FIELD_OFFSET(::primary::SteerVersion, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::DasVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::DasVersion, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::DasVersion, cancicd_version_),
  PROTOBUF_FIELD_OFFSET(::primary::DasVersion, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvVersion, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::HvVersion, cancicd_version_),
  PROTOBUF_FIELD_OFFSET(::primary::HvVersion, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LvVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LvVersion, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::LvVersion, cancicd_version_),
  PROTOBUF_FIELD_OFFSET(::primary::LvVersion, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TlmVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TlmVersion, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::TlmVersion, cancicd_version_),
  PROTOBUF_FIELD_OFFSET(::primary::TlmVersion, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::Timestamp, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SetTlmStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SetTlmStatus, tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::SetTlmStatus, race_type_),
  PROTOBUF_FIELD_OFFSET(::primary::SetTlmStatus, driver_),
  PROTOBUF_FIELD_OFFSET(::primary::SetTlmStatus, circuit_),
  PROTOBUF_FIELD_OFFSET(::primary::SetTlmStatus, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SteerSystemStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SteerSystemStatus, soc_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::SteerSystemStatus, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::Marker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::Marker, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TlmStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TlmStatus, tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::TlmStatus, race_type_),
  PROTOBUF_FIELD_OFFSET(::primary::TlmStatus, driver_),
  PROTOBUF_FIELD_OFFSET(::primary::TlmStatus, circuit_),
  PROTOBUF_FIELD_OFFSET(::primary::TlmStatus, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::CarStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::CarStatus, inverter_l_),
  PROTOBUF_FIELD_OFFSET(::primary::CarStatus, inverter_r_),
  PROTOBUF_FIELD_OFFSET(::primary::CarStatus, car_status_),
  PROTOBUF_FIELD_OFFSET(::primary::CarStatus, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::DasErrors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::DasErrors, das_error_),
  PROTOBUF_FIELD_OFFSET(::primary::DasErrors, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::Speed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::Speed, encoder_r_),
  PROTOBUF_FIELD_OFFSET(::primary::Speed, encoder_l_),
  PROTOBUF_FIELD_OFFSET(::primary::Speed, inverter_r_),
  PROTOBUF_FIELD_OFFSET(::primary::Speed, inverter_l_),
  PROTOBUF_FIELD_OFFSET(::primary::Speed, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvVoltage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvVoltage, pack_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HvVoltage, bus_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HvVoltage, max_cell_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HvVoltage, min_cell_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HvVoltage, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvCurrent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvCurrent, current_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCurrent, power_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCurrent, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvTemp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvTemp, average_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HvTemp, max_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HvTemp, min_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HvTemp, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvErrors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvErrors, warnings_),
  PROTOBUF_FIELD_OFFSET(::primary::HvErrors, errors_),
  PROTOBUF_FIELD_OFFSET(::primary::HvErrors, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TsStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TsStatus, ts_status_),
  PROTOBUF_FIELD_OFFSET(::primary::TsStatus, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SetTsStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SetTsStatus, ts_status_set_),
  PROTOBUF_FIELD_OFFSET(::primary::SetTsStatus, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SetCellBalancingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SetCellBalancingStatus, set_balancing_status_),
  PROTOBUF_FIELD_OFFSET(::primary::SetCellBalancingStatus, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HandcartStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HandcartStatus, connected_),
  PROTOBUF_FIELD_OFFSET(::primary::HandcartStatus, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SteerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SteerStatus, traction_control_),
  PROTOBUF_FIELD_OFFSET(::primary::SteerStatus, map_),
  PROTOBUF_FIELD_OFFSET(::primary::SteerStatus, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SetCarStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SetCarStatus, car_status_set_),
  PROTOBUF_FIELD_OFFSET(::primary::SetCarStatus, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SetPedalsRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SetPedalsRange, bound_),
  PROTOBUF_FIELD_OFFSET(::primary::SetPedalsRange, pedal_),
  PROTOBUF_FIELD_OFFSET(::primary::SetPedalsRange, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LvCurrent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LvCurrent, current_),
  PROTOBUF_FIELD_OFFSET(::primary::LvCurrent, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, total_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, voltage_1_),
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, voltage_2_),
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, voltage_3_),
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, voltage_4_),
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LvTemperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LvTemperature, bp_temperature_),
  PROTOBUF_FIELD_OFFSET(::primary::LvTemperature, dcdc_temperature_),
  PROTOBUF_FIELD_OFFSET(::primary::LvTemperature, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::CoolingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::CoolingStatus, hv_fan_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::CoolingStatus, lv_fan_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::CoolingStatus, pump_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::CoolingStatus, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsVoltage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsVoltage, cell_index_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsVoltage, voltage_0_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsVoltage, voltage_1_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsVoltage, voltage_2_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsVoltage, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, cell_index_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_0_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_1_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_2_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_3_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_4_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_5_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_6_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvCellBalancingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvCellBalancingStatus, balancing_status_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellBalancingStatus, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::InvLSetTorque, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::InvLSetTorque, regid_),
  PROTOBUF_FIELD_OFFSET(::primary::InvLSetTorque, lsb_),
  PROTOBUF_FIELD_OFFSET(::primary::InvLSetTorque, msb_),
  PROTOBUF_FIELD_OFFSET(::primary::InvLSetTorque, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::InvLResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::InvLResponse, reg_id_),
  PROTOBUF_FIELD_OFFSET(::primary::InvLResponse, reg_val_),
  PROTOBUF_FIELD_OFFSET(::primary::InvLResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, steer_version_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, das_version_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, hv_version_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, lv_version_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, tlm_version_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, timestamp_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, set_tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, steer_system_status_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, marker_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, car_status_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, das_errors_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, speed_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, hv_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, hv_current_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, hv_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, hv_errors_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, ts_status_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, set_ts_status_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, set_cell_balancing_status_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, handcart_status_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, steer_status_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, set_car_status_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, set_pedals_range_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, lv_current_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, lv_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, lv_temperature_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, cooling_status_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, hv_cells_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, hv_cells_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, hv_cell_balancing_status_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, inv_l_set_torque_),
  PROTOBUF_FIELD_OFFSET(::primary::PrimaryFenice, inv_l_response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::primary::SteerVersion)},
  { 9, -1, -1, sizeof(::primary::DasVersion)},
  { 18, -1, -1, sizeof(::primary::HvVersion)},
  { 27, -1, -1, sizeof(::primary::LvVersion)},
  { 36, -1, -1, sizeof(::primary::TlmVersion)},
  { 45, -1, -1, sizeof(::primary::Timestamp)},
  { 52, -1, -1, sizeof(::primary::SetTlmStatus)},
  { 63, -1, -1, sizeof(::primary::SteerSystemStatus)},
  { 71, -1, -1, sizeof(::primary::Marker)},
  { 78, -1, -1, sizeof(::primary::TlmStatus)},
  { 89, -1, -1, sizeof(::primary::CarStatus)},
  { 99, -1, -1, sizeof(::primary::DasErrors)},
  { 107, -1, -1, sizeof(::primary::Speed)},
  { 118, -1, -1, sizeof(::primary::HvVoltage)},
  { 129, -1, -1, sizeof(::primary::HvCurrent)},
  { 138, -1, -1, sizeof(::primary::HvTemp)},
  { 148, -1, -1, sizeof(::primary::HvErrors)},
  { 157, -1, -1, sizeof(::primary::TsStatus)},
  { 165, -1, -1, sizeof(::primary::SetTsStatus)},
  { 173, -1, -1, sizeof(::primary::SetCellBalancingStatus)},
  { 181, -1, -1, sizeof(::primary::HandcartStatus)},
  { 189, -1, -1, sizeof(::primary::SteerStatus)},
  { 198, -1, -1, sizeof(::primary::SetCarStatus)},
  { 206, -1, -1, sizeof(::primary::SetPedalsRange)},
  { 215, -1, -1, sizeof(::primary::LvCurrent)},
  { 223, -1, -1, sizeof(::primary::LvVoltage)},
  { 235, -1, -1, sizeof(::primary::LvTemperature)},
  { 244, -1, -1, sizeof(::primary::CoolingStatus)},
  { 254, -1, -1, sizeof(::primary::HvCellsVoltage)},
  { 265, -1, -1, sizeof(::primary::HvCellsTemp)},
  { 280, -1, -1, sizeof(::primary::HvCellBalancingStatus)},
  { 288, -1, -1, sizeof(::primary::InvLSetTorque)},
  { 298, -1, -1, sizeof(::primary::InvLResponse)},
  { 307, -1, -1, sizeof(::primary::PrimaryFenice)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SteerVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_DasVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HvVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LvVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TlmVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_Timestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SetTlmStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SteerSystemStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_Marker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TlmStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_CarStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_DasErrors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_Speed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HvVoltage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HvCurrent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HvTemp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HvErrors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TsStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SetTsStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SetCellBalancingStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HandcartStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SteerStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SetCarStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SetPedalsRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LvCurrent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LvVoltage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LvTemperature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_CoolingStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HvCellsVoltage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HvCellsTemp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HvCellBalancingStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_InvLSetTorque_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_InvLResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_PrimaryFenice_default_instance_),
};

const char descriptor_table_protodef_primary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rprimary.proto\022\007primary\"U\n\014SteerVersion"
  "\022\031\n\021component_version\030\001 \001(\r\022\027\n\017cancicd_v"
  "ersion\030\002 \001(\r\022\021\n\ttimestamp\030\003 \001(\r\"S\n\nDasVe"
  "rsion\022\031\n\021component_version\030\001 \001(\r\022\027\n\017canc"
  "icd_version\030\002 \001(\r\022\021\n\ttimestamp\030\003 \001(\r\"R\n\t"
  "HvVersion\022\031\n\021component_version\030\001 \001(\r\022\027\n\017"
  "cancicd_version\030\002 \001(\r\022\021\n\ttimestamp\030\003 \001(\r"
  "\"R\n\tLvVersion\022\031\n\021component_version\030\001 \001(\r"
  "\022\027\n\017cancicd_version\030\002 \001(\r\022\021\n\ttimestamp\030\003"
  " \001(\r\"S\n\nTlmVersion\022\031\n\021component_version\030"
  "\001 \001(\r\022\027\n\017cancicd_version\030\002 \001(\r\022\021\n\ttimest"
  "amp\030\003 \001(\r\"\036\n\tTimestamp\022\021\n\ttimestamp\030\001 \001("
  "\r\"\225\001\n\014SetTlmStatus\022\'\n\ntlm_status\030\001 \001(\0162\023"
  ".primary.ToggleType\022(\n\trace_type\030\002 \001(\0162\025"
  ".primary.RacetypeType\022\016\n\006driver\030\003 \001(\r\022\017\n"
  "\007circuit\030\004 \001(\r\022\021\n\ttimestamp\030\005 \001(\r\"8\n\021Ste"
  "erSystemStatus\022\020\n\010soc_temp\030\001 \001(\r\022\021\n\ttime"
  "stamp\030\002 \001(\r\"\033\n\006Marker\022\021\n\ttimestamp\030\001 \001(\r"
  "\"\222\001\n\tTlmStatus\022\'\n\ntlm_status\030\001 \001(\0162\023.pri"
  "mary.ToggleType\022(\n\trace_type\030\002 \001(\0162\025.pri"
  "mary.RacetypeType\022\016\n\006driver\030\003 \001(\r\022\017\n\007cir"
  "cuit\030\004 \001(\r\022\021\n\ttimestamp\030\005 \001(\r\"\254\001\n\tCarSta"
  "tus\022/\n\ninverter_l\030\001 \001(\0162\033.primary.Invert"
  "erstatusType\022/\n\ninverter_r\030\002 \001(\0162\033.prima"
  "ry.InverterstatusType\022*\n\ncar_status\030\003 \001("
  "\0162\026.primary.CarstatusType\022\021\n\ttimestamp\030\004"
  " \001(\r\"1\n\tDasErrors\022\021\n\tdas_error\030\001 \001(\r\022\021\n\t"
  "timestamp\030\002 \001(\r\"h\n\005Speed\022\021\n\tencoder_r\030\001 "
  "\001(\r\022\021\n\tencoder_l\030\002 \001(\r\022\022\n\ninverter_r\030\003 \001"
  "(\r\022\022\n\ninverter_l\030\004 \001(\r\022\021\n\ttimestamp\030\005 \001("
  "\r\"}\n\tHvVoltage\022\024\n\014pack_voltage\030\001 \001(\r\022\023\n\013"
  "bus_voltage\030\002 \001(\r\022\030\n\020max_cell_voltage\030\003 "
  "\001(\r\022\030\n\020min_cell_voltage\030\004 \001(\r\022\021\n\ttimesta"
  "mp\030\005 \001(\r\">\n\tHvCurrent\022\017\n\007current\030\001 \001(\r\022\r"
  "\n\005power\030\002 \001(\005\022\021\n\ttimestamp\030\003 \001(\r\"U\n\006HvTe"
  "mp\022\024\n\014average_temp\030\001 \001(\r\022\020\n\010max_temp\030\002 \001"
  "(\r\022\020\n\010min_temp\030\003 \001(\r\022\021\n\ttimestamp\030\004 \001(\r\""
  "\?\n\010HvErrors\022\020\n\010warnings\030\001 \001(\r\022\016\n\006errors\030"
  "\002 \001(\r\022\021\n\ttimestamp\030\003 \001(\r\"G\n\010TsStatus\022(\n\t"
  "ts_status\030\001 \001(\0162\025.primary.TsstatusType\022\021"
  "\n\ttimestamp\030\002 \001(\r\"L\n\013SetTsStatus\022*\n\rts_s"
  "tatus_set\030\001 \001(\0162\023.primary.ToggleType\022\021\n\t"
  "timestamp\030\002 \001(\r\"^\n\026SetCellBalancingStatu"
  "s\0221\n\024set_balancing_status\030\001 \001(\0162\023.primar"
  "y.ToggleType\022\021\n\ttimestamp\030\002 \001(\r\"6\n\016Handc"
  "artStatus\022\021\n\tconnected\030\001 \001(\010\022\021\n\ttimestam"
  "p\030\002 \001(\r\"w\n\013SteerStatus\0226\n\020traction_contr"
  "ol\030\001 \001(\0162\034.primary.TractioncontrolType\022\035"
  "\n\003map\030\002 \001(\0162\020.primary.MapType\022\021\n\ttimesta"
  "mp\030\003 \001(\r\"T\n\014SetCarStatus\0221\n\016car_status_s"
  "et\030\001 \001(\0162\031.primary.SetcarstatusType\022\021\n\tt"
  "imestamp\030\002 \001(\r\"i\n\016SetPedalsRange\022!\n\005boun"
  "d\030\001 \001(\0162\022.primary.BoundType\022!\n\005pedal\030\002 \001"
  "(\0162\022.primary.PedalType\022\021\n\ttimestamp\030\003 \001("
  "\r\"/\n\tLvCurrent\022\017\n\007current\030\001 \001(\r\022\021\n\ttimes"
  "tamp\030\002 \001(\r\"\201\001\n\tLvVoltage\022\025\n\rtotal_voltag"
  "e\030\001 \001(\r\022\021\n\tvoltage_1\030\002 \001(\r\022\021\n\tvoltage_2\030"
  "\003 \001(\r\022\021\n\tvoltage_3\030\004 \001(\r\022\021\n\tvoltage_4\030\005 "
  "\001(\r\022\021\n\ttimestamp\030\006 \001(\r\"T\n\rLvTemperature\022"
  "\026\n\016bp_temperature\030\001 \001(\r\022\030\n\020dcdc_temperat"
  "ure\030\002 \001(\r\022\021\n\ttimestamp\030\003 \001(\r\"b\n\rCoolingS"
  "tatus\022\024\n\014hv_fan_speed\030\001 \001(\r\022\024\n\014lv_fan_sp"
  "eed\030\002 \001(\r\022\022\n\npump_speed\030\003 \001(\r\022\021\n\ttimesta"
  "mp\030\004 \001(\r\"p\n\016HvCellsVoltage\022\022\n\ncell_index"
  "\030\001 \001(\r\022\021\n\tvoltage_0\030\002 \001(\r\022\021\n\tvoltage_1\030\003"
  " \001(\r\022\021\n\tvoltage_2\030\004 \001(\r\022\021\n\ttimestamp\030\005 \001"
  "(\r\"\244\001\n\013HvCellsTemp\022\022\n\ncell_index\030\001 \001(\r\022\016"
  "\n\006temp_0\030\002 \001(\r\022\016\n\006temp_1\030\003 \001(\r\022\016\n\006temp_2"
  "\030\004 \001(\r\022\016\n\006temp_3\030\005 \001(\r\022\016\n\006temp_4\030\006 \001(\r\022\016"
  "\n\006temp_5\030\007 \001(\r\022\016\n\006temp_6\030\010 \001(\r\022\021\n\ttimest"
  "amp\030\t \001(\r\"Y\n\025HvCellBalancingStatus\022-\n\020ba"
  "lancing_status\030\001 \001(\0162\023.primary.ToggleTyp"
  "e\022\021\n\ttimestamp\030\002 \001(\r\"K\n\rInvLSetTorque\022\r\n"
  "\005regid\030\001 \001(\r\022\013\n\003lsb\030\002 \001(\r\022\013\n\003msb\030\003 \001(\r\022\021"
  "\n\ttimestamp\030\004 \001(\r\"B\n\014InvLResponse\022\016\n\006reg"
  "_id\030\001 \001(\r\022\017\n\007reg_val\030\002 \001(\r\022\021\n\ttimestamp\030"
  "\003 \001(\r\"\312\013\n\rPrimaryFenice\022,\n\rsteer_version"
  "\030\001 \003(\0132\025.primary.SteerVersion\022(\n\013das_ver"
  "sion\030\002 \003(\0132\023.primary.DasVersion\022&\n\nhv_ve"
  "rsion\030\003 \003(\0132\022.primary.HvVersion\022&\n\nlv_ve"
  "rsion\030\004 \003(\0132\022.primary.LvVersion\022(\n\013tlm_v"
  "ersion\030\005 \003(\0132\023.primary.TlmVersion\022%\n\ttim"
  "estamp\030\006 \003(\0132\022.primary.Timestamp\022-\n\016set_"
  "tlm_status\030\007 \003(\0132\025.primary.SetTlmStatus\022"
  "7\n\023steer_system_status\030\010 \003(\0132\032.primary.S"
  "teerSystemStatus\022\037\n\006marker\030\t \003(\0132\017.prima"
  "ry.Marker\022&\n\ntlm_status\030\n \003(\0132\022.primary."
  "TlmStatus\022&\n\ncar_status\030\013 \003(\0132\022.primary."
  "CarStatus\022&\n\ndas_errors\030\014 \003(\0132\022.primary."
  "DasErrors\022\035\n\005speed\030\r \003(\0132\016.primary.Speed"
  "\022&\n\nhv_voltage\030\016 \003(\0132\022.primary.HvVoltage"
  "\022&\n\nhv_current\030\017 \003(\0132\022.primary.HvCurrent"
  "\022 \n\007hv_temp\030\020 \003(\0132\017.primary.HvTemp\022$\n\thv"
  "_errors\030\021 \003(\0132\021.primary.HvErrors\022$\n\tts_s"
  "tatus\030\022 \003(\0132\021.primary.TsStatus\022+\n\rset_ts"
  "_status\030\023 \003(\0132\024.primary.SetTsStatus\022B\n\031s"
  "et_cell_balancing_status\030\024 \003(\0132\037.primary"
  ".SetCellBalancingStatus\0220\n\017handcart_stat"
  "us\030\025 \003(\0132\027.primary.HandcartStatus\022*\n\014ste"
  "er_status\030\026 \003(\0132\024.primary.SteerStatus\022-\n"
  "\016set_car_status\030\027 \003(\0132\025.primary.SetCarSt"
  "atus\0221\n\020set_pedals_range\030\030 \003(\0132\027.primary"
  ".SetPedalsRange\022&\n\nlv_current\030\031 \003(\0132\022.pr"
  "imary.LvCurrent\022&\n\nlv_voltage\030\032 \003(\0132\022.pr"
  "imary.LvVoltage\022.\n\016lv_temperature\030\033 \003(\0132"
  "\026.primary.LvTemperature\022.\n\016cooling_statu"
  "s\030\034 \003(\0132\026.primary.CoolingStatus\0221\n\020hv_ce"
  "lls_voltage\030\035 \003(\0132\027.primary.HvCellsVolta"
  "ge\022+\n\rhv_cells_temp\030\036 \003(\0132\024.primary.HvCe"
  "llsTemp\022@\n\030hv_cell_balancing_status\030\037 \003("
  "\0132\036.primary.HvCellBalancingStatus\0220\n\020inv"
  "_l_set_torque\030  \003(\0132\026.primary.InvLSetTor"
  "que\022-\n\016inv_l_response\030! \003(\0132\025.primary.In"
  "vLResponse*o\n\014RacetypeType\022\031\n\025RACETYPE_A"
  "CCELERATION\020\000\022\024\n\020RACETYPE_SKIDPAD\020\001\022\026\n\022R"
  "ACETYPE_AUTOCROSS\020\002\022\026\n\022RACETYPE_ENDURANC"
  "E\020\003*\\\n\022InverterstatusType\022\026\n\022INVERTERSTA"
  "TUS_OFF\020\000\022\027\n\023INVERTERSTATUS_IDLE\020\001\022\025\n\021IN"
  "VERTERSTATUS_ON\020\002*K\n\rCarstatusType\022\022\n\016CA"
  "RSTATUS_IDLE\020\000\022\023\n\017CARSTATUS_SETUP\020\001\022\021\n\rC"
  "ARSTATUS_RUN\020\002*+\n\nToggleType\022\r\n\tTOGGLE_O"
  "N\020\000\022\016\n\nTOGGLE_OFF\020\001*\224\001\n\023TractioncontrolT"
  "ype\022\027\n\023TRACTIONCONTROL_OFF\020\000\022 \n\034TRACTION"
  "CONTROL_SLIP_CONTROL\020\001\022$\n TRACTIONCONTRO"
  "L_TORQUE_VECTORING\020\002\022\034\n\030TRACTIONCONTROL_"
  "COMPLETE\020\003*]\n\014TsstatusType\022\020\n\014TSSTATUS_O"
  "FF\020\000\022\026\n\022TSSTATUS_PRECHARGE\020\001\022\017\n\013TSSTATUS"
  "_ON\020\002\022\022\n\016TSSTATUS_FATAL\020\003*V\n\007MapType\022\t\n\005"
  "MAP_R\020\000\022\013\n\007MAP_D20\020\001\022\013\n\007MAP_D40\020\002\022\013\n\007MAP"
  "_D60\020\003\022\013\n\007MAP_D80\020\004\022\014\n\010MAP_D100\020\005*\?\n\020Set"
  "carstatusType\022\025\n\021SETCARSTATUS_IDLE\020\000\022\024\n\020"
  "SETCARSTATUS_RUN\020\001*1\n\tBoundType\022\021\n\rBOUND"
  "_SET_MAX\020\000\022\021\n\rBOUND_SET_MIN\020\001*3\n\tPedalTy"
  "pe\022\025\n\021PEDAL_ACCELERATOR\020\000\022\017\n\013PEDAL_BRAKE"
  "\020\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_primary_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_primary_2eproto = {
  false, false, 5370, descriptor_table_protodef_primary_2eproto, "primary.proto", 
  &descriptor_table_primary_2eproto_once, nullptr, 0, 34,
  schemas, file_default_instances, TableStruct_primary_2eproto::offsets,
  file_level_metadata_primary_2eproto, file_level_enum_descriptors_primary_2eproto, file_level_service_descriptors_primary_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_primary_2eproto_getter() {
  return &descriptor_table_primary_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_primary_2eproto(&descriptor_table_primary_2eproto);
namespace primary {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RacetypeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[0];
}
bool RacetypeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InverterstatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[1];
}
bool InverterstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CarstatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[2];
}
bool CarstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToggleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[3];
}
bool ToggleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TractioncontrolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[4];
}
bool TractioncontrolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TsstatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[5];
}
bool TsstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[6];
}
bool MapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetcarstatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[7];
}
bool SetcarstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoundType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[8];
}
bool BoundType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PedalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[9];
}
bool PedalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SteerVersion::_Internal {
 public:
};

SteerVersion::SteerVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SteerVersion)
}
SteerVersion::SteerVersion(const SteerVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SteerVersion)
}

inline void SteerVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
}

SteerVersion::~SteerVersion() {
  // @@protoc_insertion_point(destructor:primary.SteerVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SteerVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SteerVersion::ArenaDtor(void* object) {
  SteerVersion* _this = reinterpret_cast< SteerVersion* >(object);
  (void)_this;
}
void SteerVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SteerVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SteerVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SteerVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SteerVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SteerVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SteerVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SteerVersion)
  return target;
}

size_t SteerVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SteerVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SteerVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SteerVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SteerVersion::GetClassData() const { return &_class_data_; }

void SteerVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SteerVersion *>(to)->MergeFrom(
      static_cast<const SteerVersion &>(from));
}


void SteerVersion::MergeFrom(const SteerVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SteerVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SteerVersion::CopyFrom(const SteerVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SteerVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteerVersion::IsInitialized() const {
  return true;
}

void SteerVersion::InternalSwap(SteerVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SteerVersion, timestamp_)
      + sizeof(SteerVersion::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SteerVersion, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SteerVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[0]);
}

// ===================================================================

class DasVersion::_Internal {
 public:
};

DasVersion::DasVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.DasVersion)
}
DasVersion::DasVersion(const DasVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.DasVersion)
}

inline void DasVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
}

DasVersion::~DasVersion() {
  // @@protoc_insertion_point(destructor:primary.DasVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DasVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DasVersion::ArenaDtor(void* object) {
  DasVersion* _this = reinterpret_cast< DasVersion* >(object);
  (void)_this;
}
void DasVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DasVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DasVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.DasVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DasVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DasVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.DasVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.DasVersion)
  return target;
}

size_t DasVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.DasVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DasVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DasVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DasVersion::GetClassData() const { return &_class_data_; }

void DasVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DasVersion *>(to)->MergeFrom(
      static_cast<const DasVersion &>(from));
}


void DasVersion::MergeFrom(const DasVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.DasVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DasVersion::CopyFrom(const DasVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.DasVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DasVersion::IsInitialized() const {
  return true;
}

void DasVersion::InternalSwap(DasVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DasVersion, timestamp_)
      + sizeof(DasVersion::timestamp_)
      - PROTOBUF_FIELD_OFFSET(DasVersion, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DasVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[1]);
}

// ===================================================================

class HvVersion::_Internal {
 public:
};

HvVersion::HvVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HvVersion)
}
HvVersion::HvVersion(const HvVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HvVersion)
}

inline void HvVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
}

HvVersion::~HvVersion() {
  // @@protoc_insertion_point(destructor:primary.HvVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HvVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvVersion::ArenaDtor(void* object) {
  HvVersion* _this = reinterpret_cast< HvVersion* >(object);
  (void)_this;
}
void HvVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HvVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvVersion)
  return target;
}

size_t HvVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvVersion::GetClassData() const { return &_class_data_; }

void HvVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvVersion *>(to)->MergeFrom(
      static_cast<const HvVersion &>(from));
}


void HvVersion::MergeFrom(const HvVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvVersion::CopyFrom(const HvVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvVersion::IsInitialized() const {
  return true;
}

void HvVersion::InternalSwap(HvVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvVersion, timestamp_)
      + sizeof(HvVersion::timestamp_)
      - PROTOBUF_FIELD_OFFSET(HvVersion, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[2]);
}

// ===================================================================

class LvVersion::_Internal {
 public:
};

LvVersion::LvVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.LvVersion)
}
LvVersion::LvVersion(const LvVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.LvVersion)
}

inline void LvVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
}

LvVersion::~LvVersion() {
  // @@protoc_insertion_point(destructor:primary.LvVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LvVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LvVersion::ArenaDtor(void* object) {
  LvVersion* _this = reinterpret_cast< LvVersion* >(object);
  (void)_this;
}
void LvVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LvVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LvVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LvVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LvVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LvVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LvVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LvVersion)
  return target;
}

size_t LvVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LvVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LvVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LvVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LvVersion::GetClassData() const { return &_class_data_; }

void LvVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LvVersion *>(to)->MergeFrom(
      static_cast<const LvVersion &>(from));
}


void LvVersion::MergeFrom(const LvVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LvVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LvVersion::CopyFrom(const LvVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LvVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvVersion::IsInitialized() const {
  return true;
}

void LvVersion::InternalSwap(LvVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LvVersion, timestamp_)
      + sizeof(LvVersion::timestamp_)
      - PROTOBUF_FIELD_OFFSET(LvVersion, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LvVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[3]);
}

// ===================================================================

class TlmVersion::_Internal {
 public:
};

TlmVersion::TlmVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.TlmVersion)
}
TlmVersion::TlmVersion(const TlmVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.TlmVersion)
}

inline void TlmVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
}

TlmVersion::~TlmVersion() {
  // @@protoc_insertion_point(destructor:primary.TlmVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TlmVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TlmVersion::ArenaDtor(void* object) {
  TlmVersion* _this = reinterpret_cast< TlmVersion* >(object);
  (void)_this;
}
void TlmVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TlmVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TlmVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TlmVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TlmVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TlmVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TlmVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TlmVersion)
  return target;
}

size_t TlmVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TlmVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TlmVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TlmVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TlmVersion::GetClassData() const { return &_class_data_; }

void TlmVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TlmVersion *>(to)->MergeFrom(
      static_cast<const TlmVersion &>(from));
}


void TlmVersion::MergeFrom(const TlmVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TlmVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TlmVersion::CopyFrom(const TlmVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TlmVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TlmVersion::IsInitialized() const {
  return true;
}

void TlmVersion::InternalSwap(TlmVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TlmVersion, timestamp_)
      + sizeof(TlmVersion::timestamp_)
      - PROTOBUF_FIELD_OFFSET(TlmVersion, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TlmVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[4]);
}

// ===================================================================

class Timestamp::_Internal {
 public:
};

Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.Timestamp)
}

inline void Timestamp::SharedCtor() {
timestamp_ = 0u;
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:primary.Timestamp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Timestamp::ArenaDtor(void* object) {
  Timestamp* _this = reinterpret_cast< Timestamp* >(object);
  (void)_this;
}
void Timestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.Timestamp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Timestamp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.Timestamp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.Timestamp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Timestamp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Timestamp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Timestamp::GetClassData() const { return &_class_data_; }

void Timestamp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Timestamp *>(to)->MergeFrom(
      static_cast<const Timestamp &>(from));
}


void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[5]);
}

// ===================================================================

class SetTlmStatus::_Internal {
 public:
};

SetTlmStatus::SetTlmStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SetTlmStatus)
}
SetTlmStatus::SetTlmStatus(const SetTlmStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tlm_status_, &from.tlm_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&tlm_status_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SetTlmStatus)
}

inline void SetTlmStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tlm_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&tlm_status_)) + sizeof(timestamp_));
}

SetTlmStatus::~SetTlmStatus() {
  // @@protoc_insertion_point(destructor:primary.SetTlmStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetTlmStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTlmStatus::ArenaDtor(void* object) {
  SetTlmStatus* _this = reinterpret_cast< SetTlmStatus* >(object);
  (void)_this;
}
void SetTlmStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTlmStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTlmStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SetTlmStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tlm_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&tlm_status_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTlmStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.ToggleType tlm_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tlm_status(static_cast<::primary::ToggleType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.RacetypeType race_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_race_type(static_cast<::primary::RacetypeType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 driver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          driver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 circuit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          circuit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTlmStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SetTlmStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.ToggleType tlm_status = 1;
  if (this->_internal_tlm_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tlm_status(), target);
  }

  // .primary.RacetypeType race_type = 2;
  if (this->_internal_race_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_race_type(), target);
  }

  // uint32 driver = 3;
  if (this->_internal_driver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_driver(), target);
  }

  // uint32 circuit = 4;
  if (this->_internal_circuit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_circuit(), target);
  }

  // uint32 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SetTlmStatus)
  return target;
}

size_t SetTlmStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SetTlmStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.ToggleType tlm_status = 1;
  if (this->_internal_tlm_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tlm_status());
  }

  // .primary.RacetypeType race_type = 2;
  if (this->_internal_race_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_race_type());
  }

  // uint32 driver = 3;
  if (this->_internal_driver() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_driver());
  }

  // uint32 circuit = 4;
  if (this->_internal_circuit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_circuit());
  }

  // uint32 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTlmStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetTlmStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTlmStatus::GetClassData() const { return &_class_data_; }

void SetTlmStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetTlmStatus *>(to)->MergeFrom(
      static_cast<const SetTlmStatus &>(from));
}


void SetTlmStatus::MergeFrom(const SetTlmStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SetTlmStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tlm_status() != 0) {
    _internal_set_tlm_status(from._internal_tlm_status());
  }
  if (from._internal_race_type() != 0) {
    _internal_set_race_type(from._internal_race_type());
  }
  if (from._internal_driver() != 0) {
    _internal_set_driver(from._internal_driver());
  }
  if (from._internal_circuit() != 0) {
    _internal_set_circuit(from._internal_circuit());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTlmStatus::CopyFrom(const SetTlmStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SetTlmStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTlmStatus::IsInitialized() const {
  return true;
}

void SetTlmStatus::InternalSwap(SetTlmStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTlmStatus, timestamp_)
      + sizeof(SetTlmStatus::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SetTlmStatus, tlm_status_)>(
          reinterpret_cast<char*>(&tlm_status_),
          reinterpret_cast<char*>(&other->tlm_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTlmStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[6]);
}

// ===================================================================

class SteerSystemStatus::_Internal {
 public:
};

SteerSystemStatus::SteerSystemStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SteerSystemStatus)
}
SteerSystemStatus::SteerSystemStatus(const SteerSystemStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&soc_temp_, &from.soc_temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&soc_temp_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SteerSystemStatus)
}

inline void SteerSystemStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&soc_temp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&soc_temp_)) + sizeof(timestamp_));
}

SteerSystemStatus::~SteerSystemStatus() {
  // @@protoc_insertion_point(destructor:primary.SteerSystemStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SteerSystemStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SteerSystemStatus::ArenaDtor(void* object) {
  SteerSystemStatus* _this = reinterpret_cast< SteerSystemStatus* >(object);
  (void)_this;
}
void SteerSystemStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SteerSystemStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SteerSystemStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SteerSystemStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&soc_temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&soc_temp_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SteerSystemStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 soc_temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          soc_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SteerSystemStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SteerSystemStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 soc_temp = 1;
  if (this->_internal_soc_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_soc_temp(), target);
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SteerSystemStatus)
  return target;
}

size_t SteerSystemStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SteerSystemStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 soc_temp = 1;
  if (this->_internal_soc_temp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_soc_temp());
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SteerSystemStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SteerSystemStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SteerSystemStatus::GetClassData() const { return &_class_data_; }

void SteerSystemStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SteerSystemStatus *>(to)->MergeFrom(
      static_cast<const SteerSystemStatus &>(from));
}


void SteerSystemStatus::MergeFrom(const SteerSystemStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SteerSystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_soc_temp() != 0) {
    _internal_set_soc_temp(from._internal_soc_temp());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SteerSystemStatus::CopyFrom(const SteerSystemStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SteerSystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteerSystemStatus::IsInitialized() const {
  return true;
}

void SteerSystemStatus::InternalSwap(SteerSystemStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SteerSystemStatus, timestamp_)
      + sizeof(SteerSystemStatus::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SteerSystemStatus, soc_temp_)>(
          reinterpret_cast<char*>(&soc_temp_),
          reinterpret_cast<char*>(&other->soc_temp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SteerSystemStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[7]);
}

// ===================================================================

class Marker::_Internal {
 public:
};

Marker::Marker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.Marker)
}
Marker::Marker(const Marker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.Marker)
}

inline void Marker::SharedCtor() {
timestamp_ = 0u;
}

Marker::~Marker() {
  // @@protoc_insertion_point(destructor:primary.Marker)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Marker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Marker::ArenaDtor(void* object) {
  Marker* _this = reinterpret_cast< Marker* >(object);
  (void)_this;
}
void Marker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Marker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Marker::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.Marker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Marker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Marker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.Marker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.Marker)
  return target;
}

size_t Marker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.Marker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Marker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Marker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Marker::GetClassData() const { return &_class_data_; }

void Marker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Marker *>(to)->MergeFrom(
      static_cast<const Marker &>(from));
}


void Marker::MergeFrom(const Marker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.Marker)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Marker::CopyFrom(const Marker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.Marker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marker::IsInitialized() const {
  return true;
}

void Marker::InternalSwap(Marker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Marker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[8]);
}

// ===================================================================

class TlmStatus::_Internal {
 public:
};

TlmStatus::TlmStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.TlmStatus)
}
TlmStatus::TlmStatus(const TlmStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tlm_status_, &from.tlm_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&tlm_status_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.TlmStatus)
}

inline void TlmStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tlm_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&tlm_status_)) + sizeof(timestamp_));
}

TlmStatus::~TlmStatus() {
  // @@protoc_insertion_point(destructor:primary.TlmStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TlmStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TlmStatus::ArenaDtor(void* object) {
  TlmStatus* _this = reinterpret_cast< TlmStatus* >(object);
  (void)_this;
}
void TlmStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TlmStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TlmStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TlmStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tlm_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&tlm_status_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TlmStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.ToggleType tlm_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tlm_status(static_cast<::primary::ToggleType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.RacetypeType race_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_race_type(static_cast<::primary::RacetypeType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 driver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          driver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 circuit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          circuit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TlmStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TlmStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.ToggleType tlm_status = 1;
  if (this->_internal_tlm_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tlm_status(), target);
  }

  // .primary.RacetypeType race_type = 2;
  if (this->_internal_race_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_race_type(), target);
  }

  // uint32 driver = 3;
  if (this->_internal_driver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_driver(), target);
  }

  // uint32 circuit = 4;
  if (this->_internal_circuit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_circuit(), target);
  }

  // uint32 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TlmStatus)
  return target;
}

size_t TlmStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TlmStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.ToggleType tlm_status = 1;
  if (this->_internal_tlm_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tlm_status());
  }

  // .primary.RacetypeType race_type = 2;
  if (this->_internal_race_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_race_type());
  }

  // uint32 driver = 3;
  if (this->_internal_driver() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_driver());
  }

  // uint32 circuit = 4;
  if (this->_internal_circuit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_circuit());
  }

  // uint32 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TlmStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TlmStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TlmStatus::GetClassData() const { return &_class_data_; }

void TlmStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TlmStatus *>(to)->MergeFrom(
      static_cast<const TlmStatus &>(from));
}


void TlmStatus::MergeFrom(const TlmStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TlmStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tlm_status() != 0) {
    _internal_set_tlm_status(from._internal_tlm_status());
  }
  if (from._internal_race_type() != 0) {
    _internal_set_race_type(from._internal_race_type());
  }
  if (from._internal_driver() != 0) {
    _internal_set_driver(from._internal_driver());
  }
  if (from._internal_circuit() != 0) {
    _internal_set_circuit(from._internal_circuit());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TlmStatus::CopyFrom(const TlmStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TlmStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TlmStatus::IsInitialized() const {
  return true;
}

void TlmStatus::InternalSwap(TlmStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TlmStatus, timestamp_)
      + sizeof(TlmStatus::timestamp_)
      - PROTOBUF_FIELD_OFFSET(TlmStatus, tlm_status_)>(
          reinterpret_cast<char*>(&tlm_status_),
          reinterpret_cast<char*>(&other->tlm_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TlmStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[9]);
}

// ===================================================================

class CarStatus::_Internal {
 public:
};

CarStatus::CarStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.CarStatus)
}
CarStatus::CarStatus(const CarStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&inverter_l_, &from.inverter_l_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&inverter_l_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.CarStatus)
}

inline void CarStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inverter_l_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&inverter_l_)) + sizeof(timestamp_));
}

CarStatus::~CarStatus() {
  // @@protoc_insertion_point(destructor:primary.CarStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CarStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CarStatus::ArenaDtor(void* object) {
  CarStatus* _this = reinterpret_cast< CarStatus* >(object);
  (void)_this;
}
void CarStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CarStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CarStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.CarStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&inverter_l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&inverter_l_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.InverterstatusType inverter_l = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inverter_l(static_cast<::primary::InverterstatusType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.InverterstatusType inverter_r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inverter_r(static_cast<::primary::InverterstatusType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.CarstatusType car_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_car_status(static_cast<::primary::CarstatusType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.CarStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.InverterstatusType inverter_l = 1;
  if (this->_internal_inverter_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_inverter_l(), target);
  }

  // .primary.InverterstatusType inverter_r = 2;
  if (this->_internal_inverter_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_inverter_r(), target);
  }

  // .primary.CarstatusType car_status = 3;
  if (this->_internal_car_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_car_status(), target);
  }

  // uint32 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.CarStatus)
  return target;
}

size_t CarStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.CarStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.InverterstatusType inverter_l = 1;
  if (this->_internal_inverter_l() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inverter_l());
  }

  // .primary.InverterstatusType inverter_r = 2;
  if (this->_internal_inverter_r() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inverter_r());
  }

  // .primary.CarstatusType car_status = 3;
  if (this->_internal_car_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_car_status());
  }

  // uint32 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CarStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarStatus::GetClassData() const { return &_class_data_; }

void CarStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CarStatus *>(to)->MergeFrom(
      static_cast<const CarStatus &>(from));
}


void CarStatus::MergeFrom(const CarStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.CarStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_inverter_l() != 0) {
    _internal_set_inverter_l(from._internal_inverter_l());
  }
  if (from._internal_inverter_r() != 0) {
    _internal_set_inverter_r(from._internal_inverter_r());
  }
  if (from._internal_car_status() != 0) {
    _internal_set_car_status(from._internal_car_status());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarStatus::CopyFrom(const CarStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.CarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarStatus::IsInitialized() const {
  return true;
}

void CarStatus::InternalSwap(CarStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarStatus, timestamp_)
      + sizeof(CarStatus::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CarStatus, inverter_l_)>(
          reinterpret_cast<char*>(&inverter_l_),
          reinterpret_cast<char*>(&other->inverter_l_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[10]);
}

// ===================================================================

class DasErrors::_Internal {
 public:
};

DasErrors::DasErrors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.DasErrors)
}
DasErrors::DasErrors(const DasErrors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&das_error_, &from.das_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&das_error_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.DasErrors)
}

inline void DasErrors::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&das_error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&das_error_)) + sizeof(timestamp_));
}

DasErrors::~DasErrors() {
  // @@protoc_insertion_point(destructor:primary.DasErrors)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DasErrors::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DasErrors::ArenaDtor(void* object) {
  DasErrors* _this = reinterpret_cast< DasErrors* >(object);
  (void)_this;
}
void DasErrors::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DasErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DasErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.DasErrors)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&das_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&das_error_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DasErrors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 das_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          das_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DasErrors::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.DasErrors)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 das_error = 1;
  if (this->_internal_das_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_das_error(), target);
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.DasErrors)
  return target;
}

size_t DasErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.DasErrors)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 das_error = 1;
  if (this->_internal_das_error() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_das_error());
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DasErrors::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DasErrors::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DasErrors::GetClassData() const { return &_class_data_; }

void DasErrors::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DasErrors *>(to)->MergeFrom(
      static_cast<const DasErrors &>(from));
}


void DasErrors::MergeFrom(const DasErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.DasErrors)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_das_error() != 0) {
    _internal_set_das_error(from._internal_das_error());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DasErrors::CopyFrom(const DasErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.DasErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DasErrors::IsInitialized() const {
  return true;
}

void DasErrors::InternalSwap(DasErrors* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DasErrors, timestamp_)
      + sizeof(DasErrors::timestamp_)
      - PROTOBUF_FIELD_OFFSET(DasErrors, das_error_)>(
          reinterpret_cast<char*>(&das_error_),
          reinterpret_cast<char*>(&other->das_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DasErrors::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[11]);
}

// ===================================================================

class Speed::_Internal {
 public:
};

Speed::Speed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.Speed)
}
Speed::Speed(const Speed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&encoder_r_, &from.encoder_r_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&encoder_r_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.Speed)
}

inline void Speed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encoder_r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&encoder_r_)) + sizeof(timestamp_));
}

Speed::~Speed() {
  // @@protoc_insertion_point(destructor:primary.Speed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Speed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Speed::ArenaDtor(void* object) {
  Speed* _this = reinterpret_cast< Speed* >(object);
  (void)_this;
}
void Speed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Speed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Speed::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.Speed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&encoder_r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&encoder_r_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Speed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 encoder_r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          encoder_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 encoder_l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          encoder_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inverter_r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          inverter_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inverter_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          inverter_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Speed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.Speed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 encoder_r = 1;
  if (this->_internal_encoder_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_encoder_r(), target);
  }

  // uint32 encoder_l = 2;
  if (this->_internal_encoder_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_encoder_l(), target);
  }

  // uint32 inverter_r = 3;
  if (this->_internal_inverter_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inverter_r(), target);
  }

  // uint32 inverter_l = 4;
  if (this->_internal_inverter_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_inverter_l(), target);
  }

  // uint32 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.Speed)
  return target;
}

size_t Speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.Speed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 encoder_r = 1;
  if (this->_internal_encoder_r() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_encoder_r());
  }

  // uint32 encoder_l = 2;
  if (this->_internal_encoder_l() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_encoder_l());
  }

  // uint32 inverter_r = 3;
  if (this->_internal_inverter_r() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_inverter_r());
  }

  // uint32 inverter_l = 4;
  if (this->_internal_inverter_l() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_inverter_l());
  }

  // uint32 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Speed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Speed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Speed::GetClassData() const { return &_class_data_; }

void Speed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Speed *>(to)->MergeFrom(
      static_cast<const Speed &>(from));
}


void Speed::MergeFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_encoder_r() != 0) {
    _internal_set_encoder_r(from._internal_encoder_r());
  }
  if (from._internal_encoder_l() != 0) {
    _internal_set_encoder_l(from._internal_encoder_l());
  }
  if (from._internal_inverter_r() != 0) {
    _internal_set_inverter_r(from._internal_inverter_r());
  }
  if (from._internal_inverter_l() != 0) {
    _internal_set_inverter_l(from._internal_inverter_l());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Speed::CopyFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speed::IsInitialized() const {
  return true;
}

void Speed::InternalSwap(Speed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Speed, timestamp_)
      + sizeof(Speed::timestamp_)
      - PROTOBUF_FIELD_OFFSET(Speed, encoder_r_)>(
          reinterpret_cast<char*>(&encoder_r_),
          reinterpret_cast<char*>(&other->encoder_r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Speed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[12]);
}

// ===================================================================

class HvVoltage::_Internal {
 public:
};

HvVoltage::HvVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HvVoltage)
}
HvVoltage::HvVoltage(const HvVoltage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pack_voltage_, &from.pack_voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&pack_voltage_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HvVoltage)
}

inline void HvVoltage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pack_voltage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&pack_voltage_)) + sizeof(timestamp_));
}

HvVoltage::~HvVoltage() {
  // @@protoc_insertion_point(destructor:primary.HvVoltage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HvVoltage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvVoltage::ArenaDtor(void* object) {
  HvVoltage* _this = reinterpret_cast< HvVoltage* >(object);
  (void)_this;
}
void HvVoltage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HvVoltage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvVoltage::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvVoltage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pack_voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pack_voltage_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvVoltage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pack_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pack_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bus_voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bus_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_cell_voltage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_cell_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_cell_voltage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          min_cell_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvVoltage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvVoltage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pack_voltage = 1;
  if (this->_internal_pack_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pack_voltage(), target);
  }

  // uint32 bus_voltage = 2;
  if (this->_internal_bus_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bus_voltage(), target);
  }

  // uint32 max_cell_voltage = 3;
  if (this->_internal_max_cell_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_cell_voltage(), target);
  }

  // uint32 min_cell_voltage = 4;
  if (this->_internal_min_cell_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_min_cell_voltage(), target);
  }

  // uint32 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvVoltage)
  return target;
}

size_t HvVoltage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvVoltage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pack_voltage = 1;
  if (this->_internal_pack_voltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pack_voltage());
  }

  // uint32 bus_voltage = 2;
  if (this->_internal_bus_voltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bus_voltage());
  }

  // uint32 max_cell_voltage = 3;
  if (this->_internal_max_cell_voltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_cell_voltage());
  }

  // uint32 min_cell_voltage = 4;
  if (this->_internal_min_cell_voltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min_cell_voltage());
  }

  // uint32 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvVoltage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvVoltage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvVoltage::GetClassData() const { return &_class_data_; }

void HvVoltage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvVoltage *>(to)->MergeFrom(
      static_cast<const HvVoltage &>(from));
}


void HvVoltage::MergeFrom(const HvVoltage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pack_voltage() != 0) {
    _internal_set_pack_voltage(from._internal_pack_voltage());
  }
  if (from._internal_bus_voltage() != 0) {
    _internal_set_bus_voltage(from._internal_bus_voltage());
  }
  if (from._internal_max_cell_voltage() != 0) {
    _internal_set_max_cell_voltage(from._internal_max_cell_voltage());
  }
  if (from._internal_min_cell_voltage() != 0) {
    _internal_set_min_cell_voltage(from._internal_min_cell_voltage());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvVoltage::CopyFrom(const HvVoltage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvVoltage::IsInitialized() const {
  return true;
}

void HvVoltage::InternalSwap(HvVoltage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvVoltage, timestamp_)
      + sizeof(HvVoltage::timestamp_)
      - PROTOBUF_FIELD_OFFSET(HvVoltage, pack_voltage_)>(
          reinterpret_cast<char*>(&pack_voltage_),
          reinterpret_cast<char*>(&other->pack_voltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvVoltage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[13]);
}

// ===================================================================

class HvCurrent::_Internal {
 public:
};

HvCurrent::HvCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HvCurrent)
}
HvCurrent::HvCurrent(const HvCurrent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_, &from.current_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&current_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HvCurrent)
}

inline void HvCurrent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&current_)) + sizeof(timestamp_));
}

HvCurrent::~HvCurrent() {
  // @@protoc_insertion_point(destructor:primary.HvCurrent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HvCurrent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvCurrent::ArenaDtor(void* object) {
  HvCurrent* _this = reinterpret_cast< HvCurrent* >(object);
  (void)_this;
}
void HvCurrent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HvCurrent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvCurrent::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvCurrent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&current_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvCurrent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvCurrent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvCurrent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current(), target);
  }

  // int32 power = 2;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_power(), target);
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvCurrent)
  return target;
}

size_t HvCurrent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvCurrent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current());
  }

  // int32 power = 2;
  if (this->_internal_power() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_power());
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvCurrent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvCurrent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvCurrent::GetClassData() const { return &_class_data_; }

void HvCurrent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvCurrent *>(to)->MergeFrom(
      static_cast<const HvCurrent &>(from));
}


void HvCurrent::MergeFrom(const HvCurrent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvCurrent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from._internal_power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvCurrent::CopyFrom(const HvCurrent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvCurrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvCurrent::IsInitialized() const {
  return true;
}

void HvCurrent::InternalSwap(HvCurrent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvCurrent, timestamp_)
      + sizeof(HvCurrent::timestamp_)
      - PROTOBUF_FIELD_OFFSET(HvCurrent, current_)>(
          reinterpret_cast<char*>(&current_),
          reinterpret_cast<char*>(&other->current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvCurrent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[14]);
}

// ===================================================================

class HvTemp::_Internal {
 public:
};

HvTemp::HvTemp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HvTemp)
}
HvTemp::HvTemp(const HvTemp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_temp_, &from.average_temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&average_temp_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HvTemp)
}

inline void HvTemp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&average_temp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&average_temp_)) + sizeof(timestamp_));
}

HvTemp::~HvTemp() {
  // @@protoc_insertion_point(destructor:primary.HvTemp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HvTemp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvTemp::ArenaDtor(void* object) {
  HvTemp* _this = reinterpret_cast< HvTemp* >(object);
  (void)_this;
}
void HvTemp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HvTemp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvTemp::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvTemp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&average_temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&average_temp_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvTemp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 average_temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          average_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_temp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          min_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvTemp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvTemp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 average_temp = 1;
  if (this->_internal_average_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_average_temp(), target);
  }

  // uint32 max_temp = 2;
  if (this->_internal_max_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_temp(), target);
  }

  // uint32 min_temp = 3;
  if (this->_internal_min_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_temp(), target);
  }

  // uint32 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvTemp)
  return target;
}

size_t HvTemp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvTemp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 average_temp = 1;
  if (this->_internal_average_temp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_average_temp());
  }

  // uint32 max_temp = 2;
  if (this->_internal_max_temp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_temp());
  }

  // uint32 min_temp = 3;
  if (this->_internal_min_temp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min_temp());
  }

  // uint32 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvTemp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvTemp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvTemp::GetClassData() const { return &_class_data_; }

void HvTemp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvTemp *>(to)->MergeFrom(
      static_cast<const HvTemp &>(from));
}


void HvTemp::MergeFrom(const HvTemp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvTemp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_average_temp() != 0) {
    _internal_set_average_temp(from._internal_average_temp());
  }
  if (from._internal_max_temp() != 0) {
    _internal_set_max_temp(from._internal_max_temp());
  }
  if (from._internal_min_temp() != 0) {
    _internal_set_min_temp(from._internal_min_temp());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvTemp::CopyFrom(const HvTemp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvTemp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvTemp::IsInitialized() const {
  return true;
}

void HvTemp::InternalSwap(HvTemp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvTemp, timestamp_)
      + sizeof(HvTemp::timestamp_)
      - PROTOBUF_FIELD_OFFSET(HvTemp, average_temp_)>(
          reinterpret_cast<char*>(&average_temp_),
          reinterpret_cast<char*>(&other->average_temp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvTemp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[15]);
}

// ===================================================================

class HvErrors::_Internal {
 public:
};

HvErrors::HvErrors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HvErrors)
}
HvErrors::HvErrors(const HvErrors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&warnings_, &from.warnings_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&warnings_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HvErrors)
}

inline void HvErrors::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&warnings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&warnings_)) + sizeof(timestamp_));
}

HvErrors::~HvErrors() {
  // @@protoc_insertion_point(destructor:primary.HvErrors)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HvErrors::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvErrors::ArenaDtor(void* object) {
  HvErrors* _this = reinterpret_cast< HvErrors* >(object);
  (void)_this;
}
void HvErrors::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HvErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvErrors)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&warnings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&warnings_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvErrors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 warnings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          warnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvErrors::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvErrors)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 warnings = 1;
  if (this->_internal_warnings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_warnings(), target);
  }

  // uint32 errors = 2;
  if (this->_internal_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_errors(), target);
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvErrors)
  return target;
}

size_t HvErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvErrors)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 warnings = 1;
  if (this->_internal_warnings() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_warnings());
  }

  // uint32 errors = 2;
  if (this->_internal_errors() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_errors());
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvErrors::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvErrors::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvErrors::GetClassData() const { return &_class_data_; }

void HvErrors::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvErrors *>(to)->MergeFrom(
      static_cast<const HvErrors &>(from));
}


void HvErrors::MergeFrom(const HvErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvErrors)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_warnings() != 0) {
    _internal_set_warnings(from._internal_warnings());
  }
  if (from._internal_errors() != 0) {
    _internal_set_errors(from._internal_errors());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvErrors::CopyFrom(const HvErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvErrors::IsInitialized() const {
  return true;
}

void HvErrors::InternalSwap(HvErrors* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvErrors, timestamp_)
      + sizeof(HvErrors::timestamp_)
      - PROTOBUF_FIELD_OFFSET(HvErrors, warnings_)>(
          reinterpret_cast<char*>(&warnings_),
          reinterpret_cast<char*>(&other->warnings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvErrors::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[16]);
}

// ===================================================================

class TsStatus::_Internal {
 public:
};

TsStatus::TsStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.TsStatus)
}
TsStatus::TsStatus(const TsStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ts_status_, &from.ts_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&ts_status_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.TsStatus)
}

inline void TsStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ts_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&ts_status_)) + sizeof(timestamp_));
}

TsStatus::~TsStatus() {
  // @@protoc_insertion_point(destructor:primary.TsStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TsStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TsStatus::ArenaDtor(void* object) {
  TsStatus* _this = reinterpret_cast< TsStatus* >(object);
  (void)_this;
}
void TsStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TsStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TsStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ts_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&ts_status_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TsStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.TsstatusType ts_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status(static_cast<::primary::TsstatusType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TsStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TsStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.TsstatusType ts_status = 1;
  if (this->_internal_ts_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status(), target);
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TsStatus)
  return target;
}

size_t TsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TsStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.TsstatusType ts_status = 1;
  if (this->_internal_ts_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ts_status());
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TsStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TsStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TsStatus::GetClassData() const { return &_class_data_; }

void TsStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TsStatus *>(to)->MergeFrom(
      static_cast<const TsStatus &>(from));
}


void TsStatus::MergeFrom(const TsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ts_status() != 0) {
    _internal_set_ts_status(from._internal_ts_status());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TsStatus::CopyFrom(const TsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsStatus::IsInitialized() const {
  return true;
}

void TsStatus::InternalSwap(TsStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TsStatus, timestamp_)
      + sizeof(TsStatus::timestamp_)
      - PROTOBUF_FIELD_OFFSET(TsStatus, ts_status_)>(
          reinterpret_cast<char*>(&ts_status_),
          reinterpret_cast<char*>(&other->ts_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TsStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[17]);
}

// ===================================================================

class SetTsStatus::_Internal {
 public:
};

SetTsStatus::SetTsStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SetTsStatus)
}
SetTsStatus::SetTsStatus(const SetTsStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ts_status_set_, &from.ts_status_set_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&ts_status_set_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SetTsStatus)
}

inline void SetTsStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ts_status_set_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&ts_status_set_)) + sizeof(timestamp_));
}

SetTsStatus::~SetTsStatus() {
  // @@protoc_insertion_point(destructor:primary.SetTsStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetTsStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTsStatus::ArenaDtor(void* object) {
  SetTsStatus* _this = reinterpret_cast< SetTsStatus* >(object);
  (void)_this;
}
void SetTsStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTsStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SetTsStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ts_status_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&ts_status_set_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTsStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.ToggleType ts_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status_set(static_cast<::primary::ToggleType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTsStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SetTsStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.ToggleType ts_status_set = 1;
  if (this->_internal_ts_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status_set(), target);
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SetTsStatus)
  return target;
}

size_t SetTsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SetTsStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.ToggleType ts_status_set = 1;
  if (this->_internal_ts_status_set() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ts_status_set());
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTsStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetTsStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTsStatus::GetClassData() const { return &_class_data_; }

void SetTsStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetTsStatus *>(to)->MergeFrom(
      static_cast<const SetTsStatus &>(from));
}


void SetTsStatus::MergeFrom(const SetTsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SetTsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ts_status_set() != 0) {
    _internal_set_ts_status_set(from._internal_ts_status_set());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTsStatus::CopyFrom(const SetTsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SetTsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTsStatus::IsInitialized() const {
  return true;
}

void SetTsStatus::InternalSwap(SetTsStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTsStatus, timestamp_)
      + sizeof(SetTsStatus::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SetTsStatus, ts_status_set_)>(
          reinterpret_cast<char*>(&ts_status_set_),
          reinterpret_cast<char*>(&other->ts_status_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTsStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[18]);
}

// ===================================================================

class SetCellBalancingStatus::_Internal {
 public:
};

SetCellBalancingStatus::SetCellBalancingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SetCellBalancingStatus)
}
SetCellBalancingStatus::SetCellBalancingStatus(const SetCellBalancingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&set_balancing_status_, &from.set_balancing_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&set_balancing_status_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SetCellBalancingStatus)
}

inline void SetCellBalancingStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&set_balancing_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&set_balancing_status_)) + sizeof(timestamp_));
}

SetCellBalancingStatus::~SetCellBalancingStatus() {
  // @@protoc_insertion_point(destructor:primary.SetCellBalancingStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetCellBalancingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetCellBalancingStatus::ArenaDtor(void* object) {
  SetCellBalancingStatus* _this = reinterpret_cast< SetCellBalancingStatus* >(object);
  (void)_this;
}
void SetCellBalancingStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetCellBalancingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetCellBalancingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SetCellBalancingStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&set_balancing_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&set_balancing_status_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCellBalancingStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.ToggleType set_balancing_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_set_balancing_status(static_cast<::primary::ToggleType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetCellBalancingStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SetCellBalancingStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.ToggleType set_balancing_status = 1;
  if (this->_internal_set_balancing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_set_balancing_status(), target);
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SetCellBalancingStatus)
  return target;
}

size_t SetCellBalancingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SetCellBalancingStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.ToggleType set_balancing_status = 1;
  if (this->_internal_set_balancing_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_set_balancing_status());
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCellBalancingStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetCellBalancingStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCellBalancingStatus::GetClassData() const { return &_class_data_; }

void SetCellBalancingStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetCellBalancingStatus *>(to)->MergeFrom(
      static_cast<const SetCellBalancingStatus &>(from));
}


void SetCellBalancingStatus::MergeFrom(const SetCellBalancingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SetCellBalancingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_set_balancing_status() != 0) {
    _internal_set_set_balancing_status(from._internal_set_balancing_status());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetCellBalancingStatus::CopyFrom(const SetCellBalancingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SetCellBalancingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCellBalancingStatus::IsInitialized() const {
  return true;
}

void SetCellBalancingStatus::InternalSwap(SetCellBalancingStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetCellBalancingStatus, timestamp_)
      + sizeof(SetCellBalancingStatus::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SetCellBalancingStatus, set_balancing_status_)>(
          reinterpret_cast<char*>(&set_balancing_status_),
          reinterpret_cast<char*>(&other->set_balancing_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCellBalancingStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[19]);
}

// ===================================================================

class HandcartStatus::_Internal {
 public:
};

HandcartStatus::HandcartStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HandcartStatus)
}
HandcartStatus::HandcartStatus(const HandcartStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&connected_, &from.connected_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&connected_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HandcartStatus)
}

inline void HandcartStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connected_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&connected_)) + sizeof(timestamp_));
}

HandcartStatus::~HandcartStatus() {
  // @@protoc_insertion_point(destructor:primary.HandcartStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HandcartStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HandcartStatus::ArenaDtor(void* object) {
  HandcartStatus* _this = reinterpret_cast< HandcartStatus* >(object);
  (void)_this;
}
void HandcartStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HandcartStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HandcartStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HandcartStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&connected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&connected_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandcartStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool connected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandcartStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HandcartStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connected = 1;
  if (this->_internal_connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_connected(), target);
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HandcartStatus)
  return target;
}

size_t HandcartStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HandcartStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool connected = 1;
  if (this->_internal_connected() != 0) {
    total_size += 1 + 1;
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandcartStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HandcartStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandcartStatus::GetClassData() const { return &_class_data_; }

void HandcartStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HandcartStatus *>(to)->MergeFrom(
      static_cast<const HandcartStatus &>(from));
}


void HandcartStatus::MergeFrom(const HandcartStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HandcartStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandcartStatus::CopyFrom(const HandcartStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HandcartStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandcartStatus::IsInitialized() const {
  return true;
}

void HandcartStatus::InternalSwap(HandcartStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HandcartStatus, timestamp_)
      + sizeof(HandcartStatus::timestamp_)
      - PROTOBUF_FIELD_OFFSET(HandcartStatus, connected_)>(
          reinterpret_cast<char*>(&connected_),
          reinterpret_cast<char*>(&other->connected_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HandcartStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[20]);
}

// ===================================================================

class SteerStatus::_Internal {
 public:
};

SteerStatus::SteerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SteerStatus)
}
SteerStatus::SteerStatus(const SteerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&traction_control_, &from.traction_control_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&traction_control_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SteerStatus)
}

inline void SteerStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&traction_control_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&traction_control_)) + sizeof(timestamp_));
}

SteerStatus::~SteerStatus() {
  // @@protoc_insertion_point(destructor:primary.SteerStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SteerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SteerStatus::ArenaDtor(void* object) {
  SteerStatus* _this = reinterpret_cast< SteerStatus* >(object);
  (void)_this;
}
void SteerStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SteerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SteerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SteerStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&traction_control_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&traction_control_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SteerStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.TractioncontrolType traction_control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_traction_control(static_cast<::primary::TractioncontrolType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.MapType map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_map(static_cast<::primary::MapType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SteerStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SteerStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.TractioncontrolType traction_control = 1;
  if (this->_internal_traction_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_traction_control(), target);
  }

  // .primary.MapType map = 2;
  if (this->_internal_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_map(), target);
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SteerStatus)
  return target;
}

size_t SteerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SteerStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.TractioncontrolType traction_control = 1;
  if (this->_internal_traction_control() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_traction_control());
  }

  // .primary.MapType map = 2;
  if (this->_internal_map() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_map());
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SteerStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SteerStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SteerStatus::GetClassData() const { return &_class_data_; }

void SteerStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SteerStatus *>(to)->MergeFrom(
      static_cast<const SteerStatus &>(from));
}


void SteerStatus::MergeFrom(const SteerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SteerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_traction_control() != 0) {
    _internal_set_traction_control(from._internal_traction_control());
  }
  if (from._internal_map() != 0) {
    _internal_set_map(from._internal_map());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SteerStatus::CopyFrom(const SteerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SteerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteerStatus::IsInitialized() const {
  return true;
}

void SteerStatus::InternalSwap(SteerStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SteerStatus, timestamp_)
      + sizeof(SteerStatus::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SteerStatus, traction_control_)>(
          reinterpret_cast<char*>(&traction_control_),
          reinterpret_cast<char*>(&other->traction_control_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SteerStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[21]);
}

// ===================================================================

class SetCarStatus::_Internal {
 public:
};

SetCarStatus::SetCarStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SetCarStatus)
}
SetCarStatus::SetCarStatus(const SetCarStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&car_status_set_, &from.car_status_set_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&car_status_set_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SetCarStatus)
}

inline void SetCarStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&car_status_set_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&car_status_set_)) + sizeof(timestamp_));
}

SetCarStatus::~SetCarStatus() {
  // @@protoc_insertion_point(destructor:primary.SetCarStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetCarStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetCarStatus::ArenaDtor(void* object) {
  SetCarStatus* _this = reinterpret_cast< SetCarStatus* >(object);
  (void)_this;
}
void SetCarStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetCarStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetCarStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SetCarStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&car_status_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&car_status_set_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCarStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.SetcarstatusType car_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_car_status_set(static_cast<::primary::SetcarstatusType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetCarStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SetCarStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.SetcarstatusType car_status_set = 1;
  if (this->_internal_car_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_car_status_set(), target);
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SetCarStatus)
  return target;
}

size_t SetCarStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SetCarStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.SetcarstatusType car_status_set = 1;
  if (this->_internal_car_status_set() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_car_status_set());
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCarStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetCarStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCarStatus::GetClassData() const { return &_class_data_; }

void SetCarStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetCarStatus *>(to)->MergeFrom(
      static_cast<const SetCarStatus &>(from));
}


void SetCarStatus::MergeFrom(const SetCarStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SetCarStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_car_status_set() != 0) {
    _internal_set_car_status_set(from._internal_car_status_set());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetCarStatus::CopyFrom(const SetCarStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SetCarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCarStatus::IsInitialized() const {
  return true;
}

void SetCarStatus::InternalSwap(SetCarStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetCarStatus, timestamp_)
      + sizeof(SetCarStatus::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SetCarStatus, car_status_set_)>(
          reinterpret_cast<char*>(&car_status_set_),
          reinterpret_cast<char*>(&other->car_status_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCarStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[22]);
}

// ===================================================================

class SetPedalsRange::_Internal {
 public:
};

SetPedalsRange::SetPedalsRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SetPedalsRange)
}
SetPedalsRange::SetPedalsRange(const SetPedalsRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bound_, &from.bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&bound_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SetPedalsRange)
}

inline void SetPedalsRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bound_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&bound_)) + sizeof(timestamp_));
}

SetPedalsRange::~SetPedalsRange() {
  // @@protoc_insertion_point(destructor:primary.SetPedalsRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetPedalsRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetPedalsRange::ArenaDtor(void* object) {
  SetPedalsRange* _this = reinterpret_cast< SetPedalsRange* >(object);
  (void)_this;
}
void SetPedalsRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPedalsRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPedalsRange::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SetPedalsRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&bound_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPedalsRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.BoundType bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bound(static_cast<::primary::BoundType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.PedalType pedal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pedal(static_cast<::primary::PedalType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPedalsRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SetPedalsRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.BoundType bound = 1;
  if (this->_internal_bound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bound(), target);
  }

  // .primary.PedalType pedal = 2;
  if (this->_internal_pedal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pedal(), target);
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SetPedalsRange)
  return target;
}

size_t SetPedalsRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SetPedalsRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.BoundType bound = 1;
  if (this->_internal_bound() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bound());
  }

  // .primary.PedalType pedal = 2;
  if (this->_internal_pedal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pedal());
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPedalsRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetPedalsRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPedalsRange::GetClassData() const { return &_class_data_; }

void SetPedalsRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetPedalsRange *>(to)->MergeFrom(
      static_cast<const SetPedalsRange &>(from));
}


void SetPedalsRange::MergeFrom(const SetPedalsRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SetPedalsRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bound() != 0) {
    _internal_set_bound(from._internal_bound());
  }
  if (from._internal_pedal() != 0) {
    _internal_set_pedal(from._internal_pedal());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPedalsRange::CopyFrom(const SetPedalsRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SetPedalsRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPedalsRange::IsInitialized() const {
  return true;
}

void SetPedalsRange::InternalSwap(SetPedalsRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPedalsRange, timestamp_)
      + sizeof(SetPedalsRange::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SetPedalsRange, bound_)>(
          reinterpret_cast<char*>(&bound_),
          reinterpret_cast<char*>(&other->bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPedalsRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[23]);
}

// ===================================================================

class LvCurrent::_Internal {
 public:
};

LvCurrent::LvCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.LvCurrent)
}
LvCurrent::LvCurrent(const LvCurrent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_, &from.current_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&current_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.LvCurrent)
}

inline void LvCurrent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&current_)) + sizeof(timestamp_));
}

LvCurrent::~LvCurrent() {
  // @@protoc_insertion_point(destructor:primary.LvCurrent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LvCurrent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LvCurrent::ArenaDtor(void* object) {
  LvCurrent* _this = reinterpret_cast< LvCurrent* >(object);
  (void)_this;
}
void LvCurrent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LvCurrent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LvCurrent::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LvCurrent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&current_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LvCurrent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LvCurrent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LvCurrent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current(), target);
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LvCurrent)
  return target;
}

size_t LvCurrent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LvCurrent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current());
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LvCurrent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LvCurrent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LvCurrent::GetClassData() const { return &_class_data_; }

void LvCurrent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LvCurrent *>(to)->MergeFrom(
      static_cast<const LvCurrent &>(from));
}


void LvCurrent::MergeFrom(const LvCurrent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LvCurrent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LvCurrent::CopyFrom(const LvCurrent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LvCurrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvCurrent::IsInitialized() const {
  return true;
}

void LvCurrent::InternalSwap(LvCurrent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LvCurrent, timestamp_)
      + sizeof(LvCurrent::timestamp_)
      - PROTOBUF_FIELD_OFFSET(LvCurrent, current_)>(
          reinterpret_cast<char*>(&current_),
          reinterpret_cast<char*>(&other->current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LvCurrent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[24]);
}

// ===================================================================

class LvVoltage::_Internal {
 public:
};

LvVoltage::LvVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.LvVoltage)
}
LvVoltage::LvVoltage(const LvVoltage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_voltage_, &from.total_voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&total_voltage_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.LvVoltage)
}

inline void LvVoltage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_voltage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&total_voltage_)) + sizeof(timestamp_));
}

LvVoltage::~LvVoltage() {
  // @@protoc_insertion_point(destructor:primary.LvVoltage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LvVoltage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LvVoltage::ArenaDtor(void* object) {
  LvVoltage* _this = reinterpret_cast< LvVoltage* >(object);
  (void)_this;
}
void LvVoltage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LvVoltage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LvVoltage::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LvVoltage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&total_voltage_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LvVoltage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 total_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          total_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          voltage_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          voltage_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          voltage_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          voltage_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LvVoltage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LvVoltage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_voltage = 1;
  if (this->_internal_total_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_voltage(), target);
  }

  // uint32 voltage_1 = 2;
  if (this->_internal_voltage_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_voltage_1(), target);
  }

  // uint32 voltage_2 = 3;
  if (this->_internal_voltage_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_voltage_2(), target);
  }

  // uint32 voltage_3 = 4;
  if (this->_internal_voltage_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_voltage_3(), target);
  }

  // uint32 voltage_4 = 5;
  if (this->_internal_voltage_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_voltage_4(), target);
  }

  // uint32 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LvVoltage)
  return target;
}

size_t LvVoltage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LvVoltage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 total_voltage = 1;
  if (this->_internal_total_voltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_voltage());
  }

  // uint32 voltage_1 = 2;
  if (this->_internal_voltage_1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_1());
  }

  // uint32 voltage_2 = 3;
  if (this->_internal_voltage_2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_2());
  }

  // uint32 voltage_3 = 4;
  if (this->_internal_voltage_3() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_3());
  }

  // uint32 voltage_4 = 5;
  if (this->_internal_voltage_4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_4());
  }

  // uint32 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LvVoltage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LvVoltage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LvVoltage::GetClassData() const { return &_class_data_; }

void LvVoltage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LvVoltage *>(to)->MergeFrom(
      static_cast<const LvVoltage &>(from));
}


void LvVoltage::MergeFrom(const LvVoltage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LvVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_voltage() != 0) {
    _internal_set_total_voltage(from._internal_total_voltage());
  }
  if (from._internal_voltage_1() != 0) {
    _internal_set_voltage_1(from._internal_voltage_1());
  }
  if (from._internal_voltage_2() != 0) {
    _internal_set_voltage_2(from._internal_voltage_2());
  }
  if (from._internal_voltage_3() != 0) {
    _internal_set_voltage_3(from._internal_voltage_3());
  }
  if (from._internal_voltage_4() != 0) {
    _internal_set_voltage_4(from._internal_voltage_4());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LvVoltage::CopyFrom(const LvVoltage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LvVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvVoltage::IsInitialized() const {
  return true;
}

void LvVoltage::InternalSwap(LvVoltage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LvVoltage, timestamp_)
      + sizeof(LvVoltage::timestamp_)
      - PROTOBUF_FIELD_OFFSET(LvVoltage, total_voltage_)>(
          reinterpret_cast<char*>(&total_voltage_),
          reinterpret_cast<char*>(&other->total_voltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LvVoltage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[25]);
}

// ===================================================================

class LvTemperature::_Internal {
 public:
};

LvTemperature::LvTemperature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.LvTemperature)
}
LvTemperature::LvTemperature(const LvTemperature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bp_temperature_, &from.bp_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&bp_temperature_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.LvTemperature)
}

inline void LvTemperature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bp_temperature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&bp_temperature_)) + sizeof(timestamp_));
}

LvTemperature::~LvTemperature() {
  // @@protoc_insertion_point(destructor:primary.LvTemperature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LvTemperature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LvTemperature::ArenaDtor(void* object) {
  LvTemperature* _this = reinterpret_cast< LvTemperature* >(object);
  (void)_this;
}
void LvTemperature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LvTemperature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LvTemperature::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LvTemperature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bp_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&bp_temperature_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LvTemperature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 bp_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bp_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dcdc_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          dcdc_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LvTemperature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LvTemperature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bp_temperature = 1;
  if (this->_internal_bp_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bp_temperature(), target);
  }

  // uint32 dcdc_temperature = 2;
  if (this->_internal_dcdc_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dcdc_temperature(), target);
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LvTemperature)
  return target;
}

size_t LvTemperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LvTemperature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bp_temperature = 1;
  if (this->_internal_bp_temperature() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bp_temperature());
  }

  // uint32 dcdc_temperature = 2;
  if (this->_internal_dcdc_temperature() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dcdc_temperature());
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LvTemperature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LvTemperature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LvTemperature::GetClassData() const { return &_class_data_; }

void LvTemperature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LvTemperature *>(to)->MergeFrom(
      static_cast<const LvTemperature &>(from));
}


void LvTemperature::MergeFrom(const LvTemperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LvTemperature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bp_temperature() != 0) {
    _internal_set_bp_temperature(from._internal_bp_temperature());
  }
  if (from._internal_dcdc_temperature() != 0) {
    _internal_set_dcdc_temperature(from._internal_dcdc_temperature());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LvTemperature::CopyFrom(const LvTemperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LvTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvTemperature::IsInitialized() const {
  return true;
}

void LvTemperature::InternalSwap(LvTemperature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LvTemperature, timestamp_)
      + sizeof(LvTemperature::timestamp_)
      - PROTOBUF_FIELD_OFFSET(LvTemperature, bp_temperature_)>(
          reinterpret_cast<char*>(&bp_temperature_),
          reinterpret_cast<char*>(&other->bp_temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LvTemperature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[26]);
}

// ===================================================================

class CoolingStatus::_Internal {
 public:
};

CoolingStatus::CoolingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.CoolingStatus)
}
CoolingStatus::CoolingStatus(const CoolingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hv_fan_speed_, &from.hv_fan_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&hv_fan_speed_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.CoolingStatus)
}

inline void CoolingStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hv_fan_speed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&hv_fan_speed_)) + sizeof(timestamp_));
}

CoolingStatus::~CoolingStatus() {
  // @@protoc_insertion_point(destructor:primary.CoolingStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CoolingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CoolingStatus::ArenaDtor(void* object) {
  CoolingStatus* _this = reinterpret_cast< CoolingStatus* >(object);
  (void)_this;
}
void CoolingStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoolingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CoolingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.CoolingStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hv_fan_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&hv_fan_speed_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoolingStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 hv_fan_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hv_fan_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lv_fan_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lv_fan_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pump_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pump_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoolingStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.CoolingStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hv_fan_speed = 1;
  if (this->_internal_hv_fan_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hv_fan_speed(), target);
  }

  // uint32 lv_fan_speed = 2;
  if (this->_internal_lv_fan_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lv_fan_speed(), target);
  }

  // uint32 pump_speed = 3;
  if (this->_internal_pump_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pump_speed(), target);
  }

  // uint32 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.CoolingStatus)
  return target;
}

size_t CoolingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.CoolingStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hv_fan_speed = 1;
  if (this->_internal_hv_fan_speed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hv_fan_speed());
  }

  // uint32 lv_fan_speed = 2;
  if (this->_internal_lv_fan_speed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lv_fan_speed());
  }

  // uint32 pump_speed = 3;
  if (this->_internal_pump_speed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pump_speed());
  }

  // uint32 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoolingStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CoolingStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoolingStatus::GetClassData() const { return &_class_data_; }

void CoolingStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CoolingStatus *>(to)->MergeFrom(
      static_cast<const CoolingStatus &>(from));
}


void CoolingStatus::MergeFrom(const CoolingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.CoolingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hv_fan_speed() != 0) {
    _internal_set_hv_fan_speed(from._internal_hv_fan_speed());
  }
  if (from._internal_lv_fan_speed() != 0) {
    _internal_set_lv_fan_speed(from._internal_lv_fan_speed());
  }
  if (from._internal_pump_speed() != 0) {
    _internal_set_pump_speed(from._internal_pump_speed());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoolingStatus::CopyFrom(const CoolingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.CoolingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoolingStatus::IsInitialized() const {
  return true;
}

void CoolingStatus::InternalSwap(CoolingStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoolingStatus, timestamp_)
      + sizeof(CoolingStatus::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CoolingStatus, hv_fan_speed_)>(
          reinterpret_cast<char*>(&hv_fan_speed_),
          reinterpret_cast<char*>(&other->hv_fan_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoolingStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[27]);
}

// ===================================================================

class HvCellsVoltage::_Internal {
 public:
};

HvCellsVoltage::HvCellsVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HvCellsVoltage)
}
HvCellsVoltage::HvCellsVoltage(const HvCellsVoltage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cell_index_, &from.cell_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&cell_index_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HvCellsVoltage)
}

inline void HvCellsVoltage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&cell_index_)) + sizeof(timestamp_));
}

HvCellsVoltage::~HvCellsVoltage() {
  // @@protoc_insertion_point(destructor:primary.HvCellsVoltage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HvCellsVoltage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvCellsVoltage::ArenaDtor(void* object) {
  HvCellsVoltage* _this = reinterpret_cast< HvCellsVoltage* >(object);
  (void)_this;
}
void HvCellsVoltage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HvCellsVoltage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvCellsVoltage::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvCellsVoltage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cell_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&cell_index_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvCellsVoltage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 cell_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          voltage_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          voltage_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          voltage_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvCellsVoltage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvCellsVoltage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cell_index = 1;
  if (this->_internal_cell_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_index(), target);
  }

  // uint32 voltage_0 = 2;
  if (this->_internal_voltage_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_voltage_0(), target);
  }

  // uint32 voltage_1 = 3;
  if (this->_internal_voltage_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_voltage_1(), target);
  }

  // uint32 voltage_2 = 4;
  if (this->_internal_voltage_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_voltage_2(), target);
  }

  // uint32 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvCellsVoltage)
  return target;
}

size_t HvCellsVoltage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvCellsVoltage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cell_index = 1;
  if (this->_internal_cell_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_index());
  }

  // uint32 voltage_0 = 2;
  if (this->_internal_voltage_0() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_0());
  }

  // uint32 voltage_1 = 3;
  if (this->_internal_voltage_1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_1());
  }

  // uint32 voltage_2 = 4;
  if (this->_internal_voltage_2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_2());
  }

  // uint32 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvCellsVoltage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvCellsVoltage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvCellsVoltage::GetClassData() const { return &_class_data_; }

void HvCellsVoltage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvCellsVoltage *>(to)->MergeFrom(
      static_cast<const HvCellsVoltage &>(from));
}


void HvCellsVoltage::MergeFrom(const HvCellsVoltage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvCellsVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cell_index() != 0) {
    _internal_set_cell_index(from._internal_cell_index());
  }
  if (from._internal_voltage_0() != 0) {
    _internal_set_voltage_0(from._internal_voltage_0());
  }
  if (from._internal_voltage_1() != 0) {
    _internal_set_voltage_1(from._internal_voltage_1());
  }
  if (from._internal_voltage_2() != 0) {
    _internal_set_voltage_2(from._internal_voltage_2());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvCellsVoltage::CopyFrom(const HvCellsVoltage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvCellsVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvCellsVoltage::IsInitialized() const {
  return true;
}

void HvCellsVoltage::InternalSwap(HvCellsVoltage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvCellsVoltage, timestamp_)
      + sizeof(HvCellsVoltage::timestamp_)
      - PROTOBUF_FIELD_OFFSET(HvCellsVoltage, cell_index_)>(
          reinterpret_cast<char*>(&cell_index_),
          reinterpret_cast<char*>(&other->cell_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvCellsVoltage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[28]);
}

// ===================================================================

class HvCellsTemp::_Internal {
 public:
};

HvCellsTemp::HvCellsTemp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HvCellsTemp)
}
HvCellsTemp::HvCellsTemp(const HvCellsTemp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cell_index_, &from.cell_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&cell_index_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HvCellsTemp)
}

inline void HvCellsTemp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&cell_index_)) + sizeof(timestamp_));
}

HvCellsTemp::~HvCellsTemp() {
  // @@protoc_insertion_point(destructor:primary.HvCellsTemp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HvCellsTemp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvCellsTemp::ArenaDtor(void* object) {
  HvCellsTemp* _this = reinterpret_cast< HvCellsTemp* >(object);
  (void)_this;
}
void HvCellsTemp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HvCellsTemp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvCellsTemp::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvCellsTemp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cell_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&cell_index_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvCellsTemp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 cell_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          temp_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          temp_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          temp_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          temp_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          temp_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          temp_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          temp_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvCellsTemp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvCellsTemp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cell_index = 1;
  if (this->_internal_cell_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_index(), target);
  }

  // uint32 temp_0 = 2;
  if (this->_internal_temp_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_temp_0(), target);
  }

  // uint32 temp_1 = 3;
  if (this->_internal_temp_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_temp_1(), target);
  }

  // uint32 temp_2 = 4;
  if (this->_internal_temp_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_temp_2(), target);
  }

  // uint32 temp_3 = 5;
  if (this->_internal_temp_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_temp_3(), target);
  }

  // uint32 temp_4 = 6;
  if (this->_internal_temp_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_temp_4(), target);
  }

  // uint32 temp_5 = 7;
  if (this->_internal_temp_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_temp_5(), target);
  }

  // uint32 temp_6 = 8;
  if (this->_internal_temp_6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_temp_6(), target);
  }

  // uint32 timestamp = 9;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvCellsTemp)
  return target;
}

size_t HvCellsTemp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvCellsTemp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cell_index = 1;
  if (this->_internal_cell_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_index());
  }

  // uint32 temp_0 = 2;
  if (this->_internal_temp_0() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_0());
  }

  // uint32 temp_1 = 3;
  if (this->_internal_temp_1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_1());
  }

  // uint32 temp_2 = 4;
  if (this->_internal_temp_2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_2());
  }

  // uint32 temp_3 = 5;
  if (this->_internal_temp_3() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_3());
  }

  // uint32 temp_4 = 6;
  if (this->_internal_temp_4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_4());
  }

  // uint32 temp_5 = 7;
  if (this->_internal_temp_5() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_5());
  }

  // uint32 temp_6 = 8;
  if (this->_internal_temp_6() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_6());
  }

  // uint32 timestamp = 9;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvCellsTemp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvCellsTemp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvCellsTemp::GetClassData() const { return &_class_data_; }

void HvCellsTemp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvCellsTemp *>(to)->MergeFrom(
      static_cast<const HvCellsTemp &>(from));
}


void HvCellsTemp::MergeFrom(const HvCellsTemp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvCellsTemp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cell_index() != 0) {
    _internal_set_cell_index(from._internal_cell_index());
  }
  if (from._internal_temp_0() != 0) {
    _internal_set_temp_0(from._internal_temp_0());
  }
  if (from._internal_temp_1() != 0) {
    _internal_set_temp_1(from._internal_temp_1());
  }
  if (from._internal_temp_2() != 0) {
    _internal_set_temp_2(from._internal_temp_2());
  }
  if (from._internal_temp_3() != 0) {
    _internal_set_temp_3(from._internal_temp_3());
  }
  if (from._internal_temp_4() != 0) {
    _internal_set_temp_4(from._internal_temp_4());
  }
  if (from._internal_temp_5() != 0) {
    _internal_set_temp_5(from._internal_temp_5());
  }
  if (from._internal_temp_6() != 0) {
    _internal_set_temp_6(from._internal_temp_6());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvCellsTemp::CopyFrom(const HvCellsTemp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvCellsTemp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvCellsTemp::IsInitialized() const {
  return true;
}

void HvCellsTemp::InternalSwap(HvCellsTemp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvCellsTemp, timestamp_)
      + sizeof(HvCellsTemp::timestamp_)
      - PROTOBUF_FIELD_OFFSET(HvCellsTemp, cell_index_)>(
          reinterpret_cast<char*>(&cell_index_),
          reinterpret_cast<char*>(&other->cell_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvCellsTemp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[29]);
}

// ===================================================================

class HvCellBalancingStatus::_Internal {
 public:
};

HvCellBalancingStatus::HvCellBalancingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HvCellBalancingStatus)
}
HvCellBalancingStatus::HvCellBalancingStatus(const HvCellBalancingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&balancing_status_, &from.balancing_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&balancing_status_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HvCellBalancingStatus)
}

inline void HvCellBalancingStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&balancing_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&balancing_status_)) + sizeof(timestamp_));
}

HvCellBalancingStatus::~HvCellBalancingStatus() {
  // @@protoc_insertion_point(destructor:primary.HvCellBalancingStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HvCellBalancingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvCellBalancingStatus::ArenaDtor(void* object) {
  HvCellBalancingStatus* _this = reinterpret_cast< HvCellBalancingStatus* >(object);
  (void)_this;
}
void HvCellBalancingStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HvCellBalancingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvCellBalancingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvCellBalancingStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&balancing_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&balancing_status_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvCellBalancingStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.ToggleType balancing_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_balancing_status(static_cast<::primary::ToggleType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvCellBalancingStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvCellBalancingStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.ToggleType balancing_status = 1;
  if (this->_internal_balancing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_balancing_status(), target);
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvCellBalancingStatus)
  return target;
}

size_t HvCellBalancingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvCellBalancingStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.ToggleType balancing_status = 1;
  if (this->_internal_balancing_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_balancing_status());
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvCellBalancingStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvCellBalancingStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvCellBalancingStatus::GetClassData() const { return &_class_data_; }

void HvCellBalancingStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvCellBalancingStatus *>(to)->MergeFrom(
      static_cast<const HvCellBalancingStatus &>(from));
}


void HvCellBalancingStatus::MergeFrom(const HvCellBalancingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvCellBalancingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_balancing_status() != 0) {
    _internal_set_balancing_status(from._internal_balancing_status());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvCellBalancingStatus::CopyFrom(const HvCellBalancingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvCellBalancingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvCellBalancingStatus::IsInitialized() const {
  return true;
}

void HvCellBalancingStatus::InternalSwap(HvCellBalancingStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvCellBalancingStatus, timestamp_)
      + sizeof(HvCellBalancingStatus::timestamp_)
      - PROTOBUF_FIELD_OFFSET(HvCellBalancingStatus, balancing_status_)>(
          reinterpret_cast<char*>(&balancing_status_),
          reinterpret_cast<char*>(&other->balancing_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvCellBalancingStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[30]);
}

// ===================================================================

class InvLSetTorque::_Internal {
 public:
};

InvLSetTorque::InvLSetTorque(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.InvLSetTorque)
}
InvLSetTorque::InvLSetTorque(const InvLSetTorque& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&regid_, &from.regid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&regid_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.InvLSetTorque)
}

inline void InvLSetTorque::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&regid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&regid_)) + sizeof(timestamp_));
}

InvLSetTorque::~InvLSetTorque() {
  // @@protoc_insertion_point(destructor:primary.InvLSetTorque)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvLSetTorque::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InvLSetTorque::ArenaDtor(void* object) {
  InvLSetTorque* _this = reinterpret_cast< InvLSetTorque* >(object);
  (void)_this;
}
void InvLSetTorque::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvLSetTorque::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvLSetTorque::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.InvLSetTorque)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&regid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&regid_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvLSetTorque::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 regid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          regid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lsb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lsb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          msb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvLSetTorque::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.InvLSetTorque)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 regid = 1;
  if (this->_internal_regid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_regid(), target);
  }

  // uint32 lsb = 2;
  if (this->_internal_lsb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lsb(), target);
  }

  // uint32 msb = 3;
  if (this->_internal_msb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msb(), target);
  }

  // uint32 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.InvLSetTorque)
  return target;
}

size_t InvLSetTorque::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.InvLSetTorque)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 regid = 1;
  if (this->_internal_regid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_regid());
  }

  // uint32 lsb = 2;
  if (this->_internal_lsb() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lsb());
  }

  // uint32 msb = 3;
  if (this->_internal_msb() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msb());
  }

  // uint32 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvLSetTorque::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvLSetTorque::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvLSetTorque::GetClassData() const { return &_class_data_; }

void InvLSetTorque::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvLSetTorque *>(to)->MergeFrom(
      static_cast<const InvLSetTorque &>(from));
}


void InvLSetTorque::MergeFrom(const InvLSetTorque& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.InvLSetTorque)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_regid() != 0) {
    _internal_set_regid(from._internal_regid());
  }
  if (from._internal_lsb() != 0) {
    _internal_set_lsb(from._internal_lsb());
  }
  if (from._internal_msb() != 0) {
    _internal_set_msb(from._internal_msb());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvLSetTorque::CopyFrom(const InvLSetTorque& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.InvLSetTorque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvLSetTorque::IsInitialized() const {
  return true;
}

void InvLSetTorque::InternalSwap(InvLSetTorque* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvLSetTorque, timestamp_)
      + sizeof(InvLSetTorque::timestamp_)
      - PROTOBUF_FIELD_OFFSET(InvLSetTorque, regid_)>(
          reinterpret_cast<char*>(&regid_),
          reinterpret_cast<char*>(&other->regid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvLSetTorque::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[31]);
}

// ===================================================================

class InvLResponse::_Internal {
 public:
};

InvLResponse::InvLResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.InvLResponse)
}
InvLResponse::InvLResponse(const InvLResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reg_id_, &from.reg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&reg_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.InvLResponse)
}

inline void InvLResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reg_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&reg_id_)) + sizeof(timestamp_));
}

InvLResponse::~InvLResponse() {
  // @@protoc_insertion_point(destructor:primary.InvLResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvLResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InvLResponse::ArenaDtor(void* object) {
  InvLResponse* _this = reinterpret_cast< InvLResponse* >(object);
  (void)_this;
}
void InvLResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvLResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvLResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.InvLResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&reg_id_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvLResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 reg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          reg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reg_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          reg_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvLResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.InvLResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->_internal_reg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reg_id(), target);
  }

  // uint32 reg_val = 2;
  if (this->_internal_reg_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reg_val(), target);
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.InvLResponse)
  return target;
}

size_t InvLResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.InvLResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->_internal_reg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_reg_id());
  }

  // uint32 reg_val = 2;
  if (this->_internal_reg_val() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_reg_val());
  }

  // uint32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvLResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvLResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvLResponse::GetClassData() const { return &_class_data_; }

void InvLResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvLResponse *>(to)->MergeFrom(
      static_cast<const InvLResponse &>(from));
}


void InvLResponse::MergeFrom(const InvLResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.InvLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reg_id() != 0) {
    _internal_set_reg_id(from._internal_reg_id());
  }
  if (from._internal_reg_val() != 0) {
    _internal_set_reg_val(from._internal_reg_val());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvLResponse::CopyFrom(const InvLResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.InvLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvLResponse::IsInitialized() const {
  return true;
}

void InvLResponse::InternalSwap(InvLResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvLResponse, timestamp_)
      + sizeof(InvLResponse::timestamp_)
      - PROTOBUF_FIELD_OFFSET(InvLResponse, reg_id_)>(
          reinterpret_cast<char*>(&reg_id_),
          reinterpret_cast<char*>(&other->reg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvLResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[32]);
}

// ===================================================================

class PrimaryFenice::_Internal {
 public:
};

PrimaryFenice::PrimaryFenice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steer_version_(arena),
  das_version_(arena),
  hv_version_(arena),
  lv_version_(arena),
  tlm_version_(arena),
  timestamp_(arena),
  set_tlm_status_(arena),
  steer_system_status_(arena),
  marker_(arena),
  tlm_status_(arena),
  car_status_(arena),
  das_errors_(arena),
  speed_(arena),
  hv_voltage_(arena),
  hv_current_(arena),
  hv_temp_(arena),
  hv_errors_(arena),
  ts_status_(arena),
  set_ts_status_(arena),
  set_cell_balancing_status_(arena),
  handcart_status_(arena),
  steer_status_(arena),
  set_car_status_(arena),
  set_pedals_range_(arena),
  lv_current_(arena),
  lv_voltage_(arena),
  lv_temperature_(arena),
  cooling_status_(arena),
  hv_cells_voltage_(arena),
  hv_cells_temp_(arena),
  hv_cell_balancing_status_(arena),
  inv_l_set_torque_(arena),
  inv_l_response_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.PrimaryFenice)
}
PrimaryFenice::PrimaryFenice(const PrimaryFenice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      steer_version_(from.steer_version_),
      das_version_(from.das_version_),
      hv_version_(from.hv_version_),
      lv_version_(from.lv_version_),
      tlm_version_(from.tlm_version_),
      timestamp_(from.timestamp_),
      set_tlm_status_(from.set_tlm_status_),
      steer_system_status_(from.steer_system_status_),
      marker_(from.marker_),
      tlm_status_(from.tlm_status_),
      car_status_(from.car_status_),
      das_errors_(from.das_errors_),
      speed_(from.speed_),
      hv_voltage_(from.hv_voltage_),
      hv_current_(from.hv_current_),
      hv_temp_(from.hv_temp_),
      hv_errors_(from.hv_errors_),
      ts_status_(from.ts_status_),
      set_ts_status_(from.set_ts_status_),
      set_cell_balancing_status_(from.set_cell_balancing_status_),
      handcart_status_(from.handcart_status_),
      steer_status_(from.steer_status_),
      set_car_status_(from.set_car_status_),
      set_pedals_range_(from.set_pedals_range_),
      lv_current_(from.lv_current_),
      lv_voltage_(from.lv_voltage_),
      lv_temperature_(from.lv_temperature_),
      cooling_status_(from.cooling_status_),
      hv_cells_voltage_(from.hv_cells_voltage_),
      hv_cells_temp_(from.hv_cells_temp_),
      hv_cell_balancing_status_(from.hv_cell_balancing_status_),
      inv_l_set_torque_(from.inv_l_set_torque_),
      inv_l_response_(from.inv_l_response_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:primary.PrimaryFenice)
}

inline void PrimaryFenice::SharedCtor() {
}

PrimaryFenice::~PrimaryFenice() {
  // @@protoc_insertion_point(destructor:primary.PrimaryFenice)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrimaryFenice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrimaryFenice::ArenaDtor(void* object) {
  PrimaryFenice* _this = reinterpret_cast< PrimaryFenice* >(object);
  (void)_this;
}
void PrimaryFenice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrimaryFenice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrimaryFenice::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.PrimaryFenice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steer_version_.Clear();
  das_version_.Clear();
  hv_version_.Clear();
  lv_version_.Clear();
  tlm_version_.Clear();
  timestamp_.Clear();
  set_tlm_status_.Clear();
  steer_system_status_.Clear();
  marker_.Clear();
  tlm_status_.Clear();
  car_status_.Clear();
  das_errors_.Clear();
  speed_.Clear();
  hv_voltage_.Clear();
  hv_current_.Clear();
  hv_temp_.Clear();
  hv_errors_.Clear();
  ts_status_.Clear();
  set_ts_status_.Clear();
  set_cell_balancing_status_.Clear();
  handcart_status_.Clear();
  steer_status_.Clear();
  set_car_status_.Clear();
  set_pedals_range_.Clear();
  lv_current_.Clear();
  lv_voltage_.Clear();
  lv_temperature_.Clear();
  cooling_status_.Clear();
  hv_cells_voltage_.Clear();
  hv_cells_temp_.Clear();
  hv_cell_balancing_status_.Clear();
  inv_l_set_torque_.Clear();
  inv_l_response_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimaryFenice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .primary.SteerVersion steer_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steer_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.DasVersion das_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_das_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HvVersion hv_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hv_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.LvVersion lv_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lv_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.TlmVersion tlm_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlm_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.Timestamp timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timestamp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SetTlmStatus set_tlm_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_set_tlm_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SteerSystemStatus steer_system_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steer_system_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.Marker marker = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_marker(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.TlmStatus tlm_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlm_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.CarStatus car_status = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_car_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.DasErrors das_errors = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_das_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.Speed speed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HvVoltage hv_voltage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hv_voltage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HvCurrent hv_current = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hv_current(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HvTemp hv_temp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_temp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HvErrors hv_errors = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.TsStatus ts_status = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ts_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SetTsStatus set_ts_status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_ts_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SetCellBalancingStatus set_cell_balancing_status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_cell_balancing_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HandcartStatus handcart_status = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_handcart_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SteerStatus steer_status = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_steer_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SetCarStatus set_car_status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_car_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SetPedalsRange set_pedals_range = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_pedals_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.LvCurrent lv_current = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lv_current(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.LvVoltage lv_voltage = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lv_voltage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.LvTemperature lv_temperature = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lv_temperature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.CoolingStatus cooling_status = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_cooling_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HvCellsVoltage hv_cells_voltage = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_cells_voltage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HvCellsTemp hv_cells_temp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_cells_temp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HvCellBalancingStatus hv_cell_balancing_status = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_cell_balancing_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.InvLSetTorque inv_l_set_torque = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inv_l_set_torque(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.InvLResponse inv_l_response = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inv_l_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrimaryFenice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.PrimaryFenice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .primary.SteerVersion steer_version = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steer_version_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_steer_version(i), target, stream);
  }

  // repeated .primary.DasVersion das_version = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_das_version_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_das_version(i), target, stream);
  }

  // repeated .primary.HvVersion hv_version = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_version_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_hv_version(i), target, stream);
  }

  // repeated .primary.LvVersion lv_version = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lv_version_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_lv_version(i), target, stream);
  }

  // repeated .primary.TlmVersion tlm_version = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlm_version_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_tlm_version(i), target, stream);
  }

  // repeated .primary.Timestamp timestamp = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timestamp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_timestamp(i), target, stream);
  }

  // repeated .primary.SetTlmStatus set_tlm_status = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_tlm_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_set_tlm_status(i), target, stream);
  }

  // repeated .primary.SteerSystemStatus steer_system_status = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steer_system_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_steer_system_status(i), target, stream);
  }

  // repeated .primary.Marker marker = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_marker_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_marker(i), target, stream);
  }

  // repeated .primary.TlmStatus tlm_status = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlm_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_tlm_status(i), target, stream);
  }

  // repeated .primary.CarStatus car_status = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_car_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_car_status(i), target, stream);
  }

  // repeated .primary.DasErrors das_errors = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_das_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_das_errors(i), target, stream);
  }

  // repeated .primary.Speed speed = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_speed(i), target, stream);
  }

  // repeated .primary.HvVoltage hv_voltage = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_voltage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_hv_voltage(i), target, stream);
  }

  // repeated .primary.HvCurrent hv_current = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_current_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_hv_current(i), target, stream);
  }

  // repeated .primary.HvTemp hv_temp = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_temp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_hv_temp(i), target, stream);
  }

  // repeated .primary.HvErrors hv_errors = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_hv_errors(i), target, stream);
  }

  // repeated .primary.TsStatus ts_status = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ts_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_ts_status(i), target, stream);
  }

  // repeated .primary.SetTsStatus set_ts_status = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_ts_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_set_ts_status(i), target, stream);
  }

  // repeated .primary.SetCellBalancingStatus set_cell_balancing_status = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_cell_balancing_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_set_cell_balancing_status(i), target, stream);
  }

  // repeated .primary.HandcartStatus handcart_status = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_handcart_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_handcart_status(i), target, stream);
  }

  // repeated .primary.SteerStatus steer_status = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steer_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_steer_status(i), target, stream);
  }

  // repeated .primary.SetCarStatus set_car_status = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_car_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_set_car_status(i), target, stream);
  }

  // repeated .primary.SetPedalsRange set_pedals_range = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_pedals_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_set_pedals_range(i), target, stream);
  }

  // repeated .primary.LvCurrent lv_current = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lv_current_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_lv_current(i), target, stream);
  }

  // repeated .primary.LvVoltage lv_voltage = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lv_voltage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_lv_voltage(i), target, stream);
  }

  // repeated .primary.LvTemperature lv_temperature = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lv_temperature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_lv_temperature(i), target, stream);
  }

  // repeated .primary.CoolingStatus cooling_status = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cooling_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_cooling_status(i), target, stream);
  }

  // repeated .primary.HvCellsVoltage hv_cells_voltage = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_cells_voltage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_hv_cells_voltage(i), target, stream);
  }

  // repeated .primary.HvCellsTemp hv_cells_temp = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_cells_temp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_hv_cells_temp(i), target, stream);
  }

  // repeated .primary.HvCellBalancingStatus hv_cell_balancing_status = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_cell_balancing_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_hv_cell_balancing_status(i), target, stream);
  }

  // repeated .primary.InvLSetTorque inv_l_set_torque = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inv_l_set_torque_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_inv_l_set_torque(i), target, stream);
  }

  // repeated .primary.InvLResponse inv_l_response = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inv_l_response_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_inv_l_response(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.PrimaryFenice)
  return target;
}

size_t PrimaryFenice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.PrimaryFenice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .primary.SteerVersion steer_version = 1;
  total_size += 1UL * this->_internal_steer_version_size();
  for (const auto& msg : this->steer_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.DasVersion das_version = 2;
  total_size += 1UL * this->_internal_das_version_size();
  for (const auto& msg : this->das_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HvVersion hv_version = 3;
  total_size += 1UL * this->_internal_hv_version_size();
  for (const auto& msg : this->hv_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LvVersion lv_version = 4;
  total_size += 1UL * this->_internal_lv_version_size();
  for (const auto& msg : this->lv_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TlmVersion tlm_version = 5;
  total_size += 1UL * this->_internal_tlm_version_size();
  for (const auto& msg : this->tlm_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.Timestamp timestamp = 6;
  total_size += 1UL * this->_internal_timestamp_size();
  for (const auto& msg : this->timestamp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SetTlmStatus set_tlm_status = 7;
  total_size += 1UL * this->_internal_set_tlm_status_size();
  for (const auto& msg : this->set_tlm_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SteerSystemStatus steer_system_status = 8;
  total_size += 1UL * this->_internal_steer_system_status_size();
  for (const auto& msg : this->steer_system_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.Marker marker = 9;
  total_size += 1UL * this->_internal_marker_size();
  for (const auto& msg : this->marker_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TlmStatus tlm_status = 10;
  total_size += 1UL * this->_internal_tlm_status_size();
  for (const auto& msg : this->tlm_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.CarStatus car_status = 11;
  total_size += 1UL * this->_internal_car_status_size();
  for (const auto& msg : this->car_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.DasErrors das_errors = 12;
  total_size += 1UL * this->_internal_das_errors_size();
  for (const auto& msg : this->das_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.Speed speed = 13;
  total_size += 1UL * this->_internal_speed_size();
  for (const auto& msg : this->speed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HvVoltage hv_voltage = 14;
  total_size += 1UL * this->_internal_hv_voltage_size();
  for (const auto& msg : this->hv_voltage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HvCurrent hv_current = 15;
  total_size += 1UL * this->_internal_hv_current_size();
  for (const auto& msg : this->hv_current_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HvTemp hv_temp = 16;
  total_size += 2UL * this->_internal_hv_temp_size();
  for (const auto& msg : this->hv_temp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HvErrors hv_errors = 17;
  total_size += 2UL * this->_internal_hv_errors_size();
  for (const auto& msg : this->hv_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TsStatus ts_status = 18;
  total_size += 2UL * this->_internal_ts_status_size();
  for (const auto& msg : this->ts_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SetTsStatus set_ts_status = 19;
  total_size += 2UL * this->_internal_set_ts_status_size();
  for (const auto& msg : this->set_ts_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SetCellBalancingStatus set_cell_balancing_status = 20;
  total_size += 2UL * this->_internal_set_cell_balancing_status_size();
  for (const auto& msg : this->set_cell_balancing_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HandcartStatus handcart_status = 21;
  total_size += 2UL * this->_internal_handcart_status_size();
  for (const auto& msg : this->handcart_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SteerStatus steer_status = 22;
  total_size += 2UL * this->_internal_steer_status_size();
  for (const auto& msg : this->steer_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SetCarStatus set_car_status = 23;
  total_size += 2UL * this->_internal_set_car_status_size();
  for (const auto& msg : this->set_car_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SetPedalsRange set_pedals_range = 24;
  total_size += 2UL * this->_internal_set_pedals_range_size();
  for (const auto& msg : this->set_pedals_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LvCurrent lv_current = 25;
  total_size += 2UL * this->_internal_lv_current_size();
  for (const auto& msg : this->lv_current_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LvVoltage lv_voltage = 26;
  total_size += 2UL * this->_internal_lv_voltage_size();
  for (const auto& msg : this->lv_voltage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LvTemperature lv_temperature = 27;
  total_size += 2UL * this->_internal_lv_temperature_size();
  for (const auto& msg : this->lv_temperature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.CoolingStatus cooling_status = 28;
  total_size += 2UL * this->_internal_cooling_status_size();
  for (const auto& msg : this->cooling_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HvCellsVoltage hv_cells_voltage = 29;
  total_size += 2UL * this->_internal_hv_cells_voltage_size();
  for (const auto& msg : this->hv_cells_voltage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HvCellsTemp hv_cells_temp = 30;
  total_size += 2UL * this->_internal_hv_cells_temp_size();
  for (const auto& msg : this->hv_cells_temp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HvCellBalancingStatus hv_cell_balancing_status = 31;
  total_size += 2UL * this->_internal_hv_cell_balancing_status_size();
  for (const auto& msg : this->hv_cell_balancing_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.InvLSetTorque inv_l_set_torque = 32;
  total_size += 2UL * this->_internal_inv_l_set_torque_size();
  for (const auto& msg : this->inv_l_set_torque_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.InvLResponse inv_l_response = 33;
  total_size += 2UL * this->_internal_inv_l_response_size();
  for (const auto& msg : this->inv_l_response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrimaryFenice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrimaryFenice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrimaryFenice::GetClassData() const { return &_class_data_; }

void PrimaryFenice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PrimaryFenice *>(to)->MergeFrom(
      static_cast<const PrimaryFenice &>(from));
}


void PrimaryFenice::MergeFrom(const PrimaryFenice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.PrimaryFenice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steer_version_.MergeFrom(from.steer_version_);
  das_version_.MergeFrom(from.das_version_);
  hv_version_.MergeFrom(from.hv_version_);
  lv_version_.MergeFrom(from.lv_version_);
  tlm_version_.MergeFrom(from.tlm_version_);
  timestamp_.MergeFrom(from.timestamp_);
  set_tlm_status_.MergeFrom(from.set_tlm_status_);
  steer_system_status_.MergeFrom(from.steer_system_status_);
  marker_.MergeFrom(from.marker_);
  tlm_status_.MergeFrom(from.tlm_status_);
  car_status_.MergeFrom(from.car_status_);
  das_errors_.MergeFrom(from.das_errors_);
  speed_.MergeFrom(from.speed_);
  hv_voltage_.MergeFrom(from.hv_voltage_);
  hv_current_.MergeFrom(from.hv_current_);
  hv_temp_.MergeFrom(from.hv_temp_);
  hv_errors_.MergeFrom(from.hv_errors_);
  ts_status_.MergeFrom(from.ts_status_);
  set_ts_status_.MergeFrom(from.set_ts_status_);
  set_cell_balancing_status_.MergeFrom(from.set_cell_balancing_status_);
  handcart_status_.MergeFrom(from.handcart_status_);
  steer_status_.MergeFrom(from.steer_status_);
  set_car_status_.MergeFrom(from.set_car_status_);
  set_pedals_range_.MergeFrom(from.set_pedals_range_);
  lv_current_.MergeFrom(from.lv_current_);
  lv_voltage_.MergeFrom(from.lv_voltage_);
  lv_temperature_.MergeFrom(from.lv_temperature_);
  cooling_status_.MergeFrom(from.cooling_status_);
  hv_cells_voltage_.MergeFrom(from.hv_cells_voltage_);
  hv_cells_temp_.MergeFrom(from.hv_cells_temp_);
  hv_cell_balancing_status_.MergeFrom(from.hv_cell_balancing_status_);
  inv_l_set_torque_.MergeFrom(from.inv_l_set_torque_);
  inv_l_response_.MergeFrom(from.inv_l_response_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrimaryFenice::CopyFrom(const PrimaryFenice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.PrimaryFenice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimaryFenice::IsInitialized() const {
  return true;
}

void PrimaryFenice::InternalSwap(PrimaryFenice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  steer_version_.InternalSwap(&other->steer_version_);
  das_version_.InternalSwap(&other->das_version_);
  hv_version_.InternalSwap(&other->hv_version_);
  lv_version_.InternalSwap(&other->lv_version_);
  tlm_version_.InternalSwap(&other->tlm_version_);
  timestamp_.InternalSwap(&other->timestamp_);
  set_tlm_status_.InternalSwap(&other->set_tlm_status_);
  steer_system_status_.InternalSwap(&other->steer_system_status_);
  marker_.InternalSwap(&other->marker_);
  tlm_status_.InternalSwap(&other->tlm_status_);
  car_status_.InternalSwap(&other->car_status_);
  das_errors_.InternalSwap(&other->das_errors_);
  speed_.InternalSwap(&other->speed_);
  hv_voltage_.InternalSwap(&other->hv_voltage_);
  hv_current_.InternalSwap(&other->hv_current_);
  hv_temp_.InternalSwap(&other->hv_temp_);
  hv_errors_.InternalSwap(&other->hv_errors_);
  ts_status_.InternalSwap(&other->ts_status_);
  set_ts_status_.InternalSwap(&other->set_ts_status_);
  set_cell_balancing_status_.InternalSwap(&other->set_cell_balancing_status_);
  handcart_status_.InternalSwap(&other->handcart_status_);
  steer_status_.InternalSwap(&other->steer_status_);
  set_car_status_.InternalSwap(&other->set_car_status_);
  set_pedals_range_.InternalSwap(&other->set_pedals_range_);
  lv_current_.InternalSwap(&other->lv_current_);
  lv_voltage_.InternalSwap(&other->lv_voltage_);
  lv_temperature_.InternalSwap(&other->lv_temperature_);
  cooling_status_.InternalSwap(&other->cooling_status_);
  hv_cells_voltage_.InternalSwap(&other->hv_cells_voltage_);
  hv_cells_temp_.InternalSwap(&other->hv_cells_temp_);
  hv_cell_balancing_status_.InternalSwap(&other->hv_cell_balancing_status_);
  inv_l_set_torque_.InternalSwap(&other->inv_l_set_torque_);
  inv_l_response_.InternalSwap(&other->inv_l_response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimaryFenice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[33]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace primary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::primary::SteerVersion* Arena::CreateMaybeMessage< ::primary::SteerVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SteerVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::DasVersion* Arena::CreateMaybeMessage< ::primary::DasVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::DasVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvVersion* Arena::CreateMaybeMessage< ::primary::HvVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LvVersion* Arena::CreateMaybeMessage< ::primary::LvVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LvVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TlmVersion* Arena::CreateMaybeMessage< ::primary::TlmVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TlmVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::Timestamp* Arena::CreateMaybeMessage< ::primary::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SetTlmStatus* Arena::CreateMaybeMessage< ::primary::SetTlmStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SetTlmStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SteerSystemStatus* Arena::CreateMaybeMessage< ::primary::SteerSystemStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SteerSystemStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::Marker* Arena::CreateMaybeMessage< ::primary::Marker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::Marker >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TlmStatus* Arena::CreateMaybeMessage< ::primary::TlmStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TlmStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::CarStatus* Arena::CreateMaybeMessage< ::primary::CarStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::CarStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::DasErrors* Arena::CreateMaybeMessage< ::primary::DasErrors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::DasErrors >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::Speed* Arena::CreateMaybeMessage< ::primary::Speed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::Speed >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvVoltage* Arena::CreateMaybeMessage< ::primary::HvVoltage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvVoltage >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvCurrent* Arena::CreateMaybeMessage< ::primary::HvCurrent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvCurrent >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvTemp* Arena::CreateMaybeMessage< ::primary::HvTemp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvTemp >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvErrors* Arena::CreateMaybeMessage< ::primary::HvErrors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvErrors >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TsStatus* Arena::CreateMaybeMessage< ::primary::TsStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TsStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SetTsStatus* Arena::CreateMaybeMessage< ::primary::SetTsStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SetTsStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SetCellBalancingStatus* Arena::CreateMaybeMessage< ::primary::SetCellBalancingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SetCellBalancingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HandcartStatus* Arena::CreateMaybeMessage< ::primary::HandcartStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HandcartStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SteerStatus* Arena::CreateMaybeMessage< ::primary::SteerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SteerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SetCarStatus* Arena::CreateMaybeMessage< ::primary::SetCarStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SetCarStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SetPedalsRange* Arena::CreateMaybeMessage< ::primary::SetPedalsRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SetPedalsRange >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LvCurrent* Arena::CreateMaybeMessage< ::primary::LvCurrent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LvCurrent >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LvVoltage* Arena::CreateMaybeMessage< ::primary::LvVoltage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LvVoltage >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LvTemperature* Arena::CreateMaybeMessage< ::primary::LvTemperature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LvTemperature >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::CoolingStatus* Arena::CreateMaybeMessage< ::primary::CoolingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::CoolingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvCellsVoltage* Arena::CreateMaybeMessage< ::primary::HvCellsVoltage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvCellsVoltage >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvCellsTemp* Arena::CreateMaybeMessage< ::primary::HvCellsTemp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvCellsTemp >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvCellBalancingStatus* Arena::CreateMaybeMessage< ::primary::HvCellBalancingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvCellBalancingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::InvLSetTorque* Arena::CreateMaybeMessage< ::primary::InvLSetTorque >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::InvLSetTorque >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::InvLResponse* Arena::CreateMaybeMessage< ::primary::InvLResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::InvLResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::PrimaryFenice* Arena::CreateMaybeMessage< ::primary::PrimaryFenice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::PrimaryFenice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
