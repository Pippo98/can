// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primary.proto

#include "primary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace primary {
PROTOBUF_CONSTEXPR STEER_VERSION::STEER_VERSION(
    ::_pbi::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct STEER_VERSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR STEER_VERSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~STEER_VERSIONDefaultTypeInternal() {}
  union {
    STEER_VERSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 STEER_VERSIONDefaultTypeInternal _STEER_VERSION_default_instance_;
PROTOBUF_CONSTEXPR DAS_VERSION::DAS_VERSION(
    ::_pbi::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct DAS_VERSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DAS_VERSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DAS_VERSIONDefaultTypeInternal() {}
  union {
    DAS_VERSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DAS_VERSIONDefaultTypeInternal _DAS_VERSION_default_instance_;
PROTOBUF_CONSTEXPR HV_VERSION::HV_VERSION(
    ::_pbi::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct HV_VERSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HV_VERSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HV_VERSIONDefaultTypeInternal() {}
  union {
    HV_VERSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HV_VERSIONDefaultTypeInternal _HV_VERSION_default_instance_;
PROTOBUF_CONSTEXPR LV_VERSION::LV_VERSION(
    ::_pbi::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct LV_VERSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LV_VERSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LV_VERSIONDefaultTypeInternal() {}
  union {
    LV_VERSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LV_VERSIONDefaultTypeInternal _LV_VERSION_default_instance_;
PROTOBUF_CONSTEXPR TLM_VERSION::TLM_VERSION(
    ::_pbi::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct TLM_VERSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TLM_VERSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TLM_VERSIONDefaultTypeInternal() {}
  union {
    TLM_VERSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TLM_VERSIONDefaultTypeInternal _TLM_VERSION_default_instance_;
PROTOBUF_CONSTEXPR TIMESTAMP::TIMESTAMP(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , timestamp_(0u){}
struct TIMESTAMPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TIMESTAMPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TIMESTAMPDefaultTypeInternal() {}
  union {
    TIMESTAMP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TIMESTAMPDefaultTypeInternal _TIMESTAMP_default_instance_;
PROTOBUF_CONSTEXPR SET_TLM_STATUS::SET_TLM_STATUS(
    ::_pbi::ConstantInitialized)
  : driver_(0u)
  , circuit_(0u)
  , race_type_(0)

  , tlm_status_(0)

  , _inner_timestamp_(uint64_t{0u}){}
struct SET_TLM_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SET_TLM_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SET_TLM_STATUSDefaultTypeInternal() {}
  union {
    SET_TLM_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SET_TLM_STATUSDefaultTypeInternal _SET_TLM_STATUS_default_instance_;
PROTOBUF_CONSTEXPR TLM_STATUS::TLM_STATUS(
    ::_pbi::ConstantInitialized)
  : driver_(0u)
  , circuit_(0u)
  , race_type_(0)

  , tlm_status_(0)

  , _inner_timestamp_(uint64_t{0u}){}
struct TLM_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TLM_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TLM_STATUSDefaultTypeInternal() {}
  union {
    TLM_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TLM_STATUSDefaultTypeInternal _TLM_STATUS_default_instance_;
PROTOBUF_CONSTEXPR STEER_SYSTEM_STATUS::STEER_SYSTEM_STATUS(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , soc_temp_(0u){}
struct STEER_SYSTEM_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR STEER_SYSTEM_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~STEER_SYSTEM_STATUSDefaultTypeInternal() {}
  union {
    STEER_SYSTEM_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 STEER_SYSTEM_STATUSDefaultTypeInternal _STEER_SYSTEM_STATUS_default_instance_;
PROTOBUF_CONSTEXPR HV_VOLTAGE::HV_VOLTAGE(
    ::_pbi::ConstantInitialized)
  : pack_voltage_(0u)
  , bus_voltage_(0u)
  , max_cell_voltage_(0u)
  , min_cell_voltage_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct HV_VOLTAGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HV_VOLTAGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HV_VOLTAGEDefaultTypeInternal() {}
  union {
    HV_VOLTAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HV_VOLTAGEDefaultTypeInternal _HV_VOLTAGE_default_instance_;
PROTOBUF_CONSTEXPR HV_CURRENT::HV_CURRENT(
    ::_pbi::ConstantInitialized)
  : current_(0u)
  , power_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct HV_CURRENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HV_CURRENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HV_CURRENTDefaultTypeInternal() {}
  union {
    HV_CURRENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HV_CURRENTDefaultTypeInternal _HV_CURRENT_default_instance_;
PROTOBUF_CONSTEXPR HV_TEMP::HV_TEMP(
    ::_pbi::ConstantInitialized)
  : average_temp_(0u)
  , max_temp_(0u)
  , _inner_timestamp_(uint64_t{0u})
  , min_temp_(0u){}
struct HV_TEMPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HV_TEMPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HV_TEMPDefaultTypeInternal() {}
  union {
    HV_TEMP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HV_TEMPDefaultTypeInternal _HV_TEMP_default_instance_;
PROTOBUF_CONSTEXPR HV_ERRORS::HV_ERRORS(
    ::_pbi::ConstantInitialized)
  : warnings_(0u)
  , errors_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct HV_ERRORSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HV_ERRORSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HV_ERRORSDefaultTypeInternal() {}
  union {
    HV_ERRORS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HV_ERRORSDefaultTypeInternal _HV_ERRORS_default_instance_;
PROTOBUF_CONSTEXPR TS_STATUS::TS_STATUS(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , ts_status_(0)
{}
struct TS_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TS_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TS_STATUSDefaultTypeInternal() {}
  union {
    TS_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TS_STATUSDefaultTypeInternal _TS_STATUS_default_instance_;
PROTOBUF_CONSTEXPR SET_TS_STATUS_DAS::SET_TS_STATUS_DAS(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , ts_status_set_(0)
{}
struct SET_TS_STATUS_DASDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SET_TS_STATUS_DASDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SET_TS_STATUS_DASDefaultTypeInternal() {}
  union {
    SET_TS_STATUS_DAS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SET_TS_STATUS_DASDefaultTypeInternal _SET_TS_STATUS_DAS_default_instance_;
PROTOBUF_CONSTEXPR SET_TS_STATUS_HANDCART::SET_TS_STATUS_HANDCART(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , ts_status_set_(0)
{}
struct SET_TS_STATUS_HANDCARTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SET_TS_STATUS_HANDCARTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SET_TS_STATUS_HANDCARTDefaultTypeInternal() {}
  union {
    SET_TS_STATUS_HANDCART _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SET_TS_STATUS_HANDCARTDefaultTypeInternal _SET_TS_STATUS_HANDCART_default_instance_;
PROTOBUF_CONSTEXPR STEER_STATUS::STEER_STATUS(
    ::_pbi::ConstantInitialized)
  : map_(0)

  , traction_control_(0)

  , _inner_timestamp_(uint64_t{0u}){}
struct STEER_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR STEER_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~STEER_STATUSDefaultTypeInternal() {}
  union {
    STEER_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 STEER_STATUSDefaultTypeInternal _STEER_STATUS_default_instance_;
PROTOBUF_CONSTEXPR SET_CAR_STATUS::SET_CAR_STATUS(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , car_status_set_(0)
{}
struct SET_CAR_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SET_CAR_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SET_CAR_STATUSDefaultTypeInternal() {}
  union {
    SET_CAR_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SET_CAR_STATUSDefaultTypeInternal _SET_CAR_STATUS_default_instance_;
PROTOBUF_CONSTEXPR SET_PEDALS_RANGE::SET_PEDALS_RANGE(
    ::_pbi::ConstantInitialized)
  : bound_(0)

  , pedal_(0)

  , _inner_timestamp_(uint64_t{0u}){}
struct SET_PEDALS_RANGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SET_PEDALS_RANGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SET_PEDALS_RANGEDefaultTypeInternal() {}
  union {
    SET_PEDALS_RANGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SET_PEDALS_RANGEDefaultTypeInternal _SET_PEDALS_RANGE_default_instance_;
PROTOBUF_CONSTEXPR SET_STEERING_ANGLE_RANGE::SET_STEERING_ANGLE_RANGE(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , bound_(0)
{}
struct SET_STEERING_ANGLE_RANGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SET_STEERING_ANGLE_RANGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SET_STEERING_ANGLE_RANGEDefaultTypeInternal() {}
  union {
    SET_STEERING_ANGLE_RANGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SET_STEERING_ANGLE_RANGEDefaultTypeInternal _SET_STEERING_ANGLE_RANGE_default_instance_;
PROTOBUF_CONSTEXPR CAR_STATUS::CAR_STATUS(
    ::_pbi::ConstantInitialized)
  : inverter_l_(0)

  , inverter_r_(0)

  , _inner_timestamp_(uint64_t{0u})
  , car_status_(0)
{}
struct CAR_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CAR_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CAR_STATUSDefaultTypeInternal() {}
  union {
    CAR_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CAR_STATUSDefaultTypeInternal _CAR_STATUS_default_instance_;
PROTOBUF_CONSTEXPR DAS_ERRORS::DAS_ERRORS(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , das_error_(0u){}
struct DAS_ERRORSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DAS_ERRORSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DAS_ERRORSDefaultTypeInternal() {}
  union {
    DAS_ERRORS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DAS_ERRORSDefaultTypeInternal _DAS_ERRORS_default_instance_;
PROTOBUF_CONSTEXPR LV_CURRENT::LV_CURRENT(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , current_(0u){}
struct LV_CURRENTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LV_CURRENTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LV_CURRENTDefaultTypeInternal() {}
  union {
    LV_CURRENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LV_CURRENTDefaultTypeInternal _LV_CURRENT_default_instance_;
PROTOBUF_CONSTEXPR LV_VOLTAGE::LV_VOLTAGE(
    ::_pbi::ConstantInitialized)
  : voltage_1_(0u)
  , voltage_2_(0u)
  , voltage_3_(0u)
  , voltage_4_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct LV_VOLTAGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LV_VOLTAGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LV_VOLTAGEDefaultTypeInternal() {}
  union {
    LV_VOLTAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LV_VOLTAGEDefaultTypeInternal _LV_VOLTAGE_default_instance_;
PROTOBUF_CONSTEXPR LV_TOTAL_VOLTAGE::LV_TOTAL_VOLTAGE(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , total_voltage_(0u){}
struct LV_TOTAL_VOLTAGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LV_TOTAL_VOLTAGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LV_TOTAL_VOLTAGEDefaultTypeInternal() {}
  union {
    LV_TOTAL_VOLTAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LV_TOTAL_VOLTAGEDefaultTypeInternal _LV_TOTAL_VOLTAGE_default_instance_;
PROTOBUF_CONSTEXPR LV_TEMPERATURE::LV_TEMPERATURE(
    ::_pbi::ConstantInitialized)
  : bp_temperature_1_(0u)
  , bp_temperature_2_(0u)
  , dcdc12_temperature_(0u)
  , dcdc24_temperature_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct LV_TEMPERATUREDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LV_TEMPERATUREDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LV_TEMPERATUREDefaultTypeInternal() {}
  union {
    LV_TEMPERATURE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LV_TEMPERATUREDefaultTypeInternal _LV_TEMPERATURE_default_instance_;
PROTOBUF_CONSTEXPR COOLING_STATUS::COOLING_STATUS(
    ::_pbi::ConstantInitialized)
  : hv_fan_speed_(0u)
  , lv_fan_speed_(0u)
  , _inner_timestamp_(uint64_t{0u})
  , pump_speed_(0u){}
struct COOLING_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR COOLING_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~COOLING_STATUSDefaultTypeInternal() {}
  union {
    COOLING_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 COOLING_STATUSDefaultTypeInternal _COOLING_STATUS_default_instance_;
PROTOBUF_CONSTEXPR SET_RADIATOR_SPEED::SET_RADIATOR_SPEED(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , car_radiators_speed_(0)
{}
struct SET_RADIATOR_SPEEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SET_RADIATOR_SPEEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SET_RADIATOR_SPEEDDefaultTypeInternal() {}
  union {
    SET_RADIATOR_SPEED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SET_RADIATOR_SPEEDDefaultTypeInternal _SET_RADIATOR_SPEED_default_instance_;
PROTOBUF_CONSTEXPR SET_PUMPS_POWER::SET_PUMPS_POWER(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , car_pumps_power_(0)
{}
struct SET_PUMPS_POWERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SET_PUMPS_POWERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SET_PUMPS_POWERDefaultTypeInternal() {}
  union {
    SET_PUMPS_POWER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SET_PUMPS_POWERDefaultTypeInternal _SET_PUMPS_POWER_default_instance_;
PROTOBUF_CONSTEXPR MARKER::MARKER(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u}){}
struct MARKERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MARKERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MARKERDefaultTypeInternal() {}
  union {
    MARKER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MARKERDefaultTypeInternal _MARKER_default_instance_;
PROTOBUF_CONSTEXPR HV_CELLS_VOLTAGE::HV_CELLS_VOLTAGE(
    ::_pbi::ConstantInitialized)
  : voltage_0_(0u)
  , voltage_1_(0u)
  , voltage_2_(0u)
  , start_index_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct HV_CELLS_VOLTAGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HV_CELLS_VOLTAGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HV_CELLS_VOLTAGEDefaultTypeInternal() {}
  union {
    HV_CELLS_VOLTAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HV_CELLS_VOLTAGEDefaultTypeInternal _HV_CELLS_VOLTAGE_default_instance_;
PROTOBUF_CONSTEXPR HV_CELLS_TEMP::HV_CELLS_TEMP(
    ::_pbi::ConstantInitialized)
  : start_index_(0u)
  , temp_0_(0u)
  , temp_1_(0u)
  , temp_2_(0u)
  , temp_3_(0u)
  , temp_4_(0u)
  , temp_5_(0u)
  , temp_6_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct HV_CELLS_TEMPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HV_CELLS_TEMPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HV_CELLS_TEMPDefaultTypeInternal() {}
  union {
    HV_CELLS_TEMP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HV_CELLS_TEMPDefaultTypeInternal _HV_CELLS_TEMP_default_instance_;
PROTOBUF_CONSTEXPR HV_CELL_BALANCING_STATUS::HV_CELL_BALANCING_STATUS(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , balancing_status_(0)
{}
struct HV_CELL_BALANCING_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HV_CELL_BALANCING_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HV_CELL_BALANCING_STATUSDefaultTypeInternal() {}
  union {
    HV_CELL_BALANCING_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HV_CELL_BALANCING_STATUSDefaultTypeInternal _HV_CELL_BALANCING_STATUS_default_instance_;
PROTOBUF_CONSTEXPR SET_CELL_BALANCING_STATUS::SET_CELL_BALANCING_STATUS(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , set_balancing_status_(0)
{}
struct SET_CELL_BALANCING_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SET_CELL_BALANCING_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SET_CELL_BALANCING_STATUSDefaultTypeInternal() {}
  union {
    SET_CELL_BALANCING_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SET_CELL_BALANCING_STATUSDefaultTypeInternal _SET_CELL_BALANCING_STATUS_default_instance_;
PROTOBUF_CONSTEXPR HANDCART_STATUS::HANDCART_STATUS(
    ::_pbi::ConstantInitialized)
  : _inner_timestamp_(uint64_t{0u})
  , connected_(false){}
struct HANDCART_STATUSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HANDCART_STATUSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HANDCART_STATUSDefaultTypeInternal() {}
  union {
    HANDCART_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HANDCART_STATUSDefaultTypeInternal _HANDCART_STATUS_default_instance_;
PROTOBUF_CONSTEXPR SPEED::SPEED(
    ::_pbi::ConstantInitialized)
  : encoder_r_(0u)
  , encoder_l_(0u)
  , inverter_r_(0u)
  , inverter_l_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct SPEEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SPEEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SPEEDDefaultTypeInternal() {}
  union {
    SPEED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SPEEDDefaultTypeInternal _SPEED_default_instance_;
PROTOBUF_CONSTEXPR INV_L_SET_TORQUE::INV_L_SET_TORQUE(
    ::_pbi::ConstantInitialized)
  : reg_id_(0u)
  , lsb_(0u)
  , _inner_timestamp_(uint64_t{0u})
  , msb_(0u){}
struct INV_L_SET_TORQUEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR INV_L_SET_TORQUEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~INV_L_SET_TORQUEDefaultTypeInternal() {}
  union {
    INV_L_SET_TORQUE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 INV_L_SET_TORQUEDefaultTypeInternal _INV_L_SET_TORQUE_default_instance_;
PROTOBUF_CONSTEXPR INV_L_RESPONSE::INV_L_RESPONSE(
    ::_pbi::ConstantInitialized)
  : reg_id_(0u)
  , data_0_(0u)
  , data_1_(0u)
  , data_2_(0u)
  , data_3_(0u)
  , data_4_(0u)
  , data_5_(0u)
  , data_6_(0u)
  , _inner_timestamp_(uint64_t{0u}){}
struct INV_L_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR INV_L_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~INV_L_RESPONSEDefaultTypeInternal() {}
  union {
    INV_L_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 INV_L_RESPONSEDefaultTypeInternal _INV_L_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR Pack::Pack(
    ::_pbi::ConstantInitialized)
  : steer_version_()
  , das_version_()
  , hv_version_()
  , lv_version_()
  , tlm_version_()
  , timestamp_()
  , set_tlm_status_()
  , tlm_status_()
  , steer_system_status_()
  , hv_voltage_()
  , hv_current_()
  , hv_temp_()
  , hv_errors_()
  , ts_status_()
  , set_ts_status_das_()
  , set_ts_status_handcart_()
  , steer_status_()
  , set_car_status_()
  , set_pedals_range_()
  , set_steering_angle_range_()
  , car_status_()
  , das_errors_()
  , lv_current_()
  , lv_voltage_()
  , lv_total_voltage_()
  , lv_temperature_()
  , cooling_status_()
  , set_radiator_speed_()
  , set_pumps_power_()
  , marker_()
  , hv_cells_voltage_()
  , hv_cells_temp_()
  , hv_cell_balancing_status_()
  , set_cell_balancing_status_()
  , handcart_status_()
  , speed_()
  , inv_l_set_torque_()
  , inv_l_response_(){}
struct PackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackDefaultTypeInternal() {}
  union {
    Pack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackDefaultTypeInternal _Pack_default_instance_;
}  // namespace primary
static ::_pb::Metadata file_level_metadata_primary_2eproto[39];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_primary_2eproto[11];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_primary_2eproto = nullptr;

const uint32_t TableStruct_primary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_VERSION, cancicd_version_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_VERSION, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::DAS_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::DAS_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::DAS_VERSION, cancicd_version_),
  PROTOBUF_FIELD_OFFSET(::primary::DAS_VERSION, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VERSION, cancicd_version_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VERSION, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LV_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VERSION, cancicd_version_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VERSION, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TLM_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TLM_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_VERSION, cancicd_version_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_VERSION, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TIMESTAMP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TIMESTAMP, timestamp_),
  PROTOBUF_FIELD_OFFSET(::primary::TIMESTAMP, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, driver_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, circuit_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, race_type_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, driver_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, circuit_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, race_type_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_SYSTEM_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_SYSTEM_STATUS, soc_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_SYSTEM_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, pack_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, bus_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, max_cell_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, min_cell_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, current_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, power_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, average_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, max_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, min_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_ERRORS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_ERRORS, warnings_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_ERRORS, errors_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_ERRORS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS, ts_status_),
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS_DAS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS_DAS, ts_status_set_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS_DAS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS_HANDCART, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS_HANDCART, ts_status_set_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS_HANDCART, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_STATUS, map_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_STATUS, traction_control_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_CAR_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_CAR_STATUS, car_status_set_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_CAR_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_PEDALS_RANGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_PEDALS_RANGE, bound_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_PEDALS_RANGE, pedal_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_PEDALS_RANGE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_STEERING_ANGLE_RANGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_STEERING_ANGLE_RANGE, bound_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_STEERING_ANGLE_RANGE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, inverter_l_),
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, inverter_r_),
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, car_status_),
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::DAS_ERRORS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::DAS_ERRORS, das_error_),
  PROTOBUF_FIELD_OFFSET(::primary::DAS_ERRORS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_CURRENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LV_CURRENT, current_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_CURRENT, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, voltage_1_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, voltage_2_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, voltage_3_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, voltage_4_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_TOTAL_VOLTAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LV_TOTAL_VOLTAGE, total_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_TOTAL_VOLTAGE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, bp_temperature_1_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, bp_temperature_2_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, dcdc12_temperature_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, dcdc24_temperature_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, hv_fan_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, lv_fan_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, pump_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_RADIATOR_SPEED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_RADIATOR_SPEED, car_radiators_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_RADIATOR_SPEED, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_PUMPS_POWER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_PUMPS_POWER, car_pumps_power_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_PUMPS_POWER, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::MARKER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::MARKER, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, voltage_0_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, voltage_1_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, voltage_2_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, start_index_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, start_index_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_0_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_1_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_2_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_3_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_4_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_5_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_6_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELL_BALANCING_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELL_BALANCING_STATUS, balancing_status_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELL_BALANCING_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_CELL_BALANCING_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_CELL_BALANCING_STATUS, set_balancing_status_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_CELL_BALANCING_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HANDCART_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HANDCART_STATUS, connected_),
  PROTOBUF_FIELD_OFFSET(::primary::HANDCART_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, encoder_r_),
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, encoder_l_),
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, inverter_r_),
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, inverter_l_),
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_SET_TORQUE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_SET_TORQUE, reg_id_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_SET_TORQUE, lsb_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_SET_TORQUE, msb_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_SET_TORQUE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, reg_id_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_0_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_1_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_2_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_3_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_4_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_5_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_6_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::Pack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::Pack, steer_version_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, das_version_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_version_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, lv_version_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, tlm_version_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, timestamp_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, steer_system_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_current_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_errors_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, ts_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_ts_status_das_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_ts_status_handcart_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, steer_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_car_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_pedals_range_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_steering_angle_range_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, car_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, das_errors_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, lv_current_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, lv_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, lv_total_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, lv_temperature_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, cooling_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_radiator_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_pumps_power_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, marker_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_cells_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_cells_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_cell_balancing_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_cell_balancing_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, handcart_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, speed_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, inv_l_set_torque_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, inv_l_response_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::primary::STEER_VERSION)},
  { 9, -1, -1, sizeof(::primary::DAS_VERSION)},
  { 18, -1, -1, sizeof(::primary::HV_VERSION)},
  { 27, -1, -1, sizeof(::primary::LV_VERSION)},
  { 36, -1, -1, sizeof(::primary::TLM_VERSION)},
  { 45, -1, -1, sizeof(::primary::TIMESTAMP)},
  { 53, -1, -1, sizeof(::primary::SET_TLM_STATUS)},
  { 64, -1, -1, sizeof(::primary::TLM_STATUS)},
  { 75, -1, -1, sizeof(::primary::STEER_SYSTEM_STATUS)},
  { 83, -1, -1, sizeof(::primary::HV_VOLTAGE)},
  { 94, -1, -1, sizeof(::primary::HV_CURRENT)},
  { 103, -1, -1, sizeof(::primary::HV_TEMP)},
  { 113, -1, -1, sizeof(::primary::HV_ERRORS)},
  { 122, -1, -1, sizeof(::primary::TS_STATUS)},
  { 130, -1, -1, sizeof(::primary::SET_TS_STATUS_DAS)},
  { 138, -1, -1, sizeof(::primary::SET_TS_STATUS_HANDCART)},
  { 146, -1, -1, sizeof(::primary::STEER_STATUS)},
  { 155, -1, -1, sizeof(::primary::SET_CAR_STATUS)},
  { 163, -1, -1, sizeof(::primary::SET_PEDALS_RANGE)},
  { 172, -1, -1, sizeof(::primary::SET_STEERING_ANGLE_RANGE)},
  { 180, -1, -1, sizeof(::primary::CAR_STATUS)},
  { 190, -1, -1, sizeof(::primary::DAS_ERRORS)},
  { 198, -1, -1, sizeof(::primary::LV_CURRENT)},
  { 206, -1, -1, sizeof(::primary::LV_VOLTAGE)},
  { 217, -1, -1, sizeof(::primary::LV_TOTAL_VOLTAGE)},
  { 225, -1, -1, sizeof(::primary::LV_TEMPERATURE)},
  { 236, -1, -1, sizeof(::primary::COOLING_STATUS)},
  { 246, -1, -1, sizeof(::primary::SET_RADIATOR_SPEED)},
  { 254, -1, -1, sizeof(::primary::SET_PUMPS_POWER)},
  { 262, -1, -1, sizeof(::primary::MARKER)},
  { 269, -1, -1, sizeof(::primary::HV_CELLS_VOLTAGE)},
  { 280, -1, -1, sizeof(::primary::HV_CELLS_TEMP)},
  { 295, -1, -1, sizeof(::primary::HV_CELL_BALANCING_STATUS)},
  { 303, -1, -1, sizeof(::primary::SET_CELL_BALANCING_STATUS)},
  { 311, -1, -1, sizeof(::primary::HANDCART_STATUS)},
  { 319, -1, -1, sizeof(::primary::SPEED)},
  { 330, -1, -1, sizeof(::primary::INV_L_SET_TORQUE)},
  { 340, -1, -1, sizeof(::primary::INV_L_RESPONSE)},
  { 355, -1, -1, sizeof(::primary::Pack)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::primary::_STEER_VERSION_default_instance_._instance,
  &::primary::_DAS_VERSION_default_instance_._instance,
  &::primary::_HV_VERSION_default_instance_._instance,
  &::primary::_LV_VERSION_default_instance_._instance,
  &::primary::_TLM_VERSION_default_instance_._instance,
  &::primary::_TIMESTAMP_default_instance_._instance,
  &::primary::_SET_TLM_STATUS_default_instance_._instance,
  &::primary::_TLM_STATUS_default_instance_._instance,
  &::primary::_STEER_SYSTEM_STATUS_default_instance_._instance,
  &::primary::_HV_VOLTAGE_default_instance_._instance,
  &::primary::_HV_CURRENT_default_instance_._instance,
  &::primary::_HV_TEMP_default_instance_._instance,
  &::primary::_HV_ERRORS_default_instance_._instance,
  &::primary::_TS_STATUS_default_instance_._instance,
  &::primary::_SET_TS_STATUS_DAS_default_instance_._instance,
  &::primary::_SET_TS_STATUS_HANDCART_default_instance_._instance,
  &::primary::_STEER_STATUS_default_instance_._instance,
  &::primary::_SET_CAR_STATUS_default_instance_._instance,
  &::primary::_SET_PEDALS_RANGE_default_instance_._instance,
  &::primary::_SET_STEERING_ANGLE_RANGE_default_instance_._instance,
  &::primary::_CAR_STATUS_default_instance_._instance,
  &::primary::_DAS_ERRORS_default_instance_._instance,
  &::primary::_LV_CURRENT_default_instance_._instance,
  &::primary::_LV_VOLTAGE_default_instance_._instance,
  &::primary::_LV_TOTAL_VOLTAGE_default_instance_._instance,
  &::primary::_LV_TEMPERATURE_default_instance_._instance,
  &::primary::_COOLING_STATUS_default_instance_._instance,
  &::primary::_SET_RADIATOR_SPEED_default_instance_._instance,
  &::primary::_SET_PUMPS_POWER_default_instance_._instance,
  &::primary::_MARKER_default_instance_._instance,
  &::primary::_HV_CELLS_VOLTAGE_default_instance_._instance,
  &::primary::_HV_CELLS_TEMP_default_instance_._instance,
  &::primary::_HV_CELL_BALANCING_STATUS_default_instance_._instance,
  &::primary::_SET_CELL_BALANCING_STATUS_default_instance_._instance,
  &::primary::_HANDCART_STATUS_default_instance_._instance,
  &::primary::_SPEED_default_instance_._instance,
  &::primary::_INV_L_SET_TORQUE_default_instance_._instance,
  &::primary::_INV_L_RESPONSE_default_instance_._instance,
  &::primary::_Pack_default_instance_._instance,
};

const char descriptor_table_protodef_primary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rprimary.proto\022\007primary\"]\n\rSTEER_VERSIO"
  "N\022\031\n\021component_version\030\001 \001(\r\022\027\n\017cancicd_"
  "version\030\002 \001(\r\022\030\n\020_inner_timestamp\030\003 \001(\004\""
  "[\n\013DAS_VERSION\022\031\n\021component_version\030\001 \001("
  "\r\022\027\n\017cancicd_version\030\002 \001(\r\022\030\n\020_inner_tim"
  "estamp\030\003 \001(\004\"Z\n\nHV_VERSION\022\031\n\021component_"
  "version\030\001 \001(\r\022\027\n\017cancicd_version\030\002 \001(\r\022\030"
  "\n\020_inner_timestamp\030\003 \001(\004\"Z\n\nLV_VERSION\022\031"
  "\n\021component_version\030\001 \001(\r\022\027\n\017cancicd_ver"
  "sion\030\002 \001(\r\022\030\n\020_inner_timestamp\030\003 \001(\004\"[\n\013"
  "TLM_VERSION\022\031\n\021component_version\030\001 \001(\r\022\027"
  "\n\017cancicd_version\030\002 \001(\r\022\030\n\020_inner_timest"
  "amp\030\003 \001(\004\"8\n\tTIMESTAMP\022\021\n\ttimestamp\030\001 \001("
  "\r\022\030\n\020_inner_timestamp\030\002 \001(\004\"\226\001\n\016SET_TLM_"
  "STATUS\022\016\n\006driver\030\001 \001(\r\022\017\n\007circuit\030\002 \001(\r\022"
  "$\n\trace_type\030\003 \001(\0162\021.primary.RaceType\022#\n"
  "\ntlm_status\030\004 \001(\0162\017.primary.Toggle\022\030\n\020_i"
  "nner_timestamp\030\005 \001(\004\"\222\001\n\nTLM_STATUS\022\016\n\006d"
  "river\030\001 \001(\r\022\017\n\007circuit\030\002 \001(\r\022$\n\trace_typ"
  "e\030\003 \001(\0162\021.primary.RaceType\022#\n\ntlm_status"
  "\030\004 \001(\0162\017.primary.Toggle\022\030\n\020_inner_timest"
  "amp\030\005 \001(\004\"A\n\023STEER_SYSTEM_STATUS\022\020\n\010soc_"
  "temp\030\001 \001(\r\022\030\n\020_inner_timestamp\030\002 \001(\004\"\205\001\n"
  "\nHV_VOLTAGE\022\024\n\014pack_voltage\030\001 \001(\r\022\023\n\013bus"
  "_voltage\030\002 \001(\r\022\030\n\020max_cell_voltage\030\003 \001(\r"
  "\022\030\n\020min_cell_voltage\030\004 \001(\r\022\030\n\020_inner_tim"
  "estamp\030\005 \001(\004\"F\n\nHV_CURRENT\022\017\n\007current\030\001 "
  "\001(\r\022\r\n\005power\030\002 \001(\r\022\030\n\020_inner_timestamp\030\003"
  " \001(\004\"]\n\007HV_TEMP\022\024\n\014average_temp\030\001 \001(\r\022\020\n"
  "\010max_temp\030\002 \001(\r\022\020\n\010min_temp\030\003 \001(\r\022\030\n\020_in"
  "ner_timestamp\030\004 \001(\004\"G\n\tHV_ERRORS\022\020\n\010warn"
  "ings\030\001 \001(\r\022\016\n\006errors\030\002 \001(\r\022\030\n\020_inner_tim"
  "estamp\030\003 \001(\004\"K\n\tTS_STATUS\022$\n\tts_status\030\001"
  " \001(\0162\021.primary.TsStatus\022\030\n\020_inner_timest"
  "amp\030\002 \001(\004\"U\n\021SET_TS_STATUS_DAS\022&\n\rts_sta"
  "tus_set\030\001 \001(\0162\017.primary.Toggle\022\030\n\020_inner"
  "_timestamp\030\002 \001(\004\"Z\n\026SET_TS_STATUS_HANDCA"
  "RT\022&\n\rts_status_set\030\001 \001(\0162\017.primary.Togg"
  "le\022\030\n\020_inner_timestamp\030\002 \001(\004\"w\n\014STEER_ST"
  "ATUS\022\031\n\003map\030\001 \001(\0162\014.primary.Map\0222\n\020tract"
  "ion_control\030\002 \001(\0162\030.primary.TractionCont"
  "rol\022\030\n\020_inner_timestamp\030\003 \001(\004\"Y\n\016SET_CAR"
  "_STATUS\022-\n\016car_status_set\030\001 \001(\0162\025.primar"
  "y.SetCarStatus\022\030\n\020_inner_timestamp\030\002 \001(\004"
  "\"j\n\020SET_PEDALS_RANGE\022\035\n\005bound\030\001 \001(\0162\016.pr"
  "imary.Bound\022\035\n\005pedal\030\002 \001(\0162\016.primary.Ped"
  "al\022\030\n\020_inner_timestamp\030\003 \001(\004\"S\n\030SET_STEE"
  "RING_ANGLE_RANGE\022\035\n\005bound\030\001 \001(\0162\016.primar"
  "y.Bound\022\030\n\020_inner_timestamp\030\002 \001(\004\"\250\001\n\nCA"
  "R_STATUS\022+\n\ninverter_l\030\001 \001(\0162\027.primary.I"
  "nverterStatus\022+\n\ninverter_r\030\002 \001(\0162\027.prim"
  "ary.InverterStatus\022&\n\ncar_status\030\003 \001(\0162\022"
  ".primary.CarStatus\022\030\n\020_inner_timestamp\030\004"
  " \001(\004\"9\n\nDAS_ERRORS\022\021\n\tdas_error\030\001 \001(\r\022\030\n"
  "\020_inner_timestamp\030\002 \001(\004\"7\n\nLV_CURRENT\022\017\n"
  "\007current\030\001 \001(\r\022\030\n\020_inner_timestamp\030\002 \001(\004"
  "\"r\n\nLV_VOLTAGE\022\021\n\tvoltage_1\030\001 \001(\r\022\021\n\tvol"
  "tage_2\030\002 \001(\r\022\021\n\tvoltage_3\030\003 \001(\r\022\021\n\tvolta"
  "ge_4\030\004 \001(\r\022\030\n\020_inner_timestamp\030\005 \001(\004\"C\n\020"
  "LV_TOTAL_VOLTAGE\022\025\n\rtotal_voltage\030\001 \001(\r\022"
  "\030\n\020_inner_timestamp\030\002 \001(\004\"\226\001\n\016LV_TEMPERA"
  "TURE\022\030\n\020bp_temperature_1\030\001 \001(\r\022\030\n\020bp_tem"
  "perature_2\030\002 \001(\r\022\032\n\022dcdc12_temperature\030\003"
  " \001(\r\022\032\n\022dcdc24_temperature\030\004 \001(\r\022\030\n\020_inn"
  "er_timestamp\030\005 \001(\004\"j\n\016COOLING_STATUS\022\024\n\014"
  "hv_fan_speed\030\001 \001(\r\022\024\n\014lv_fan_speed\030\002 \001(\r"
  "\022\022\n\npump_speed\030\003 \001(\r\022\030\n\020_inner_timestamp"
  "\030\004 \001(\004\"]\n\022SET_RADIATOR_SPEED\022-\n\023car_radi"
  "ators_speed\030\001 \001(\0162\020.primary.Cooling\022\030\n\020_"
  "inner_timestamp\030\002 \001(\004\"V\n\017SET_PUMPS_POWER"
  "\022)\n\017car_pumps_power\030\001 \001(\0162\020.primary.Cool"
  "ing\022\030\n\020_inner_timestamp\030\002 \001(\004\"\"\n\006MARKER\022"
  "\030\n\020_inner_timestamp\030\001 \001(\004\"z\n\020HV_CELLS_VO"
  "LTAGE\022\021\n\tvoltage_0\030\001 \001(\r\022\021\n\tvoltage_1\030\002 "
  "\001(\r\022\021\n\tvoltage_2\030\003 \001(\r\022\023\n\013start_index\030\004 "
  "\001(\r\022\030\n\020_inner_timestamp\030\005 \001(\004\"\256\001\n\rHV_CEL"
  "LS_TEMP\022\023\n\013start_index\030\001 \001(\r\022\016\n\006temp_0\030\002"
  " \001(\r\022\016\n\006temp_1\030\003 \001(\r\022\016\n\006temp_2\030\004 \001(\r\022\016\n\006"
  "temp_3\030\005 \001(\r\022\016\n\006temp_4\030\006 \001(\r\022\016\n\006temp_5\030\007"
  " \001(\r\022\016\n\006temp_6\030\010 \001(\r\022\030\n\020_inner_timestamp"
  "\030\t \001(\004\"_\n\030HV_CELL_BALANCING_STATUS\022)\n\020ba"
  "lancing_status\030\001 \001(\0162\017.primary.Toggle\022\030\n"
  "\020_inner_timestamp\030\002 \001(\004\"d\n\031SET_CELL_BALA"
  "NCING_STATUS\022-\n\024set_balancing_status\030\001 \001"
  "(\0162\017.primary.Toggle\022\030\n\020_inner_timestamp\030"
  "\002 \001(\004\">\n\017HANDCART_STATUS\022\021\n\tconnected\030\001 "
  "\001(\010\022\030\n\020_inner_timestamp\030\002 \001(\004\"o\n\005SPEED\022\021"
  "\n\tencoder_r\030\001 \001(\r\022\021\n\tencoder_l\030\002 \001(\r\022\022\n\n"
  "inverter_r\030\003 \001(\r\022\022\n\ninverter_l\030\004 \001(\r\022\030\n\020"
  "_inner_timestamp\030\005 \001(\004\"V\n\020INV_L_SET_TORQ"
  "UE\022\016\n\006reg_id\030\001 \001(\r\022\013\n\003lsb\030\002 \001(\r\022\013\n\003msb\030\003"
  " \001(\r\022\030\n\020_inner_timestamp\030\004 \001(\004\"\252\001\n\016INV_L"
  "_RESPONSE\022\016\n\006reg_id\030\001 \001(\r\022\016\n\006data_0\030\002 \001("
  "\r\022\016\n\006data_1\030\003 \001(\r\022\016\n\006data_2\030\004 \001(\r\022\016\n\006dat"
  "a_3\030\005 \001(\r\022\016\n\006data_4\030\006 \001(\r\022\016\n\006data_5\030\007 \001("
  "\r\022\016\n\006data_6\030\010 \001(\r\022\030\n\020_inner_timestamp\030\t "
  "\001(\004\"\234\016\n\004Pack\022-\n\rSTEER_VERSION\030\001 \003(\0132\026.pr"
  "imary.STEER_VERSION\022)\n\013DAS_VERSION\030\002 \003(\013"
  "2\024.primary.DAS_VERSION\022\'\n\nHV_VERSION\030\003 \003"
  "(\0132\023.primary.HV_VERSION\022\'\n\nLV_VERSION\030\004 "
  "\003(\0132\023.primary.LV_VERSION\022)\n\013TLM_VERSION\030"
  "\005 \003(\0132\024.primary.TLM_VERSION\022%\n\tTIMESTAMP"
  "\030\006 \003(\0132\022.primary.TIMESTAMP\022/\n\016SET_TLM_ST"
  "ATUS\030\007 \003(\0132\027.primary.SET_TLM_STATUS\022\'\n\nT"
  "LM_STATUS\030\010 \003(\0132\023.primary.TLM_STATUS\0229\n\023"
  "STEER_SYSTEM_STATUS\030\t \003(\0132\034.primary.STEE"
  "R_SYSTEM_STATUS\022\'\n\nHV_VOLTAGE\030\n \003(\0132\023.pr"
  "imary.HV_VOLTAGE\022\'\n\nHV_CURRENT\030\013 \003(\0132\023.p"
  "rimary.HV_CURRENT\022!\n\007HV_TEMP\030\014 \003(\0132\020.pri"
  "mary.HV_TEMP\022%\n\tHV_ERRORS\030\r \003(\0132\022.primar"
  "y.HV_ERRORS\022%\n\tTS_STATUS\030\016 \003(\0132\022.primary"
  ".TS_STATUS\0225\n\021SET_TS_STATUS_DAS\030\017 \003(\0132\032."
  "primary.SET_TS_STATUS_DAS\022\?\n\026SET_TS_STAT"
  "US_HANDCART\030\020 \003(\0132\037.primary.SET_TS_STATU"
  "S_HANDCART\022+\n\014STEER_STATUS\030\021 \003(\0132\025.prima"
  "ry.STEER_STATUS\022/\n\016SET_CAR_STATUS\030\022 \003(\0132"
  "\027.primary.SET_CAR_STATUS\0223\n\020SET_PEDALS_R"
  "ANGE\030\023 \003(\0132\031.primary.SET_PEDALS_RANGE\022C\n"
  "\030SET_STEERING_ANGLE_RANGE\030\024 \003(\0132!.primar"
  "y.SET_STEERING_ANGLE_RANGE\022\'\n\nCAR_STATUS"
  "\030\025 \003(\0132\023.primary.CAR_STATUS\022\'\n\nDAS_ERROR"
  "S\030\026 \003(\0132\023.primary.DAS_ERRORS\022\'\n\nLV_CURRE"
  "NT\030\027 \003(\0132\023.primary.LV_CURRENT\022\'\n\nLV_VOLT"
  "AGE\030\030 \003(\0132\023.primary.LV_VOLTAGE\0223\n\020LV_TOT"
  "AL_VOLTAGE\030\031 \003(\0132\031.primary.LV_TOTAL_VOLT"
  "AGE\022/\n\016LV_TEMPERATURE\030\032 \003(\0132\027.primary.LV"
  "_TEMPERATURE\022/\n\016COOLING_STATUS\030\033 \003(\0132\027.p"
  "rimary.COOLING_STATUS\0227\n\022SET_RADIATOR_SP"
  "EED\030\034 \003(\0132\033.primary.SET_RADIATOR_SPEED\0221"
  "\n\017SET_PUMPS_POWER\030\035 \003(\0132\030.primary.SET_PU"
  "MPS_POWER\022\037\n\006MARKER\030\036 \003(\0132\017.primary.MARK"
  "ER\0223\n\020HV_CELLS_VOLTAGE\030\037 \003(\0132\031.primary.H"
  "V_CELLS_VOLTAGE\022-\n\rHV_CELLS_TEMP\030  \003(\0132\026"
  ".primary.HV_CELLS_TEMP\022C\n\030HV_CELL_BALANC"
  "ING_STATUS\030! \003(\0132!.primary.HV_CELL_BALAN"
  "CING_STATUS\022E\n\031SET_CELL_BALANCING_STATUS"
  "\030\" \003(\0132\".primary.SET_CELL_BALANCING_STAT"
  "US\0221\n\017HANDCART_STATUS\030# \003(\0132\030.primary.HA"
  "NDCART_STATUS\022\035\n\005SPEED\030$ \003(\0132\016.primary.S"
  "PEED\0223\n\020INV_L_SET_TORQUE\030% \003(\0132\031.primary"
  ".INV_L_SET_TORQUE\022/\n\016INV_L_RESPONSE\030& \003("
  "\0132\027.primary.INV_L_RESPONSE*k\n\010RaceType\022\031"
  "\n\025RaceType_ACCELERATION\020\000\022\024\n\020RaceType_SK"
  "IDPAD\020\001\022\026\n\022RaceType_AUTOCROSS\020\002\022\026\n\022RaceT"
  "ype_ENDURANCE\020\003*X\n\016InverterStatus\022\026\n\022Inv"
  "erterStatus_OFF\020\000\022\027\n\023InverterStatus_IDLE"
  "\020\001\022\025\n\021InverterStatus_ON\020\002*G\n\tCarStatus\022\022"
  "\n\016CarStatus_IDLE\020\000\022\023\n\017CarStatus_SETUP\020\001\022"
  "\021\n\rCarStatus_RUN\020\002*\'\n\006Toggle\022\r\n\tToggle_O"
  "N\020\000\022\016\n\nToggle_OFF\020\001*\220\001\n\017TractionControl\022"
  "\027\n\023TractionControl_OFF\020\000\022 \n\034TractionCont"
  "rol_SLIP_CONTROL\020\001\022$\n TractionControl_TO"
  "RQUE_VECTORING\020\002\022\034\n\030TractionControl_COMP"
  "LETE\020\003*Y\n\010TsStatus\022\020\n\014TsStatus_OFF\020\000\022\026\n\022"
  "TsStatus_PRECHARGE\020\001\022\017\n\013TsStatus_ON\020\002\022\022\n"
  "\016TsStatus_FATAL\020\003*R\n\003Map\022\t\n\005Map_R\020\000\022\013\n\007M"
  "ap_D20\020\001\022\013\n\007Map_D40\020\002\022\013\n\007Map_D60\020\003\022\013\n\007Ma"
  "p_D80\020\004\022\014\n\010Map_D100\020\005*;\n\014SetCarStatus\022\025\n"
  "\021SetCarStatus_IDLE\020\000\022\024\n\020SetCarStatus_RUN"
  "\020\001*-\n\005Bound\022\021\n\rBound_SET_MAX\020\000\022\021\n\rBound_"
  "SET_MIN\020\001*/\n\005Pedal\022\025\n\021Pedal_ACCELERATOR\020"
  "\000\022\017\n\013Pedal_BRAKE\020\001*m\n\007Cooling\022\031\n\025Cooling"
  "_RADIATORS_MAX\020\000\022\031\n\025Cooling_RADIATORS_OF"
  "F\020\001\022\025\n\021Cooling_PUMPS_MAX\020\002\022\025\n\021Cooling_PU"
  "MPS_OFF\020\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_primary_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_primary_2eproto = {
    false, false, 6577, descriptor_table_protodef_primary_2eproto,
    "primary.proto",
    &descriptor_table_primary_2eproto_once, nullptr, 0, 39,
    schemas, file_default_instances, TableStruct_primary_2eproto::offsets,
    file_level_metadata_primary_2eproto, file_level_enum_descriptors_primary_2eproto,
    file_level_service_descriptors_primary_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_primary_2eproto_getter() {
  return &descriptor_table_primary_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_primary_2eproto(&descriptor_table_primary_2eproto);
namespace primary {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[0];
}
bool RaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InverterStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[1];
}
bool InverterStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CarStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[2];
}
bool CarStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Toggle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[3];
}
bool Toggle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TractionControl_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[4];
}
bool TractionControl_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TsStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[5];
}
bool TsStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Map_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[6];
}
bool Map_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetCarStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[7];
}
bool SetCarStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bound_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[8];
}
bool Bound_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pedal_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[9];
}
bool Pedal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cooling_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[10];
}
bool Cooling_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class STEER_VERSION::_Internal {
 public:
};

STEER_VERSION::STEER_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.STEER_VERSION)
}
STEER_VERSION::STEER_VERSION(const STEER_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.STEER_VERSION)
}

inline void STEER_VERSION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
}

STEER_VERSION::~STEER_VERSION() {
  // @@protoc_insertion_point(destructor:primary.STEER_VERSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void STEER_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void STEER_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void STEER_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.STEER_VERSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STEER_VERSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STEER_VERSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.STEER_VERSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.STEER_VERSION)
  return target;
}

size_t STEER_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.STEER_VERSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STEER_VERSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STEER_VERSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STEER_VERSION::GetClassData() const { return &_class_data_; }

void STEER_VERSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STEER_VERSION *>(to)->MergeFrom(
      static_cast<const STEER_VERSION &>(from));
}


void STEER_VERSION::MergeFrom(const STEER_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.STEER_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STEER_VERSION::CopyFrom(const STEER_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.STEER_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STEER_VERSION::IsInitialized() const {
  return true;
}

void STEER_VERSION::InternalSwap(STEER_VERSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STEER_VERSION, _inner_timestamp_)
      + sizeof(STEER_VERSION::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(STEER_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STEER_VERSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[0]);
}

// ===================================================================

class DAS_VERSION::_Internal {
 public:
};

DAS_VERSION::DAS_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.DAS_VERSION)
}
DAS_VERSION::DAS_VERSION(const DAS_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.DAS_VERSION)
}

inline void DAS_VERSION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
}

DAS_VERSION::~DAS_VERSION() {
  // @@protoc_insertion_point(destructor:primary.DAS_VERSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DAS_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DAS_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DAS_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.DAS_VERSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DAS_VERSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DAS_VERSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.DAS_VERSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.DAS_VERSION)
  return target;
}

size_t DAS_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.DAS_VERSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DAS_VERSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DAS_VERSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DAS_VERSION::GetClassData() const { return &_class_data_; }

void DAS_VERSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DAS_VERSION *>(to)->MergeFrom(
      static_cast<const DAS_VERSION &>(from));
}


void DAS_VERSION::MergeFrom(const DAS_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.DAS_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DAS_VERSION::CopyFrom(const DAS_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.DAS_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAS_VERSION::IsInitialized() const {
  return true;
}

void DAS_VERSION::InternalSwap(DAS_VERSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DAS_VERSION, _inner_timestamp_)
      + sizeof(DAS_VERSION::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(DAS_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DAS_VERSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[1]);
}

// ===================================================================

class HV_VERSION::_Internal {
 public:
};

HV_VERSION::HV_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HV_VERSION)
}
HV_VERSION::HV_VERSION(const HV_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_VERSION)
}

inline void HV_VERSION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
}

HV_VERSION::~HV_VERSION() {
  // @@protoc_insertion_point(destructor:primary.HV_VERSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HV_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_VERSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_VERSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_VERSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_VERSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_VERSION)
  return target;
}

size_t HV_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_VERSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_VERSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_VERSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_VERSION::GetClassData() const { return &_class_data_; }

void HV_VERSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_VERSION *>(to)->MergeFrom(
      static_cast<const HV_VERSION &>(from));
}


void HV_VERSION::MergeFrom(const HV_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_VERSION::CopyFrom(const HV_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_VERSION::IsInitialized() const {
  return true;
}

void HV_VERSION::InternalSwap(HV_VERSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_VERSION, _inner_timestamp_)
      + sizeof(HV_VERSION::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_VERSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[2]);
}

// ===================================================================

class LV_VERSION::_Internal {
 public:
};

LV_VERSION::LV_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.LV_VERSION)
}
LV_VERSION::LV_VERSION(const LV_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_VERSION)
}

inline void LV_VERSION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
}

LV_VERSION::~LV_VERSION() {
  // @@protoc_insertion_point(destructor:primary.LV_VERSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LV_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LV_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LV_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_VERSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_VERSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LV_VERSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_VERSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_VERSION)
  return target;
}

size_t LV_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_VERSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LV_VERSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LV_VERSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LV_VERSION::GetClassData() const { return &_class_data_; }

void LV_VERSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LV_VERSION *>(to)->MergeFrom(
      static_cast<const LV_VERSION &>(from));
}


void LV_VERSION::MergeFrom(const LV_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LV_VERSION::CopyFrom(const LV_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_VERSION::IsInitialized() const {
  return true;
}

void LV_VERSION::InternalSwap(LV_VERSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_VERSION, _inner_timestamp_)
      + sizeof(LV_VERSION::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(LV_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_VERSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[3]);
}

// ===================================================================

class TLM_VERSION::_Internal {
 public:
};

TLM_VERSION::TLM_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.TLM_VERSION)
}
TLM_VERSION::TLM_VERSION(const TLM_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.TLM_VERSION)
}

inline void TLM_VERSION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
}

TLM_VERSION::~TLM_VERSION() {
  // @@protoc_insertion_point(destructor:primary.TLM_VERSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TLM_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TLM_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TLM_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TLM_VERSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TLM_VERSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TLM_VERSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TLM_VERSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TLM_VERSION)
  return target;
}

size_t TLM_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TLM_VERSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TLM_VERSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TLM_VERSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TLM_VERSION::GetClassData() const { return &_class_data_; }

void TLM_VERSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TLM_VERSION *>(to)->MergeFrom(
      static_cast<const TLM_VERSION &>(from));
}


void TLM_VERSION::MergeFrom(const TLM_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TLM_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TLM_VERSION::CopyFrom(const TLM_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TLM_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLM_VERSION::IsInitialized() const {
  return true;
}

void TLM_VERSION::InternalSwap(TLM_VERSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TLM_VERSION, _inner_timestamp_)
      + sizeof(TLM_VERSION::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(TLM_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TLM_VERSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[4]);
}

// ===================================================================

class TIMESTAMP::_Internal {
 public:
};

TIMESTAMP::TIMESTAMP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.TIMESTAMP)
}
TIMESTAMP::TIMESTAMP(const TIMESTAMP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.TIMESTAMP)
}

inline void TIMESTAMP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(timestamp_));
}

TIMESTAMP::~TIMESTAMP() {
  // @@protoc_insertion_point(destructor:primary.TIMESTAMP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TIMESTAMP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TIMESTAMP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TIMESTAMP::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TIMESTAMP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TIMESTAMP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TIMESTAMP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TIMESTAMP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TIMESTAMP)
  return target;
}

size_t TIMESTAMP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TIMESTAMP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TIMESTAMP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TIMESTAMP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TIMESTAMP::GetClassData() const { return &_class_data_; }

void TIMESTAMP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TIMESTAMP *>(to)->MergeFrom(
      static_cast<const TIMESTAMP &>(from));
}


void TIMESTAMP::MergeFrom(const TIMESTAMP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TIMESTAMP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TIMESTAMP::CopyFrom(const TIMESTAMP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TIMESTAMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TIMESTAMP::IsInitialized() const {
  return true;
}

void TIMESTAMP::InternalSwap(TIMESTAMP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TIMESTAMP, timestamp_)
      + sizeof(TIMESTAMP::timestamp_)
      - PROTOBUF_FIELD_OFFSET(TIMESTAMP, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TIMESTAMP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[5]);
}

// ===================================================================

class SET_TLM_STATUS::_Internal {
 public:
};

SET_TLM_STATUS::SET_TLM_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SET_TLM_STATUS)
}
SET_TLM_STATUS::SET_TLM_STATUS(const SET_TLM_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&driver_, &from.driver_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&driver_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_TLM_STATUS)
}

inline void SET_TLM_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&driver_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&driver_)) + sizeof(_inner_timestamp_));
}

SET_TLM_STATUS::~SET_TLM_STATUS() {
  // @@protoc_insertion_point(destructor:primary.SET_TLM_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SET_TLM_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_TLM_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_TLM_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_TLM_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&driver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&driver_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_TLM_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 driver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          driver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 circuit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          circuit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .primary.RaceType race_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_race_type(static_cast<::primary::RaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.Toggle tlm_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tlm_status(static_cast<::primary::Toggle>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_TLM_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_TLM_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 driver = 1;
  if (this->_internal_driver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_driver(), target);
  }

  // uint32 circuit = 2;
  if (this->_internal_circuit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_circuit(), target);
  }

  // .primary.RaceType race_type = 3;
  if (this->_internal_race_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_race_type(), target);
  }

  // .primary.Toggle tlm_status = 4;
  if (this->_internal_tlm_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_tlm_status(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_TLM_STATUS)
  return target;
}

size_t SET_TLM_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_TLM_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 driver = 1;
  if (this->_internal_driver() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_driver());
  }

  // uint32 circuit = 2;
  if (this->_internal_circuit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_circuit());
  }

  // .primary.RaceType race_type = 3;
  if (this->_internal_race_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_race_type());
  }

  // .primary.Toggle tlm_status = 4;
  if (this->_internal_tlm_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tlm_status());
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_TLM_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_TLM_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_TLM_STATUS::GetClassData() const { return &_class_data_; }

void SET_TLM_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_TLM_STATUS *>(to)->MergeFrom(
      static_cast<const SET_TLM_STATUS &>(from));
}


void SET_TLM_STATUS::MergeFrom(const SET_TLM_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_TLM_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_driver() != 0) {
    _internal_set_driver(from._internal_driver());
  }
  if (from._internal_circuit() != 0) {
    _internal_set_circuit(from._internal_circuit());
  }
  if (from._internal_race_type() != 0) {
    _internal_set_race_type(from._internal_race_type());
  }
  if (from._internal_tlm_status() != 0) {
    _internal_set_tlm_status(from._internal_tlm_status());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_TLM_STATUS::CopyFrom(const SET_TLM_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_TLM_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_TLM_STATUS::IsInitialized() const {
  return true;
}

void SET_TLM_STATUS::InternalSwap(SET_TLM_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_TLM_STATUS, _inner_timestamp_)
      + sizeof(SET_TLM_STATUS::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(SET_TLM_STATUS, driver_)>(
          reinterpret_cast<char*>(&driver_),
          reinterpret_cast<char*>(&other->driver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_TLM_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[6]);
}

// ===================================================================

class TLM_STATUS::_Internal {
 public:
};

TLM_STATUS::TLM_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.TLM_STATUS)
}
TLM_STATUS::TLM_STATUS(const TLM_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&driver_, &from.driver_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&driver_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.TLM_STATUS)
}

inline void TLM_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&driver_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&driver_)) + sizeof(_inner_timestamp_));
}

TLM_STATUS::~TLM_STATUS() {
  // @@protoc_insertion_point(destructor:primary.TLM_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TLM_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TLM_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TLM_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TLM_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&driver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&driver_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TLM_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 driver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          driver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 circuit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          circuit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .primary.RaceType race_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_race_type(static_cast<::primary::RaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.Toggle tlm_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tlm_status(static_cast<::primary::Toggle>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TLM_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TLM_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 driver = 1;
  if (this->_internal_driver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_driver(), target);
  }

  // uint32 circuit = 2;
  if (this->_internal_circuit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_circuit(), target);
  }

  // .primary.RaceType race_type = 3;
  if (this->_internal_race_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_race_type(), target);
  }

  // .primary.Toggle tlm_status = 4;
  if (this->_internal_tlm_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_tlm_status(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TLM_STATUS)
  return target;
}

size_t TLM_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TLM_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 driver = 1;
  if (this->_internal_driver() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_driver());
  }

  // uint32 circuit = 2;
  if (this->_internal_circuit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_circuit());
  }

  // .primary.RaceType race_type = 3;
  if (this->_internal_race_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_race_type());
  }

  // .primary.Toggle tlm_status = 4;
  if (this->_internal_tlm_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tlm_status());
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TLM_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TLM_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TLM_STATUS::GetClassData() const { return &_class_data_; }

void TLM_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TLM_STATUS *>(to)->MergeFrom(
      static_cast<const TLM_STATUS &>(from));
}


void TLM_STATUS::MergeFrom(const TLM_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TLM_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_driver() != 0) {
    _internal_set_driver(from._internal_driver());
  }
  if (from._internal_circuit() != 0) {
    _internal_set_circuit(from._internal_circuit());
  }
  if (from._internal_race_type() != 0) {
    _internal_set_race_type(from._internal_race_type());
  }
  if (from._internal_tlm_status() != 0) {
    _internal_set_tlm_status(from._internal_tlm_status());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TLM_STATUS::CopyFrom(const TLM_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TLM_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLM_STATUS::IsInitialized() const {
  return true;
}

void TLM_STATUS::InternalSwap(TLM_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TLM_STATUS, _inner_timestamp_)
      + sizeof(TLM_STATUS::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(TLM_STATUS, driver_)>(
          reinterpret_cast<char*>(&driver_),
          reinterpret_cast<char*>(&other->driver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TLM_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[7]);
}

// ===================================================================

class STEER_SYSTEM_STATUS::_Internal {
 public:
};

STEER_SYSTEM_STATUS::STEER_SYSTEM_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.STEER_SYSTEM_STATUS)
}
STEER_SYSTEM_STATUS::STEER_SYSTEM_STATUS(const STEER_SYSTEM_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&soc_temp_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(soc_temp_));
  // @@protoc_insertion_point(copy_constructor:primary.STEER_SYSTEM_STATUS)
}

inline void STEER_SYSTEM_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&soc_temp_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(soc_temp_));
}

STEER_SYSTEM_STATUS::~STEER_SYSTEM_STATUS() {
  // @@protoc_insertion_point(destructor:primary.STEER_SYSTEM_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void STEER_SYSTEM_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void STEER_SYSTEM_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void STEER_SYSTEM_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.STEER_SYSTEM_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soc_temp_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(soc_temp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STEER_SYSTEM_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 soc_temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          soc_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STEER_SYSTEM_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.STEER_SYSTEM_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 soc_temp = 1;
  if (this->_internal_soc_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_soc_temp(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.STEER_SYSTEM_STATUS)
  return target;
}

size_t STEER_SYSTEM_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.STEER_SYSTEM_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // uint32 soc_temp = 1;
  if (this->_internal_soc_temp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_soc_temp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STEER_SYSTEM_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STEER_SYSTEM_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STEER_SYSTEM_STATUS::GetClassData() const { return &_class_data_; }

void STEER_SYSTEM_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STEER_SYSTEM_STATUS *>(to)->MergeFrom(
      static_cast<const STEER_SYSTEM_STATUS &>(from));
}


void STEER_SYSTEM_STATUS::MergeFrom(const STEER_SYSTEM_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.STEER_SYSTEM_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_soc_temp() != 0) {
    _internal_set_soc_temp(from._internal_soc_temp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STEER_SYSTEM_STATUS::CopyFrom(const STEER_SYSTEM_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.STEER_SYSTEM_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STEER_SYSTEM_STATUS::IsInitialized() const {
  return true;
}

void STEER_SYSTEM_STATUS::InternalSwap(STEER_SYSTEM_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STEER_SYSTEM_STATUS, soc_temp_)
      + sizeof(STEER_SYSTEM_STATUS::soc_temp_)
      - PROTOBUF_FIELD_OFFSET(STEER_SYSTEM_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STEER_SYSTEM_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[8]);
}

// ===================================================================

class HV_VOLTAGE::_Internal {
 public:
};

HV_VOLTAGE::HV_VOLTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HV_VOLTAGE)
}
HV_VOLTAGE::HV_VOLTAGE(const HV_VOLTAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pack_voltage_, &from.pack_voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&pack_voltage_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_VOLTAGE)
}

inline void HV_VOLTAGE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pack_voltage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&pack_voltage_)) + sizeof(_inner_timestamp_));
}

HV_VOLTAGE::~HV_VOLTAGE() {
  // @@protoc_insertion_point(destructor:primary.HV_VOLTAGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HV_VOLTAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_VOLTAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_VOLTAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_VOLTAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pack_voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&pack_voltage_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_VOLTAGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pack_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pack_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bus_voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bus_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_cell_voltage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_cell_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_cell_voltage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          min_cell_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_VOLTAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_VOLTAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pack_voltage = 1;
  if (this->_internal_pack_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pack_voltage(), target);
  }

  // uint32 bus_voltage = 2;
  if (this->_internal_bus_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bus_voltage(), target);
  }

  // uint32 max_cell_voltage = 3;
  if (this->_internal_max_cell_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_cell_voltage(), target);
  }

  // uint32 min_cell_voltage = 4;
  if (this->_internal_min_cell_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_min_cell_voltage(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_VOLTAGE)
  return target;
}

size_t HV_VOLTAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_VOLTAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pack_voltage = 1;
  if (this->_internal_pack_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pack_voltage());
  }

  // uint32 bus_voltage = 2;
  if (this->_internal_bus_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bus_voltage());
  }

  // uint32 max_cell_voltage = 3;
  if (this->_internal_max_cell_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_cell_voltage());
  }

  // uint32 min_cell_voltage = 4;
  if (this->_internal_min_cell_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_cell_voltage());
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_VOLTAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_VOLTAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_VOLTAGE::GetClassData() const { return &_class_data_; }

void HV_VOLTAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_VOLTAGE *>(to)->MergeFrom(
      static_cast<const HV_VOLTAGE &>(from));
}


void HV_VOLTAGE::MergeFrom(const HV_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pack_voltage() != 0) {
    _internal_set_pack_voltage(from._internal_pack_voltage());
  }
  if (from._internal_bus_voltage() != 0) {
    _internal_set_bus_voltage(from._internal_bus_voltage());
  }
  if (from._internal_max_cell_voltage() != 0) {
    _internal_set_max_cell_voltage(from._internal_max_cell_voltage());
  }
  if (from._internal_min_cell_voltage() != 0) {
    _internal_set_min_cell_voltage(from._internal_min_cell_voltage());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_VOLTAGE::CopyFrom(const HV_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_VOLTAGE::IsInitialized() const {
  return true;
}

void HV_VOLTAGE::InternalSwap(HV_VOLTAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_VOLTAGE, _inner_timestamp_)
      + sizeof(HV_VOLTAGE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_VOLTAGE, pack_voltage_)>(
          reinterpret_cast<char*>(&pack_voltage_),
          reinterpret_cast<char*>(&other->pack_voltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_VOLTAGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[9]);
}

// ===================================================================

class HV_CURRENT::_Internal {
 public:
};

HV_CURRENT::HV_CURRENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HV_CURRENT)
}
HV_CURRENT::HV_CURRENT(const HV_CURRENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_, &from.current_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&current_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CURRENT)
}

inline void HV_CURRENT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&current_)) + sizeof(_inner_timestamp_));
}

HV_CURRENT::~HV_CURRENT() {
  // @@protoc_insertion_point(destructor:primary.HV_CURRENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HV_CURRENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_CURRENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_CURRENT::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CURRENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&current_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CURRENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_CURRENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CURRENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current(), target);
  }

  // uint32 power = 2;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_power(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CURRENT)
  return target;
}

size_t HV_CURRENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CURRENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current());
  }

  // uint32 power = 2;
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_power());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_CURRENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_CURRENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_CURRENT::GetClassData() const { return &_class_data_; }

void HV_CURRENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_CURRENT *>(to)->MergeFrom(
      static_cast<const HV_CURRENT &>(from));
}


void HV_CURRENT::MergeFrom(const HV_CURRENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CURRENT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from._internal_power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_CURRENT::CopyFrom(const HV_CURRENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CURRENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CURRENT::IsInitialized() const {
  return true;
}

void HV_CURRENT::InternalSwap(HV_CURRENT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CURRENT, _inner_timestamp_)
      + sizeof(HV_CURRENT::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_CURRENT, current_)>(
          reinterpret_cast<char*>(&current_),
          reinterpret_cast<char*>(&other->current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CURRENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[10]);
}

// ===================================================================

class HV_TEMP::_Internal {
 public:
};

HV_TEMP::HV_TEMP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HV_TEMP)
}
HV_TEMP::HV_TEMP(const HV_TEMP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_temp_, &from.average_temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_temp_) -
    reinterpret_cast<char*>(&average_temp_)) + sizeof(min_temp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_TEMP)
}

inline void HV_TEMP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&average_temp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_temp_) -
    reinterpret_cast<char*>(&average_temp_)) + sizeof(min_temp_));
}

HV_TEMP::~HV_TEMP() {
  // @@protoc_insertion_point(destructor:primary.HV_TEMP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HV_TEMP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_TEMP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_TEMP::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_TEMP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&average_temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_temp_) -
      reinterpret_cast<char*>(&average_temp_)) + sizeof(min_temp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_TEMP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 average_temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          average_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_temp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          min_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_TEMP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_TEMP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 average_temp = 1;
  if (this->_internal_average_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_average_temp(), target);
  }

  // uint32 max_temp = 2;
  if (this->_internal_max_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_temp(), target);
  }

  // uint32 min_temp = 3;
  if (this->_internal_min_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_temp(), target);
  }

  // uint64 _inner_timestamp = 4;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_TEMP)
  return target;
}

size_t HV_TEMP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_TEMP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 average_temp = 1;
  if (this->_internal_average_temp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_average_temp());
  }

  // uint32 max_temp = 2;
  if (this->_internal_max_temp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_temp());
  }

  // uint64 _inner_timestamp = 4;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // uint32 min_temp = 3;
  if (this->_internal_min_temp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_temp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_TEMP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_TEMP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_TEMP::GetClassData() const { return &_class_data_; }

void HV_TEMP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_TEMP *>(to)->MergeFrom(
      static_cast<const HV_TEMP &>(from));
}


void HV_TEMP::MergeFrom(const HV_TEMP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_TEMP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_average_temp() != 0) {
    _internal_set_average_temp(from._internal_average_temp());
  }
  if (from._internal_max_temp() != 0) {
    _internal_set_max_temp(from._internal_max_temp());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_min_temp() != 0) {
    _internal_set_min_temp(from._internal_min_temp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_TEMP::CopyFrom(const HV_TEMP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_TEMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_TEMP::IsInitialized() const {
  return true;
}

void HV_TEMP::InternalSwap(HV_TEMP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_TEMP, min_temp_)
      + sizeof(HV_TEMP::min_temp_)
      - PROTOBUF_FIELD_OFFSET(HV_TEMP, average_temp_)>(
          reinterpret_cast<char*>(&average_temp_),
          reinterpret_cast<char*>(&other->average_temp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_TEMP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[11]);
}

// ===================================================================

class HV_ERRORS::_Internal {
 public:
};

HV_ERRORS::HV_ERRORS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HV_ERRORS)
}
HV_ERRORS::HV_ERRORS(const HV_ERRORS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&warnings_, &from.warnings_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&warnings_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_ERRORS)
}

inline void HV_ERRORS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&warnings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&warnings_)) + sizeof(_inner_timestamp_));
}

HV_ERRORS::~HV_ERRORS() {
  // @@protoc_insertion_point(destructor:primary.HV_ERRORS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HV_ERRORS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_ERRORS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_ERRORS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_ERRORS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&warnings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&warnings_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_ERRORS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 warnings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          warnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_ERRORS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_ERRORS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 warnings = 1;
  if (this->_internal_warnings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_warnings(), target);
  }

  // uint32 errors = 2;
  if (this->_internal_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_errors(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_ERRORS)
  return target;
}

size_t HV_ERRORS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_ERRORS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 warnings = 1;
  if (this->_internal_warnings() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_warnings());
  }

  // uint32 errors = 2;
  if (this->_internal_errors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errors());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_ERRORS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_ERRORS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_ERRORS::GetClassData() const { return &_class_data_; }

void HV_ERRORS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_ERRORS *>(to)->MergeFrom(
      static_cast<const HV_ERRORS &>(from));
}


void HV_ERRORS::MergeFrom(const HV_ERRORS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_ERRORS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_warnings() != 0) {
    _internal_set_warnings(from._internal_warnings());
  }
  if (from._internal_errors() != 0) {
    _internal_set_errors(from._internal_errors());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_ERRORS::CopyFrom(const HV_ERRORS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_ERRORS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_ERRORS::IsInitialized() const {
  return true;
}

void HV_ERRORS::InternalSwap(HV_ERRORS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_ERRORS, _inner_timestamp_)
      + sizeof(HV_ERRORS::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_ERRORS, warnings_)>(
          reinterpret_cast<char*>(&warnings_),
          reinterpret_cast<char*>(&other->warnings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_ERRORS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[12]);
}

// ===================================================================

class TS_STATUS::_Internal {
 public:
};

TS_STATUS::TS_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.TS_STATUS)
}
TS_STATUS::TS_STATUS(const TS_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_));
  // @@protoc_insertion_point(copy_constructor:primary.TS_STATUS)
}

inline void TS_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ts_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_));
}

TS_STATUS::~TS_STATUS() {
  // @@protoc_insertion_point(destructor:primary.TS_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TS_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TS_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TS_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TS_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TS_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.TsStatus ts_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status(static_cast<::primary::TsStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TS_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TS_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.TsStatus ts_status = 1;
  if (this->_internal_ts_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TS_STATUS)
  return target;
}

size_t TS_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TS_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // .primary.TsStatus ts_status = 1;
  if (this->_internal_ts_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ts_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TS_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TS_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TS_STATUS::GetClassData() const { return &_class_data_; }

void TS_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TS_STATUS *>(to)->MergeFrom(
      static_cast<const TS_STATUS &>(from));
}


void TS_STATUS::MergeFrom(const TS_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TS_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_ts_status() != 0) {
    _internal_set_ts_status(from._internal_ts_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TS_STATUS::CopyFrom(const TS_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TS_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TS_STATUS::IsInitialized() const {
  return true;
}

void TS_STATUS::InternalSwap(TS_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TS_STATUS, ts_status_)
      + sizeof(TS_STATUS::ts_status_)
      - PROTOBUF_FIELD_OFFSET(TS_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TS_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[13]);
}

// ===================================================================

class SET_TS_STATUS_DAS::_Internal {
 public:
};

SET_TS_STATUS_DAS::SET_TS_STATUS_DAS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SET_TS_STATUS_DAS)
}
SET_TS_STATUS_DAS::SET_TS_STATUS_DAS(const SET_TS_STATUS_DAS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_status_set_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_set_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_TS_STATUS_DAS)
}

inline void SET_TS_STATUS_DAS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ts_status_set_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_set_));
}

SET_TS_STATUS_DAS::~SET_TS_STATUS_DAS() {
  // @@protoc_insertion_point(destructor:primary.SET_TS_STATUS_DAS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SET_TS_STATUS_DAS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_TS_STATUS_DAS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_TS_STATUS_DAS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_TS_STATUS_DAS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_set_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_set_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_TS_STATUS_DAS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Toggle ts_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status_set(static_cast<::primary::Toggle>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_TS_STATUS_DAS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_TS_STATUS_DAS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle ts_status_set = 1;
  if (this->_internal_ts_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status_set(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_TS_STATUS_DAS)
  return target;
}

size_t SET_TS_STATUS_DAS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_TS_STATUS_DAS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // .primary.Toggle ts_status_set = 1;
  if (this->_internal_ts_status_set() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ts_status_set());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_TS_STATUS_DAS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_TS_STATUS_DAS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_TS_STATUS_DAS::GetClassData() const { return &_class_data_; }

void SET_TS_STATUS_DAS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_TS_STATUS_DAS *>(to)->MergeFrom(
      static_cast<const SET_TS_STATUS_DAS &>(from));
}


void SET_TS_STATUS_DAS::MergeFrom(const SET_TS_STATUS_DAS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_TS_STATUS_DAS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_ts_status_set() != 0) {
    _internal_set_ts_status_set(from._internal_ts_status_set());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_TS_STATUS_DAS::CopyFrom(const SET_TS_STATUS_DAS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_TS_STATUS_DAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_TS_STATUS_DAS::IsInitialized() const {
  return true;
}

void SET_TS_STATUS_DAS::InternalSwap(SET_TS_STATUS_DAS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_TS_STATUS_DAS, ts_status_set_)
      + sizeof(SET_TS_STATUS_DAS::ts_status_set_)
      - PROTOBUF_FIELD_OFFSET(SET_TS_STATUS_DAS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_TS_STATUS_DAS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[14]);
}

// ===================================================================

class SET_TS_STATUS_HANDCART::_Internal {
 public:
};

SET_TS_STATUS_HANDCART::SET_TS_STATUS_HANDCART(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SET_TS_STATUS_HANDCART)
}
SET_TS_STATUS_HANDCART::SET_TS_STATUS_HANDCART(const SET_TS_STATUS_HANDCART& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_status_set_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_set_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_TS_STATUS_HANDCART)
}

inline void SET_TS_STATUS_HANDCART::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ts_status_set_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_set_));
}

SET_TS_STATUS_HANDCART::~SET_TS_STATUS_HANDCART() {
  // @@protoc_insertion_point(destructor:primary.SET_TS_STATUS_HANDCART)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SET_TS_STATUS_HANDCART::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_TS_STATUS_HANDCART::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_TS_STATUS_HANDCART::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_TS_STATUS_HANDCART)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_set_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_set_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_TS_STATUS_HANDCART::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Toggle ts_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status_set(static_cast<::primary::Toggle>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_TS_STATUS_HANDCART::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_TS_STATUS_HANDCART)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle ts_status_set = 1;
  if (this->_internal_ts_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status_set(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_TS_STATUS_HANDCART)
  return target;
}

size_t SET_TS_STATUS_HANDCART::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_TS_STATUS_HANDCART)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // .primary.Toggle ts_status_set = 1;
  if (this->_internal_ts_status_set() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ts_status_set());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_TS_STATUS_HANDCART::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_TS_STATUS_HANDCART::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_TS_STATUS_HANDCART::GetClassData() const { return &_class_data_; }

void SET_TS_STATUS_HANDCART::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_TS_STATUS_HANDCART *>(to)->MergeFrom(
      static_cast<const SET_TS_STATUS_HANDCART &>(from));
}


void SET_TS_STATUS_HANDCART::MergeFrom(const SET_TS_STATUS_HANDCART& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_TS_STATUS_HANDCART)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_ts_status_set() != 0) {
    _internal_set_ts_status_set(from._internal_ts_status_set());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_TS_STATUS_HANDCART::CopyFrom(const SET_TS_STATUS_HANDCART& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_TS_STATUS_HANDCART)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_TS_STATUS_HANDCART::IsInitialized() const {
  return true;
}

void SET_TS_STATUS_HANDCART::InternalSwap(SET_TS_STATUS_HANDCART* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_TS_STATUS_HANDCART, ts_status_set_)
      + sizeof(SET_TS_STATUS_HANDCART::ts_status_set_)
      - PROTOBUF_FIELD_OFFSET(SET_TS_STATUS_HANDCART, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_TS_STATUS_HANDCART::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[15]);
}

// ===================================================================

class STEER_STATUS::_Internal {
 public:
};

STEER_STATUS::STEER_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.STEER_STATUS)
}
STEER_STATUS::STEER_STATUS(const STEER_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&map_, &from.map_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&map_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.STEER_STATUS)
}

inline void STEER_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&map_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&map_)) + sizeof(_inner_timestamp_));
}

STEER_STATUS::~STEER_STATUS() {
  // @@protoc_insertion_point(destructor:primary.STEER_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void STEER_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void STEER_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void STEER_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.STEER_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&map_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STEER_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Map map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_map(static_cast<::primary::Map>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.TractionControl traction_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_traction_control(static_cast<::primary::TractionControl>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STEER_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.STEER_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Map map = 1;
  if (this->_internal_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_map(), target);
  }

  // .primary.TractionControl traction_control = 2;
  if (this->_internal_traction_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_traction_control(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.STEER_STATUS)
  return target;
}

size_t STEER_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.STEER_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Map map = 1;
  if (this->_internal_map() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_map());
  }

  // .primary.TractionControl traction_control = 2;
  if (this->_internal_traction_control() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_traction_control());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STEER_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STEER_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STEER_STATUS::GetClassData() const { return &_class_data_; }

void STEER_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STEER_STATUS *>(to)->MergeFrom(
      static_cast<const STEER_STATUS &>(from));
}


void STEER_STATUS::MergeFrom(const STEER_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.STEER_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_map() != 0) {
    _internal_set_map(from._internal_map());
  }
  if (from._internal_traction_control() != 0) {
    _internal_set_traction_control(from._internal_traction_control());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STEER_STATUS::CopyFrom(const STEER_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.STEER_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STEER_STATUS::IsInitialized() const {
  return true;
}

void STEER_STATUS::InternalSwap(STEER_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STEER_STATUS, _inner_timestamp_)
      + sizeof(STEER_STATUS::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(STEER_STATUS, map_)>(
          reinterpret_cast<char*>(&map_),
          reinterpret_cast<char*>(&other->map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STEER_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[16]);
}

// ===================================================================

class SET_CAR_STATUS::_Internal {
 public:
};

SET_CAR_STATUS::SET_CAR_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SET_CAR_STATUS)
}
SET_CAR_STATUS::SET_CAR_STATUS(const SET_CAR_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&car_status_set_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(car_status_set_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_CAR_STATUS)
}

inline void SET_CAR_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&car_status_set_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(car_status_set_));
}

SET_CAR_STATUS::~SET_CAR_STATUS() {
  // @@protoc_insertion_point(destructor:primary.SET_CAR_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SET_CAR_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_CAR_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_CAR_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_CAR_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_status_set_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(car_status_set_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_CAR_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.SetCarStatus car_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_car_status_set(static_cast<::primary::SetCarStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_CAR_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_CAR_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.SetCarStatus car_status_set = 1;
  if (this->_internal_car_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_car_status_set(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_CAR_STATUS)
  return target;
}

size_t SET_CAR_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_CAR_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // .primary.SetCarStatus car_status_set = 1;
  if (this->_internal_car_status_set() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_car_status_set());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_CAR_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_CAR_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_CAR_STATUS::GetClassData() const { return &_class_data_; }

void SET_CAR_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_CAR_STATUS *>(to)->MergeFrom(
      static_cast<const SET_CAR_STATUS &>(from));
}


void SET_CAR_STATUS::MergeFrom(const SET_CAR_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_CAR_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_car_status_set() != 0) {
    _internal_set_car_status_set(from._internal_car_status_set());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_CAR_STATUS::CopyFrom(const SET_CAR_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_CAR_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_CAR_STATUS::IsInitialized() const {
  return true;
}

void SET_CAR_STATUS::InternalSwap(SET_CAR_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_CAR_STATUS, car_status_set_)
      + sizeof(SET_CAR_STATUS::car_status_set_)
      - PROTOBUF_FIELD_OFFSET(SET_CAR_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_CAR_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[17]);
}

// ===================================================================

class SET_PEDALS_RANGE::_Internal {
 public:
};

SET_PEDALS_RANGE::SET_PEDALS_RANGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SET_PEDALS_RANGE)
}
SET_PEDALS_RANGE::SET_PEDALS_RANGE(const SET_PEDALS_RANGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bound_, &from.bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&bound_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_PEDALS_RANGE)
}

inline void SET_PEDALS_RANGE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bound_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&bound_)) + sizeof(_inner_timestamp_));
}

SET_PEDALS_RANGE::~SET_PEDALS_RANGE() {
  // @@protoc_insertion_point(destructor:primary.SET_PEDALS_RANGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SET_PEDALS_RANGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_PEDALS_RANGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_PEDALS_RANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_PEDALS_RANGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&bound_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_PEDALS_RANGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Bound bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bound(static_cast<::primary::Bound>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.Pedal pedal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pedal(static_cast<::primary::Pedal>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_PEDALS_RANGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_PEDALS_RANGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Bound bound = 1;
  if (this->_internal_bound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bound(), target);
  }

  // .primary.Pedal pedal = 2;
  if (this->_internal_pedal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pedal(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_PEDALS_RANGE)
  return target;
}

size_t SET_PEDALS_RANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_PEDALS_RANGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Bound bound = 1;
  if (this->_internal_bound() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_bound());
  }

  // .primary.Pedal pedal = 2;
  if (this->_internal_pedal() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pedal());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_PEDALS_RANGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_PEDALS_RANGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_PEDALS_RANGE::GetClassData() const { return &_class_data_; }

void SET_PEDALS_RANGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_PEDALS_RANGE *>(to)->MergeFrom(
      static_cast<const SET_PEDALS_RANGE &>(from));
}


void SET_PEDALS_RANGE::MergeFrom(const SET_PEDALS_RANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_PEDALS_RANGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bound() != 0) {
    _internal_set_bound(from._internal_bound());
  }
  if (from._internal_pedal() != 0) {
    _internal_set_pedal(from._internal_pedal());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_PEDALS_RANGE::CopyFrom(const SET_PEDALS_RANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_PEDALS_RANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_PEDALS_RANGE::IsInitialized() const {
  return true;
}

void SET_PEDALS_RANGE::InternalSwap(SET_PEDALS_RANGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_PEDALS_RANGE, _inner_timestamp_)
      + sizeof(SET_PEDALS_RANGE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(SET_PEDALS_RANGE, bound_)>(
          reinterpret_cast<char*>(&bound_),
          reinterpret_cast<char*>(&other->bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_PEDALS_RANGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[18]);
}

// ===================================================================

class SET_STEERING_ANGLE_RANGE::_Internal {
 public:
};

SET_STEERING_ANGLE_RANGE::SET_STEERING_ANGLE_RANGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SET_STEERING_ANGLE_RANGE)
}
SET_STEERING_ANGLE_RANGE::SET_STEERING_ANGLE_RANGE(const SET_STEERING_ANGLE_RANGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&bound_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(bound_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_STEERING_ANGLE_RANGE)
}

inline void SET_STEERING_ANGLE_RANGE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bound_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(bound_));
}

SET_STEERING_ANGLE_RANGE::~SET_STEERING_ANGLE_RANGE() {
  // @@protoc_insertion_point(destructor:primary.SET_STEERING_ANGLE_RANGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SET_STEERING_ANGLE_RANGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_STEERING_ANGLE_RANGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_STEERING_ANGLE_RANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_STEERING_ANGLE_RANGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bound_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(bound_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_STEERING_ANGLE_RANGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Bound bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bound(static_cast<::primary::Bound>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_STEERING_ANGLE_RANGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_STEERING_ANGLE_RANGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Bound bound = 1;
  if (this->_internal_bound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bound(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_STEERING_ANGLE_RANGE)
  return target;
}

size_t SET_STEERING_ANGLE_RANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_STEERING_ANGLE_RANGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // .primary.Bound bound = 1;
  if (this->_internal_bound() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_bound());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_STEERING_ANGLE_RANGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_STEERING_ANGLE_RANGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_STEERING_ANGLE_RANGE::GetClassData() const { return &_class_data_; }

void SET_STEERING_ANGLE_RANGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_STEERING_ANGLE_RANGE *>(to)->MergeFrom(
      static_cast<const SET_STEERING_ANGLE_RANGE &>(from));
}


void SET_STEERING_ANGLE_RANGE::MergeFrom(const SET_STEERING_ANGLE_RANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_STEERING_ANGLE_RANGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_bound() != 0) {
    _internal_set_bound(from._internal_bound());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_STEERING_ANGLE_RANGE::CopyFrom(const SET_STEERING_ANGLE_RANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_STEERING_ANGLE_RANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_STEERING_ANGLE_RANGE::IsInitialized() const {
  return true;
}

void SET_STEERING_ANGLE_RANGE::InternalSwap(SET_STEERING_ANGLE_RANGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_STEERING_ANGLE_RANGE, bound_)
      + sizeof(SET_STEERING_ANGLE_RANGE::bound_)
      - PROTOBUF_FIELD_OFFSET(SET_STEERING_ANGLE_RANGE, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_STEERING_ANGLE_RANGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[19]);
}

// ===================================================================

class CAR_STATUS::_Internal {
 public:
};

CAR_STATUS::CAR_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.CAR_STATUS)
}
CAR_STATUS::CAR_STATUS(const CAR_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&inverter_l_, &from.inverter_l_,
    static_cast<size_t>(reinterpret_cast<char*>(&car_status_) -
    reinterpret_cast<char*>(&inverter_l_)) + sizeof(car_status_));
  // @@protoc_insertion_point(copy_constructor:primary.CAR_STATUS)
}

inline void CAR_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inverter_l_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&car_status_) -
    reinterpret_cast<char*>(&inverter_l_)) + sizeof(car_status_));
}

CAR_STATUS::~CAR_STATUS() {
  // @@protoc_insertion_point(destructor:primary.CAR_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CAR_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CAR_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAR_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.CAR_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&inverter_l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_status_) -
      reinterpret_cast<char*>(&inverter_l_)) + sizeof(car_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAR_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.InverterStatus inverter_l = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inverter_l(static_cast<::primary::InverterStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.InverterStatus inverter_r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inverter_r(static_cast<::primary::InverterStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.CarStatus car_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_car_status(static_cast<::primary::CarStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CAR_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.CAR_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.InverterStatus inverter_l = 1;
  if (this->_internal_inverter_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_inverter_l(), target);
  }

  // .primary.InverterStatus inverter_r = 2;
  if (this->_internal_inverter_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_inverter_r(), target);
  }

  // .primary.CarStatus car_status = 3;
  if (this->_internal_car_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_car_status(), target);
  }

  // uint64 _inner_timestamp = 4;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.CAR_STATUS)
  return target;
}

size_t CAR_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.CAR_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.InverterStatus inverter_l = 1;
  if (this->_internal_inverter_l() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_inverter_l());
  }

  // .primary.InverterStatus inverter_r = 2;
  if (this->_internal_inverter_r() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_inverter_r());
  }

  // uint64 _inner_timestamp = 4;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // .primary.CarStatus car_status = 3;
  if (this->_internal_car_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_car_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAR_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CAR_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAR_STATUS::GetClassData() const { return &_class_data_; }

void CAR_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CAR_STATUS *>(to)->MergeFrom(
      static_cast<const CAR_STATUS &>(from));
}


void CAR_STATUS::MergeFrom(const CAR_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.CAR_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_inverter_l() != 0) {
    _internal_set_inverter_l(from._internal_inverter_l());
  }
  if (from._internal_inverter_r() != 0) {
    _internal_set_inverter_r(from._internal_inverter_r());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_car_status() != 0) {
    _internal_set_car_status(from._internal_car_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAR_STATUS::CopyFrom(const CAR_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.CAR_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAR_STATUS::IsInitialized() const {
  return true;
}

void CAR_STATUS::InternalSwap(CAR_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAR_STATUS, car_status_)
      + sizeof(CAR_STATUS::car_status_)
      - PROTOBUF_FIELD_OFFSET(CAR_STATUS, inverter_l_)>(
          reinterpret_cast<char*>(&inverter_l_),
          reinterpret_cast<char*>(&other->inverter_l_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAR_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[20]);
}

// ===================================================================

class DAS_ERRORS::_Internal {
 public:
};

DAS_ERRORS::DAS_ERRORS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.DAS_ERRORS)
}
DAS_ERRORS::DAS_ERRORS(const DAS_ERRORS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&das_error_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(das_error_));
  // @@protoc_insertion_point(copy_constructor:primary.DAS_ERRORS)
}

inline void DAS_ERRORS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&das_error_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(das_error_));
}

DAS_ERRORS::~DAS_ERRORS() {
  // @@protoc_insertion_point(destructor:primary.DAS_ERRORS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DAS_ERRORS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DAS_ERRORS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DAS_ERRORS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.DAS_ERRORS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&das_error_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(das_error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DAS_ERRORS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 das_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          das_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DAS_ERRORS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.DAS_ERRORS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 das_error = 1;
  if (this->_internal_das_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_das_error(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.DAS_ERRORS)
  return target;
}

size_t DAS_ERRORS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.DAS_ERRORS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // uint32 das_error = 1;
  if (this->_internal_das_error() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_das_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DAS_ERRORS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DAS_ERRORS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DAS_ERRORS::GetClassData() const { return &_class_data_; }

void DAS_ERRORS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DAS_ERRORS *>(to)->MergeFrom(
      static_cast<const DAS_ERRORS &>(from));
}


void DAS_ERRORS::MergeFrom(const DAS_ERRORS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.DAS_ERRORS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_das_error() != 0) {
    _internal_set_das_error(from._internal_das_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DAS_ERRORS::CopyFrom(const DAS_ERRORS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.DAS_ERRORS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAS_ERRORS::IsInitialized() const {
  return true;
}

void DAS_ERRORS::InternalSwap(DAS_ERRORS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DAS_ERRORS, das_error_)
      + sizeof(DAS_ERRORS::das_error_)
      - PROTOBUF_FIELD_OFFSET(DAS_ERRORS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DAS_ERRORS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[21]);
}

// ===================================================================

class LV_CURRENT::_Internal {
 public:
};

LV_CURRENT::LV_CURRENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.LV_CURRENT)
}
LV_CURRENT::LV_CURRENT(const LV_CURRENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(current_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_CURRENT)
}

inline void LV_CURRENT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(current_));
}

LV_CURRENT::~LV_CURRENT() {
  // @@protoc_insertion_point(destructor:primary.LV_CURRENT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LV_CURRENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LV_CURRENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LV_CURRENT::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_CURRENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(current_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_CURRENT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LV_CURRENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_CURRENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_CURRENT)
  return target;
}

size_t LV_CURRENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_CURRENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LV_CURRENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LV_CURRENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LV_CURRENT::GetClassData() const { return &_class_data_; }

void LV_CURRENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LV_CURRENT *>(to)->MergeFrom(
      static_cast<const LV_CURRENT &>(from));
}


void LV_CURRENT::MergeFrom(const LV_CURRENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_CURRENT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_current() != 0) {
    _internal_set_current(from._internal_current());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LV_CURRENT::CopyFrom(const LV_CURRENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_CURRENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_CURRENT::IsInitialized() const {
  return true;
}

void LV_CURRENT::InternalSwap(LV_CURRENT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_CURRENT, current_)
      + sizeof(LV_CURRENT::current_)
      - PROTOBUF_FIELD_OFFSET(LV_CURRENT, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_CURRENT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[22]);
}

// ===================================================================

class LV_VOLTAGE::_Internal {
 public:
};

LV_VOLTAGE::LV_VOLTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.LV_VOLTAGE)
}
LV_VOLTAGE::LV_VOLTAGE(const LV_VOLTAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&voltage_1_, &from.voltage_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&voltage_1_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_VOLTAGE)
}

inline void LV_VOLTAGE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&voltage_1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&voltage_1_)) + sizeof(_inner_timestamp_));
}

LV_VOLTAGE::~LV_VOLTAGE() {
  // @@protoc_insertion_point(destructor:primary.LV_VOLTAGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LV_VOLTAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LV_VOLTAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LV_VOLTAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_VOLTAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&voltage_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&voltage_1_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_VOLTAGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 voltage_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          voltage_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          voltage_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          voltage_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          voltage_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LV_VOLTAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_VOLTAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 voltage_1 = 1;
  if (this->_internal_voltage_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_voltage_1(), target);
  }

  // uint32 voltage_2 = 2;
  if (this->_internal_voltage_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_voltage_2(), target);
  }

  // uint32 voltage_3 = 3;
  if (this->_internal_voltage_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_voltage_3(), target);
  }

  // uint32 voltage_4 = 4;
  if (this->_internal_voltage_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_voltage_4(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_VOLTAGE)
  return target;
}

size_t LV_VOLTAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_VOLTAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 voltage_1 = 1;
  if (this->_internal_voltage_1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_1());
  }

  // uint32 voltage_2 = 2;
  if (this->_internal_voltage_2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_2());
  }

  // uint32 voltage_3 = 3;
  if (this->_internal_voltage_3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_3());
  }

  // uint32 voltage_4 = 4;
  if (this->_internal_voltage_4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_4());
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LV_VOLTAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LV_VOLTAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LV_VOLTAGE::GetClassData() const { return &_class_data_; }

void LV_VOLTAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LV_VOLTAGE *>(to)->MergeFrom(
      static_cast<const LV_VOLTAGE &>(from));
}


void LV_VOLTAGE::MergeFrom(const LV_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_voltage_1() != 0) {
    _internal_set_voltage_1(from._internal_voltage_1());
  }
  if (from._internal_voltage_2() != 0) {
    _internal_set_voltage_2(from._internal_voltage_2());
  }
  if (from._internal_voltage_3() != 0) {
    _internal_set_voltage_3(from._internal_voltage_3());
  }
  if (from._internal_voltage_4() != 0) {
    _internal_set_voltage_4(from._internal_voltage_4());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LV_VOLTAGE::CopyFrom(const LV_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_VOLTAGE::IsInitialized() const {
  return true;
}

void LV_VOLTAGE::InternalSwap(LV_VOLTAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_VOLTAGE, _inner_timestamp_)
      + sizeof(LV_VOLTAGE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(LV_VOLTAGE, voltage_1_)>(
          reinterpret_cast<char*>(&voltage_1_),
          reinterpret_cast<char*>(&other->voltage_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_VOLTAGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[23]);
}

// ===================================================================

class LV_TOTAL_VOLTAGE::_Internal {
 public:
};

LV_TOTAL_VOLTAGE::LV_TOTAL_VOLTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.LV_TOTAL_VOLTAGE)
}
LV_TOTAL_VOLTAGE::LV_TOTAL_VOLTAGE(const LV_TOTAL_VOLTAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_voltage_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(total_voltage_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_TOTAL_VOLTAGE)
}

inline void LV_TOTAL_VOLTAGE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_voltage_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(total_voltage_));
}

LV_TOTAL_VOLTAGE::~LV_TOTAL_VOLTAGE() {
  // @@protoc_insertion_point(destructor:primary.LV_TOTAL_VOLTAGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LV_TOTAL_VOLTAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LV_TOTAL_VOLTAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LV_TOTAL_VOLTAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_TOTAL_VOLTAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_voltage_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(total_voltage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_TOTAL_VOLTAGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 total_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          total_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LV_TOTAL_VOLTAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_TOTAL_VOLTAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_voltage = 1;
  if (this->_internal_total_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_voltage(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_TOTAL_VOLTAGE)
  return target;
}

size_t LV_TOTAL_VOLTAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_TOTAL_VOLTAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // uint32 total_voltage = 1;
  if (this->_internal_total_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_voltage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LV_TOTAL_VOLTAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LV_TOTAL_VOLTAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LV_TOTAL_VOLTAGE::GetClassData() const { return &_class_data_; }

void LV_TOTAL_VOLTAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LV_TOTAL_VOLTAGE *>(to)->MergeFrom(
      static_cast<const LV_TOTAL_VOLTAGE &>(from));
}


void LV_TOTAL_VOLTAGE::MergeFrom(const LV_TOTAL_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_TOTAL_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_total_voltage() != 0) {
    _internal_set_total_voltage(from._internal_total_voltage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LV_TOTAL_VOLTAGE::CopyFrom(const LV_TOTAL_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_TOTAL_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_TOTAL_VOLTAGE::IsInitialized() const {
  return true;
}

void LV_TOTAL_VOLTAGE::InternalSwap(LV_TOTAL_VOLTAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_TOTAL_VOLTAGE, total_voltage_)
      + sizeof(LV_TOTAL_VOLTAGE::total_voltage_)
      - PROTOBUF_FIELD_OFFSET(LV_TOTAL_VOLTAGE, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_TOTAL_VOLTAGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[24]);
}

// ===================================================================

class LV_TEMPERATURE::_Internal {
 public:
};

LV_TEMPERATURE::LV_TEMPERATURE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.LV_TEMPERATURE)
}
LV_TEMPERATURE::LV_TEMPERATURE(const LV_TEMPERATURE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bp_temperature_1_, &from.bp_temperature_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&bp_temperature_1_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_TEMPERATURE)
}

inline void LV_TEMPERATURE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bp_temperature_1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&bp_temperature_1_)) + sizeof(_inner_timestamp_));
}

LV_TEMPERATURE::~LV_TEMPERATURE() {
  // @@protoc_insertion_point(destructor:primary.LV_TEMPERATURE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LV_TEMPERATURE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LV_TEMPERATURE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LV_TEMPERATURE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_TEMPERATURE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bp_temperature_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&bp_temperature_1_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_TEMPERATURE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 bp_temperature_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bp_temperature_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bp_temperature_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bp_temperature_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dcdc12_temperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          dcdc12_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dcdc24_temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          dcdc24_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LV_TEMPERATURE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_TEMPERATURE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bp_temperature_1 = 1;
  if (this->_internal_bp_temperature_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bp_temperature_1(), target);
  }

  // uint32 bp_temperature_2 = 2;
  if (this->_internal_bp_temperature_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bp_temperature_2(), target);
  }

  // uint32 dcdc12_temperature = 3;
  if (this->_internal_dcdc12_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dcdc12_temperature(), target);
  }

  // uint32 dcdc24_temperature = 4;
  if (this->_internal_dcdc24_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dcdc24_temperature(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_TEMPERATURE)
  return target;
}

size_t LV_TEMPERATURE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_TEMPERATURE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bp_temperature_1 = 1;
  if (this->_internal_bp_temperature_1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bp_temperature_1());
  }

  // uint32 bp_temperature_2 = 2;
  if (this->_internal_bp_temperature_2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bp_temperature_2());
  }

  // uint32 dcdc12_temperature = 3;
  if (this->_internal_dcdc12_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dcdc12_temperature());
  }

  // uint32 dcdc24_temperature = 4;
  if (this->_internal_dcdc24_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dcdc24_temperature());
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LV_TEMPERATURE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LV_TEMPERATURE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LV_TEMPERATURE::GetClassData() const { return &_class_data_; }

void LV_TEMPERATURE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LV_TEMPERATURE *>(to)->MergeFrom(
      static_cast<const LV_TEMPERATURE &>(from));
}


void LV_TEMPERATURE::MergeFrom(const LV_TEMPERATURE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_TEMPERATURE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bp_temperature_1() != 0) {
    _internal_set_bp_temperature_1(from._internal_bp_temperature_1());
  }
  if (from._internal_bp_temperature_2() != 0) {
    _internal_set_bp_temperature_2(from._internal_bp_temperature_2());
  }
  if (from._internal_dcdc12_temperature() != 0) {
    _internal_set_dcdc12_temperature(from._internal_dcdc12_temperature());
  }
  if (from._internal_dcdc24_temperature() != 0) {
    _internal_set_dcdc24_temperature(from._internal_dcdc24_temperature());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LV_TEMPERATURE::CopyFrom(const LV_TEMPERATURE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_TEMPERATURE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_TEMPERATURE::IsInitialized() const {
  return true;
}

void LV_TEMPERATURE::InternalSwap(LV_TEMPERATURE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_TEMPERATURE, _inner_timestamp_)
      + sizeof(LV_TEMPERATURE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(LV_TEMPERATURE, bp_temperature_1_)>(
          reinterpret_cast<char*>(&bp_temperature_1_),
          reinterpret_cast<char*>(&other->bp_temperature_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_TEMPERATURE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[25]);
}

// ===================================================================

class COOLING_STATUS::_Internal {
 public:
};

COOLING_STATUS::COOLING_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.COOLING_STATUS)
}
COOLING_STATUS::COOLING_STATUS(const COOLING_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hv_fan_speed_, &from.hv_fan_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&pump_speed_) -
    reinterpret_cast<char*>(&hv_fan_speed_)) + sizeof(pump_speed_));
  // @@protoc_insertion_point(copy_constructor:primary.COOLING_STATUS)
}

inline void COOLING_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hv_fan_speed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pump_speed_) -
    reinterpret_cast<char*>(&hv_fan_speed_)) + sizeof(pump_speed_));
}

COOLING_STATUS::~COOLING_STATUS() {
  // @@protoc_insertion_point(destructor:primary.COOLING_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void COOLING_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void COOLING_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void COOLING_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.COOLING_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hv_fan_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pump_speed_) -
      reinterpret_cast<char*>(&hv_fan_speed_)) + sizeof(pump_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* COOLING_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 hv_fan_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hv_fan_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lv_fan_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lv_fan_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pump_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pump_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* COOLING_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.COOLING_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hv_fan_speed = 1;
  if (this->_internal_hv_fan_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hv_fan_speed(), target);
  }

  // uint32 lv_fan_speed = 2;
  if (this->_internal_lv_fan_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lv_fan_speed(), target);
  }

  // uint32 pump_speed = 3;
  if (this->_internal_pump_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pump_speed(), target);
  }

  // uint64 _inner_timestamp = 4;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.COOLING_STATUS)
  return target;
}

size_t COOLING_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.COOLING_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hv_fan_speed = 1;
  if (this->_internal_hv_fan_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hv_fan_speed());
  }

  // uint32 lv_fan_speed = 2;
  if (this->_internal_lv_fan_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lv_fan_speed());
  }

  // uint64 _inner_timestamp = 4;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // uint32 pump_speed = 3;
  if (this->_internal_pump_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pump_speed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData COOLING_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    COOLING_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*COOLING_STATUS::GetClassData() const { return &_class_data_; }

void COOLING_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<COOLING_STATUS *>(to)->MergeFrom(
      static_cast<const COOLING_STATUS &>(from));
}


void COOLING_STATUS::MergeFrom(const COOLING_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.COOLING_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hv_fan_speed() != 0) {
    _internal_set_hv_fan_speed(from._internal_hv_fan_speed());
  }
  if (from._internal_lv_fan_speed() != 0) {
    _internal_set_lv_fan_speed(from._internal_lv_fan_speed());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_pump_speed() != 0) {
    _internal_set_pump_speed(from._internal_pump_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void COOLING_STATUS::CopyFrom(const COOLING_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.COOLING_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COOLING_STATUS::IsInitialized() const {
  return true;
}

void COOLING_STATUS::InternalSwap(COOLING_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(COOLING_STATUS, pump_speed_)
      + sizeof(COOLING_STATUS::pump_speed_)
      - PROTOBUF_FIELD_OFFSET(COOLING_STATUS, hv_fan_speed_)>(
          reinterpret_cast<char*>(&hv_fan_speed_),
          reinterpret_cast<char*>(&other->hv_fan_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata COOLING_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[26]);
}

// ===================================================================

class SET_RADIATOR_SPEED::_Internal {
 public:
};

SET_RADIATOR_SPEED::SET_RADIATOR_SPEED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SET_RADIATOR_SPEED)
}
SET_RADIATOR_SPEED::SET_RADIATOR_SPEED(const SET_RADIATOR_SPEED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&car_radiators_speed_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(car_radiators_speed_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_RADIATOR_SPEED)
}

inline void SET_RADIATOR_SPEED::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&car_radiators_speed_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(car_radiators_speed_));
}

SET_RADIATOR_SPEED::~SET_RADIATOR_SPEED() {
  // @@protoc_insertion_point(destructor:primary.SET_RADIATOR_SPEED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SET_RADIATOR_SPEED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_RADIATOR_SPEED::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_RADIATOR_SPEED::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_RADIATOR_SPEED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_radiators_speed_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(car_radiators_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_RADIATOR_SPEED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Cooling car_radiators_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_car_radiators_speed(static_cast<::primary::Cooling>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_RADIATOR_SPEED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_RADIATOR_SPEED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Cooling car_radiators_speed = 1;
  if (this->_internal_car_radiators_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_car_radiators_speed(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_RADIATOR_SPEED)
  return target;
}

size_t SET_RADIATOR_SPEED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_RADIATOR_SPEED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // .primary.Cooling car_radiators_speed = 1;
  if (this->_internal_car_radiators_speed() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_car_radiators_speed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_RADIATOR_SPEED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_RADIATOR_SPEED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_RADIATOR_SPEED::GetClassData() const { return &_class_data_; }

void SET_RADIATOR_SPEED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_RADIATOR_SPEED *>(to)->MergeFrom(
      static_cast<const SET_RADIATOR_SPEED &>(from));
}


void SET_RADIATOR_SPEED::MergeFrom(const SET_RADIATOR_SPEED& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_RADIATOR_SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_car_radiators_speed() != 0) {
    _internal_set_car_radiators_speed(from._internal_car_radiators_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_RADIATOR_SPEED::CopyFrom(const SET_RADIATOR_SPEED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_RADIATOR_SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_RADIATOR_SPEED::IsInitialized() const {
  return true;
}

void SET_RADIATOR_SPEED::InternalSwap(SET_RADIATOR_SPEED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_RADIATOR_SPEED, car_radiators_speed_)
      + sizeof(SET_RADIATOR_SPEED::car_radiators_speed_)
      - PROTOBUF_FIELD_OFFSET(SET_RADIATOR_SPEED, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_RADIATOR_SPEED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[27]);
}

// ===================================================================

class SET_PUMPS_POWER::_Internal {
 public:
};

SET_PUMPS_POWER::SET_PUMPS_POWER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SET_PUMPS_POWER)
}
SET_PUMPS_POWER::SET_PUMPS_POWER(const SET_PUMPS_POWER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&car_pumps_power_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(car_pumps_power_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_PUMPS_POWER)
}

inline void SET_PUMPS_POWER::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&car_pumps_power_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(car_pumps_power_));
}

SET_PUMPS_POWER::~SET_PUMPS_POWER() {
  // @@protoc_insertion_point(destructor:primary.SET_PUMPS_POWER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SET_PUMPS_POWER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_PUMPS_POWER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_PUMPS_POWER::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_PUMPS_POWER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_pumps_power_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(car_pumps_power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_PUMPS_POWER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Cooling car_pumps_power = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_car_pumps_power(static_cast<::primary::Cooling>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_PUMPS_POWER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_PUMPS_POWER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Cooling car_pumps_power = 1;
  if (this->_internal_car_pumps_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_car_pumps_power(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_PUMPS_POWER)
  return target;
}

size_t SET_PUMPS_POWER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_PUMPS_POWER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // .primary.Cooling car_pumps_power = 1;
  if (this->_internal_car_pumps_power() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_car_pumps_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_PUMPS_POWER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_PUMPS_POWER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_PUMPS_POWER::GetClassData() const { return &_class_data_; }

void SET_PUMPS_POWER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_PUMPS_POWER *>(to)->MergeFrom(
      static_cast<const SET_PUMPS_POWER &>(from));
}


void SET_PUMPS_POWER::MergeFrom(const SET_PUMPS_POWER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_PUMPS_POWER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_car_pumps_power() != 0) {
    _internal_set_car_pumps_power(from._internal_car_pumps_power());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_PUMPS_POWER::CopyFrom(const SET_PUMPS_POWER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_PUMPS_POWER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_PUMPS_POWER::IsInitialized() const {
  return true;
}

void SET_PUMPS_POWER::InternalSwap(SET_PUMPS_POWER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_PUMPS_POWER, car_pumps_power_)
      + sizeof(SET_PUMPS_POWER::car_pumps_power_)
      - PROTOBUF_FIELD_OFFSET(SET_PUMPS_POWER, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_PUMPS_POWER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[28]);
}

// ===================================================================

class MARKER::_Internal {
 public:
};

MARKER::MARKER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.MARKER)
}
MARKER::MARKER(const MARKER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.MARKER)
}

inline void MARKER::SharedCtor() {
_inner_timestamp_ = uint64_t{0u};
}

MARKER::~MARKER() {
  // @@protoc_insertion_point(destructor:primary.MARKER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MARKER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MARKER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MARKER::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.MARKER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MARKER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MARKER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.MARKER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.MARKER)
  return target;
}

size_t MARKER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.MARKER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MARKER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MARKER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MARKER::GetClassData() const { return &_class_data_; }

void MARKER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MARKER *>(to)->MergeFrom(
      static_cast<const MARKER &>(from));
}


void MARKER::MergeFrom(const MARKER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.MARKER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MARKER::CopyFrom(const MARKER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.MARKER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MARKER::IsInitialized() const {
  return true;
}

void MARKER::InternalSwap(MARKER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MARKER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[29]);
}

// ===================================================================

class HV_CELLS_VOLTAGE::_Internal {
 public:
};

HV_CELLS_VOLTAGE::HV_CELLS_VOLTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HV_CELLS_VOLTAGE)
}
HV_CELLS_VOLTAGE::HV_CELLS_VOLTAGE(const HV_CELLS_VOLTAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&voltage_0_, &from.voltage_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&voltage_0_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CELLS_VOLTAGE)
}

inline void HV_CELLS_VOLTAGE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&voltage_0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&voltage_0_)) + sizeof(_inner_timestamp_));
}

HV_CELLS_VOLTAGE::~HV_CELLS_VOLTAGE() {
  // @@protoc_insertion_point(destructor:primary.HV_CELLS_VOLTAGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HV_CELLS_VOLTAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_CELLS_VOLTAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_CELLS_VOLTAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CELLS_VOLTAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&voltage_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&voltage_0_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CELLS_VOLTAGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 voltage_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          voltage_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          voltage_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          voltage_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 start_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_CELLS_VOLTAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CELLS_VOLTAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 voltage_0 = 1;
  if (this->_internal_voltage_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_voltage_0(), target);
  }

  // uint32 voltage_1 = 2;
  if (this->_internal_voltage_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_voltage_1(), target);
  }

  // uint32 voltage_2 = 3;
  if (this->_internal_voltage_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_voltage_2(), target);
  }

  // uint32 start_index = 4;
  if (this->_internal_start_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start_index(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CELLS_VOLTAGE)
  return target;
}

size_t HV_CELLS_VOLTAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CELLS_VOLTAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 voltage_0 = 1;
  if (this->_internal_voltage_0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_0());
  }

  // uint32 voltage_1 = 2;
  if (this->_internal_voltage_1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_1());
  }

  // uint32 voltage_2 = 3;
  if (this->_internal_voltage_2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_2());
  }

  // uint32 start_index = 4;
  if (this->_internal_start_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_index());
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_CELLS_VOLTAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_CELLS_VOLTAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_CELLS_VOLTAGE::GetClassData() const { return &_class_data_; }

void HV_CELLS_VOLTAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_CELLS_VOLTAGE *>(to)->MergeFrom(
      static_cast<const HV_CELLS_VOLTAGE &>(from));
}


void HV_CELLS_VOLTAGE::MergeFrom(const HV_CELLS_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CELLS_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_voltage_0() != 0) {
    _internal_set_voltage_0(from._internal_voltage_0());
  }
  if (from._internal_voltage_1() != 0) {
    _internal_set_voltage_1(from._internal_voltage_1());
  }
  if (from._internal_voltage_2() != 0) {
    _internal_set_voltage_2(from._internal_voltage_2());
  }
  if (from._internal_start_index() != 0) {
    _internal_set_start_index(from._internal_start_index());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_CELLS_VOLTAGE::CopyFrom(const HV_CELLS_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CELLS_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CELLS_VOLTAGE::IsInitialized() const {
  return true;
}

void HV_CELLS_VOLTAGE::InternalSwap(HV_CELLS_VOLTAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CELLS_VOLTAGE, _inner_timestamp_)
      + sizeof(HV_CELLS_VOLTAGE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_CELLS_VOLTAGE, voltage_0_)>(
          reinterpret_cast<char*>(&voltage_0_),
          reinterpret_cast<char*>(&other->voltage_0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CELLS_VOLTAGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[30]);
}

// ===================================================================

class HV_CELLS_TEMP::_Internal {
 public:
};

HV_CELLS_TEMP::HV_CELLS_TEMP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HV_CELLS_TEMP)
}
HV_CELLS_TEMP::HV_CELLS_TEMP(const HV_CELLS_TEMP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CELLS_TEMP)
}

inline void HV_CELLS_TEMP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(_inner_timestamp_));
}

HV_CELLS_TEMP::~HV_CELLS_TEMP() {
  // @@protoc_insertion_point(destructor:primary.HV_CELLS_TEMP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HV_CELLS_TEMP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_CELLS_TEMP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_CELLS_TEMP::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CELLS_TEMP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CELLS_TEMP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          temp_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          temp_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          temp_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          temp_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          temp_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          temp_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          temp_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_CELLS_TEMP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CELLS_TEMP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->_internal_start_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_index(), target);
  }

  // uint32 temp_0 = 2;
  if (this->_internal_temp_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_temp_0(), target);
  }

  // uint32 temp_1 = 3;
  if (this->_internal_temp_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_temp_1(), target);
  }

  // uint32 temp_2 = 4;
  if (this->_internal_temp_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_temp_2(), target);
  }

  // uint32 temp_3 = 5;
  if (this->_internal_temp_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_temp_3(), target);
  }

  // uint32 temp_4 = 6;
  if (this->_internal_temp_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_temp_4(), target);
  }

  // uint32 temp_5 = 7;
  if (this->_internal_temp_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_temp_5(), target);
  }

  // uint32 temp_6 = 8;
  if (this->_internal_temp_6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_temp_6(), target);
  }

  // uint64 _inner_timestamp = 9;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CELLS_TEMP)
  return target;
}

size_t HV_CELLS_TEMP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CELLS_TEMP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->_internal_start_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_index());
  }

  // uint32 temp_0 = 2;
  if (this->_internal_temp_0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_0());
  }

  // uint32 temp_1 = 3;
  if (this->_internal_temp_1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_1());
  }

  // uint32 temp_2 = 4;
  if (this->_internal_temp_2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_2());
  }

  // uint32 temp_3 = 5;
  if (this->_internal_temp_3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_3());
  }

  // uint32 temp_4 = 6;
  if (this->_internal_temp_4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_4());
  }

  // uint32 temp_5 = 7;
  if (this->_internal_temp_5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_5());
  }

  // uint32 temp_6 = 8;
  if (this->_internal_temp_6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_6());
  }

  // uint64 _inner_timestamp = 9;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_CELLS_TEMP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_CELLS_TEMP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_CELLS_TEMP::GetClassData() const { return &_class_data_; }

void HV_CELLS_TEMP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_CELLS_TEMP *>(to)->MergeFrom(
      static_cast<const HV_CELLS_TEMP &>(from));
}


void HV_CELLS_TEMP::MergeFrom(const HV_CELLS_TEMP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CELLS_TEMP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_index() != 0) {
    _internal_set_start_index(from._internal_start_index());
  }
  if (from._internal_temp_0() != 0) {
    _internal_set_temp_0(from._internal_temp_0());
  }
  if (from._internal_temp_1() != 0) {
    _internal_set_temp_1(from._internal_temp_1());
  }
  if (from._internal_temp_2() != 0) {
    _internal_set_temp_2(from._internal_temp_2());
  }
  if (from._internal_temp_3() != 0) {
    _internal_set_temp_3(from._internal_temp_3());
  }
  if (from._internal_temp_4() != 0) {
    _internal_set_temp_4(from._internal_temp_4());
  }
  if (from._internal_temp_5() != 0) {
    _internal_set_temp_5(from._internal_temp_5());
  }
  if (from._internal_temp_6() != 0) {
    _internal_set_temp_6(from._internal_temp_6());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_CELLS_TEMP::CopyFrom(const HV_CELLS_TEMP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CELLS_TEMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CELLS_TEMP::IsInitialized() const {
  return true;
}

void HV_CELLS_TEMP::InternalSwap(HV_CELLS_TEMP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CELLS_TEMP, _inner_timestamp_)
      + sizeof(HV_CELLS_TEMP::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_CELLS_TEMP, start_index_)>(
          reinterpret_cast<char*>(&start_index_),
          reinterpret_cast<char*>(&other->start_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CELLS_TEMP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[31]);
}

// ===================================================================

class HV_CELL_BALANCING_STATUS::_Internal {
 public:
};

HV_CELL_BALANCING_STATUS::HV_CELL_BALANCING_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HV_CELL_BALANCING_STATUS)
}
HV_CELL_BALANCING_STATUS::HV_CELL_BALANCING_STATUS(const HV_CELL_BALANCING_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&balancing_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(balancing_status_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CELL_BALANCING_STATUS)
}

inline void HV_CELL_BALANCING_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&balancing_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(balancing_status_));
}

HV_CELL_BALANCING_STATUS::~HV_CELL_BALANCING_STATUS() {
  // @@protoc_insertion_point(destructor:primary.HV_CELL_BALANCING_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HV_CELL_BALANCING_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_CELL_BALANCING_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_CELL_BALANCING_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CELL_BALANCING_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balancing_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(balancing_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CELL_BALANCING_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Toggle balancing_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_balancing_status(static_cast<::primary::Toggle>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_CELL_BALANCING_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CELL_BALANCING_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle balancing_status = 1;
  if (this->_internal_balancing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_balancing_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CELL_BALANCING_STATUS)
  return target;
}

size_t HV_CELL_BALANCING_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CELL_BALANCING_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // .primary.Toggle balancing_status = 1;
  if (this->_internal_balancing_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_balancing_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_CELL_BALANCING_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_CELL_BALANCING_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_CELL_BALANCING_STATUS::GetClassData() const { return &_class_data_; }

void HV_CELL_BALANCING_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_CELL_BALANCING_STATUS *>(to)->MergeFrom(
      static_cast<const HV_CELL_BALANCING_STATUS &>(from));
}


void HV_CELL_BALANCING_STATUS::MergeFrom(const HV_CELL_BALANCING_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CELL_BALANCING_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_balancing_status() != 0) {
    _internal_set_balancing_status(from._internal_balancing_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_CELL_BALANCING_STATUS::CopyFrom(const HV_CELL_BALANCING_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CELL_BALANCING_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CELL_BALANCING_STATUS::IsInitialized() const {
  return true;
}

void HV_CELL_BALANCING_STATUS::InternalSwap(HV_CELL_BALANCING_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CELL_BALANCING_STATUS, balancing_status_)
      + sizeof(HV_CELL_BALANCING_STATUS::balancing_status_)
      - PROTOBUF_FIELD_OFFSET(HV_CELL_BALANCING_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CELL_BALANCING_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[32]);
}

// ===================================================================

class SET_CELL_BALANCING_STATUS::_Internal {
 public:
};

SET_CELL_BALANCING_STATUS::SET_CELL_BALANCING_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SET_CELL_BALANCING_STATUS)
}
SET_CELL_BALANCING_STATUS::SET_CELL_BALANCING_STATUS(const SET_CELL_BALANCING_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_balancing_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(set_balancing_status_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_CELL_BALANCING_STATUS)
}

inline void SET_CELL_BALANCING_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&set_balancing_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(set_balancing_status_));
}

SET_CELL_BALANCING_STATUS::~SET_CELL_BALANCING_STATUS() {
  // @@protoc_insertion_point(destructor:primary.SET_CELL_BALANCING_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SET_CELL_BALANCING_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_CELL_BALANCING_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_CELL_BALANCING_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_CELL_BALANCING_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_balancing_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(set_balancing_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_CELL_BALANCING_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Toggle set_balancing_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_set_balancing_status(static_cast<::primary::Toggle>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_CELL_BALANCING_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_CELL_BALANCING_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle set_balancing_status = 1;
  if (this->_internal_set_balancing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_set_balancing_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_CELL_BALANCING_STATUS)
  return target;
}

size_t SET_CELL_BALANCING_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_CELL_BALANCING_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // .primary.Toggle set_balancing_status = 1;
  if (this->_internal_set_balancing_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_set_balancing_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_CELL_BALANCING_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_CELL_BALANCING_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_CELL_BALANCING_STATUS::GetClassData() const { return &_class_data_; }

void SET_CELL_BALANCING_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_CELL_BALANCING_STATUS *>(to)->MergeFrom(
      static_cast<const SET_CELL_BALANCING_STATUS &>(from));
}


void SET_CELL_BALANCING_STATUS::MergeFrom(const SET_CELL_BALANCING_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_CELL_BALANCING_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_set_balancing_status() != 0) {
    _internal_set_set_balancing_status(from._internal_set_balancing_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_CELL_BALANCING_STATUS::CopyFrom(const SET_CELL_BALANCING_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_CELL_BALANCING_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_CELL_BALANCING_STATUS::IsInitialized() const {
  return true;
}

void SET_CELL_BALANCING_STATUS::InternalSwap(SET_CELL_BALANCING_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_CELL_BALANCING_STATUS, set_balancing_status_)
      + sizeof(SET_CELL_BALANCING_STATUS::set_balancing_status_)
      - PROTOBUF_FIELD_OFFSET(SET_CELL_BALANCING_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_CELL_BALANCING_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[33]);
}

// ===================================================================

class HANDCART_STATUS::_Internal {
 public:
};

HANDCART_STATUS::HANDCART_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HANDCART_STATUS)
}
HANDCART_STATUS::HANDCART_STATUS(const HANDCART_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(connected_));
  // @@protoc_insertion_point(copy_constructor:primary.HANDCART_STATUS)
}

inline void HANDCART_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_inner_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(connected_));
}

HANDCART_STATUS::~HANDCART_STATUS() {
  // @@protoc_insertion_point(destructor:primary.HANDCART_STATUS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HANDCART_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HANDCART_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HANDCART_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HANDCART_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connected_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(connected_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HANDCART_STATUS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool connected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HANDCART_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HANDCART_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connected = 1;
  if (this->_internal_connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_connected(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HANDCART_STATUS)
  return target;
}

size_t HANDCART_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HANDCART_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // bool connected = 1;
  if (this->_internal_connected() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HANDCART_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HANDCART_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HANDCART_STATUS::GetClassData() const { return &_class_data_; }

void HANDCART_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HANDCART_STATUS *>(to)->MergeFrom(
      static_cast<const HANDCART_STATUS &>(from));
}


void HANDCART_STATUS::MergeFrom(const HANDCART_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HANDCART_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HANDCART_STATUS::CopyFrom(const HANDCART_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HANDCART_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HANDCART_STATUS::IsInitialized() const {
  return true;
}

void HANDCART_STATUS::InternalSwap(HANDCART_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HANDCART_STATUS, connected_)
      + sizeof(HANDCART_STATUS::connected_)
      - PROTOBUF_FIELD_OFFSET(HANDCART_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HANDCART_STATUS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[34]);
}

// ===================================================================

class SPEED::_Internal {
 public:
};

SPEED::SPEED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SPEED)
}
SPEED::SPEED(const SPEED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&encoder_r_, &from.encoder_r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&encoder_r_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SPEED)
}

inline void SPEED::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encoder_r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&encoder_r_)) + sizeof(_inner_timestamp_));
}

SPEED::~SPEED() {
  // @@protoc_insertion_point(destructor:primary.SPEED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SPEED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SPEED::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SPEED::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SPEED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&encoder_r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&encoder_r_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SPEED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 encoder_r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          encoder_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 encoder_l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          encoder_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inverter_r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          inverter_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inverter_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          inverter_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SPEED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SPEED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 encoder_r = 1;
  if (this->_internal_encoder_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_encoder_r(), target);
  }

  // uint32 encoder_l = 2;
  if (this->_internal_encoder_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_encoder_l(), target);
  }

  // uint32 inverter_r = 3;
  if (this->_internal_inverter_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inverter_r(), target);
  }

  // uint32 inverter_l = 4;
  if (this->_internal_inverter_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_inverter_l(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SPEED)
  return target;
}

size_t SPEED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SPEED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 encoder_r = 1;
  if (this->_internal_encoder_r() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_encoder_r());
  }

  // uint32 encoder_l = 2;
  if (this->_internal_encoder_l() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_encoder_l());
  }

  // uint32 inverter_r = 3;
  if (this->_internal_inverter_r() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inverter_r());
  }

  // uint32 inverter_l = 4;
  if (this->_internal_inverter_l() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inverter_l());
  }

  // uint64 _inner_timestamp = 5;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SPEED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SPEED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SPEED::GetClassData() const { return &_class_data_; }

void SPEED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SPEED *>(to)->MergeFrom(
      static_cast<const SPEED &>(from));
}


void SPEED::MergeFrom(const SPEED& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_encoder_r() != 0) {
    _internal_set_encoder_r(from._internal_encoder_r());
  }
  if (from._internal_encoder_l() != 0) {
    _internal_set_encoder_l(from._internal_encoder_l());
  }
  if (from._internal_inverter_r() != 0) {
    _internal_set_inverter_r(from._internal_inverter_r());
  }
  if (from._internal_inverter_l() != 0) {
    _internal_set_inverter_l(from._internal_inverter_l());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SPEED::CopyFrom(const SPEED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPEED::IsInitialized() const {
  return true;
}

void SPEED::InternalSwap(SPEED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SPEED, _inner_timestamp_)
      + sizeof(SPEED::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(SPEED, encoder_r_)>(
          reinterpret_cast<char*>(&encoder_r_),
          reinterpret_cast<char*>(&other->encoder_r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SPEED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[35]);
}

// ===================================================================

class INV_L_SET_TORQUE::_Internal {
 public:
};

INV_L_SET_TORQUE::INV_L_SET_TORQUE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.INV_L_SET_TORQUE)
}
INV_L_SET_TORQUE::INV_L_SET_TORQUE(const INV_L_SET_TORQUE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reg_id_, &from.reg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msb_) -
    reinterpret_cast<char*>(&reg_id_)) + sizeof(msb_));
  // @@protoc_insertion_point(copy_constructor:primary.INV_L_SET_TORQUE)
}

inline void INV_L_SET_TORQUE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reg_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msb_) -
    reinterpret_cast<char*>(&reg_id_)) + sizeof(msb_));
}

INV_L_SET_TORQUE::~INV_L_SET_TORQUE() {
  // @@protoc_insertion_point(destructor:primary.INV_L_SET_TORQUE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void INV_L_SET_TORQUE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void INV_L_SET_TORQUE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void INV_L_SET_TORQUE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.INV_L_SET_TORQUE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msb_) -
      reinterpret_cast<char*>(&reg_id_)) + sizeof(msb_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* INV_L_SET_TORQUE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 reg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          reg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lsb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lsb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          msb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* INV_L_SET_TORQUE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.INV_L_SET_TORQUE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->_internal_reg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reg_id(), target);
  }

  // uint32 lsb = 2;
  if (this->_internal_lsb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lsb(), target);
  }

  // uint32 msb = 3;
  if (this->_internal_msb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msb(), target);
  }

  // uint64 _inner_timestamp = 4;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.INV_L_SET_TORQUE)
  return target;
}

size_t INV_L_SET_TORQUE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.INV_L_SET_TORQUE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->_internal_reg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reg_id());
  }

  // uint32 lsb = 2;
  if (this->_internal_lsb() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lsb());
  }

  // uint64 _inner_timestamp = 4;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  // uint32 msb = 3;
  if (this->_internal_msb() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msb());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData INV_L_SET_TORQUE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    INV_L_SET_TORQUE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*INV_L_SET_TORQUE::GetClassData() const { return &_class_data_; }

void INV_L_SET_TORQUE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<INV_L_SET_TORQUE *>(to)->MergeFrom(
      static_cast<const INV_L_SET_TORQUE &>(from));
}


void INV_L_SET_TORQUE::MergeFrom(const INV_L_SET_TORQUE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.INV_L_SET_TORQUE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reg_id() != 0) {
    _internal_set_reg_id(from._internal_reg_id());
  }
  if (from._internal_lsb() != 0) {
    _internal_set_lsb(from._internal_lsb());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from._internal_msb() != 0) {
    _internal_set_msb(from._internal_msb());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void INV_L_SET_TORQUE::CopyFrom(const INV_L_SET_TORQUE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.INV_L_SET_TORQUE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INV_L_SET_TORQUE::IsInitialized() const {
  return true;
}

void INV_L_SET_TORQUE::InternalSwap(INV_L_SET_TORQUE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(INV_L_SET_TORQUE, msb_)
      + sizeof(INV_L_SET_TORQUE::msb_)
      - PROTOBUF_FIELD_OFFSET(INV_L_SET_TORQUE, reg_id_)>(
          reinterpret_cast<char*>(&reg_id_),
          reinterpret_cast<char*>(&other->reg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata INV_L_SET_TORQUE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[36]);
}

// ===================================================================

class INV_L_RESPONSE::_Internal {
 public:
};

INV_L_RESPONSE::INV_L_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.INV_L_RESPONSE)
}
INV_L_RESPONSE::INV_L_RESPONSE(const INV_L_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reg_id_, &from.reg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&reg_id_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.INV_L_RESPONSE)
}

inline void INV_L_RESPONSE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reg_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&reg_id_)) + sizeof(_inner_timestamp_));
}

INV_L_RESPONSE::~INV_L_RESPONSE() {
  // @@protoc_insertion_point(destructor:primary.INV_L_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void INV_L_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void INV_L_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void INV_L_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.INV_L_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&reg_id_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* INV_L_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 reg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          reg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          data_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          data_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          data_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          data_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          data_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          data_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          data_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* INV_L_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.INV_L_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->_internal_reg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reg_id(), target);
  }

  // uint32 data_0 = 2;
  if (this->_internal_data_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_0(), target);
  }

  // uint32 data_1 = 3;
  if (this->_internal_data_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data_1(), target);
  }

  // uint32 data_2 = 4;
  if (this->_internal_data_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_data_2(), target);
  }

  // uint32 data_3 = 5;
  if (this->_internal_data_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_3(), target);
  }

  // uint32 data_4 = 6;
  if (this->_internal_data_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_data_4(), target);
  }

  // uint32 data_5 = 7;
  if (this->_internal_data_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_data_5(), target);
  }

  // uint32 data_6 = 8;
  if (this->_internal_data_6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_data_6(), target);
  }

  // uint64 _inner_timestamp = 9;
  if (this->_internal__inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.INV_L_RESPONSE)
  return target;
}

size_t INV_L_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.INV_L_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->_internal_reg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reg_id());
  }

  // uint32 data_0 = 2;
  if (this->_internal_data_0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_0());
  }

  // uint32 data_1 = 3;
  if (this->_internal_data_1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_1());
  }

  // uint32 data_2 = 4;
  if (this->_internal_data_2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_2());
  }

  // uint32 data_3 = 5;
  if (this->_internal_data_3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_3());
  }

  // uint32 data_4 = 6;
  if (this->_internal_data_4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_4());
  }

  // uint32 data_5 = 7;
  if (this->_internal_data_5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_5());
  }

  // uint32 data_6 = 8;
  if (this->_internal_data_6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_6());
  }

  // uint64 _inner_timestamp = 9;
  if (this->_internal__inner_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__inner_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData INV_L_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    INV_L_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*INV_L_RESPONSE::GetClassData() const { return &_class_data_; }

void INV_L_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<INV_L_RESPONSE *>(to)->MergeFrom(
      static_cast<const INV_L_RESPONSE &>(from));
}


void INV_L_RESPONSE::MergeFrom(const INV_L_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.INV_L_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reg_id() != 0) {
    _internal_set_reg_id(from._internal_reg_id());
  }
  if (from._internal_data_0() != 0) {
    _internal_set_data_0(from._internal_data_0());
  }
  if (from._internal_data_1() != 0) {
    _internal_set_data_1(from._internal_data_1());
  }
  if (from._internal_data_2() != 0) {
    _internal_set_data_2(from._internal_data_2());
  }
  if (from._internal_data_3() != 0) {
    _internal_set_data_3(from._internal_data_3());
  }
  if (from._internal_data_4() != 0) {
    _internal_set_data_4(from._internal_data_4());
  }
  if (from._internal_data_5() != 0) {
    _internal_set_data_5(from._internal_data_5());
  }
  if (from._internal_data_6() != 0) {
    _internal_set_data_6(from._internal_data_6());
  }
  if (from._internal__inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void INV_L_RESPONSE::CopyFrom(const INV_L_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.INV_L_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INV_L_RESPONSE::IsInitialized() const {
  return true;
}

void INV_L_RESPONSE::InternalSwap(INV_L_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(INV_L_RESPONSE, _inner_timestamp_)
      + sizeof(INV_L_RESPONSE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(INV_L_RESPONSE, reg_id_)>(
          reinterpret_cast<char*>(&reg_id_),
          reinterpret_cast<char*>(&other->reg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata INV_L_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[37]);
}

// ===================================================================

class Pack::_Internal {
 public:
};

Pack::Pack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steer_version_(arena),
  das_version_(arena),
  hv_version_(arena),
  lv_version_(arena),
  tlm_version_(arena),
  timestamp_(arena),
  set_tlm_status_(arena),
  tlm_status_(arena),
  steer_system_status_(arena),
  hv_voltage_(arena),
  hv_current_(arena),
  hv_temp_(arena),
  hv_errors_(arena),
  ts_status_(arena),
  set_ts_status_das_(arena),
  set_ts_status_handcart_(arena),
  steer_status_(arena),
  set_car_status_(arena),
  set_pedals_range_(arena),
  set_steering_angle_range_(arena),
  car_status_(arena),
  das_errors_(arena),
  lv_current_(arena),
  lv_voltage_(arena),
  lv_total_voltage_(arena),
  lv_temperature_(arena),
  cooling_status_(arena),
  set_radiator_speed_(arena),
  set_pumps_power_(arena),
  marker_(arena),
  hv_cells_voltage_(arena),
  hv_cells_temp_(arena),
  hv_cell_balancing_status_(arena),
  set_cell_balancing_status_(arena),
  handcart_status_(arena),
  speed_(arena),
  inv_l_set_torque_(arena),
  inv_l_response_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.Pack)
}
Pack::Pack(const Pack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      steer_version_(from.steer_version_),
      das_version_(from.das_version_),
      hv_version_(from.hv_version_),
      lv_version_(from.lv_version_),
      tlm_version_(from.tlm_version_),
      timestamp_(from.timestamp_),
      set_tlm_status_(from.set_tlm_status_),
      tlm_status_(from.tlm_status_),
      steer_system_status_(from.steer_system_status_),
      hv_voltage_(from.hv_voltage_),
      hv_current_(from.hv_current_),
      hv_temp_(from.hv_temp_),
      hv_errors_(from.hv_errors_),
      ts_status_(from.ts_status_),
      set_ts_status_das_(from.set_ts_status_das_),
      set_ts_status_handcart_(from.set_ts_status_handcart_),
      steer_status_(from.steer_status_),
      set_car_status_(from.set_car_status_),
      set_pedals_range_(from.set_pedals_range_),
      set_steering_angle_range_(from.set_steering_angle_range_),
      car_status_(from.car_status_),
      das_errors_(from.das_errors_),
      lv_current_(from.lv_current_),
      lv_voltage_(from.lv_voltage_),
      lv_total_voltage_(from.lv_total_voltage_),
      lv_temperature_(from.lv_temperature_),
      cooling_status_(from.cooling_status_),
      set_radiator_speed_(from.set_radiator_speed_),
      set_pumps_power_(from.set_pumps_power_),
      marker_(from.marker_),
      hv_cells_voltage_(from.hv_cells_voltage_),
      hv_cells_temp_(from.hv_cells_temp_),
      hv_cell_balancing_status_(from.hv_cell_balancing_status_),
      set_cell_balancing_status_(from.set_cell_balancing_status_),
      handcart_status_(from.handcart_status_),
      speed_(from.speed_),
      inv_l_set_torque_(from.inv_l_set_torque_),
      inv_l_response_(from.inv_l_response_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:primary.Pack)
}

inline void Pack::SharedCtor() {
}

Pack::~Pack() {
  // @@protoc_insertion_point(destructor:primary.Pack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pack::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.Pack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steer_version_.Clear();
  das_version_.Clear();
  hv_version_.Clear();
  lv_version_.Clear();
  tlm_version_.Clear();
  timestamp_.Clear();
  set_tlm_status_.Clear();
  tlm_status_.Clear();
  steer_system_status_.Clear();
  hv_voltage_.Clear();
  hv_current_.Clear();
  hv_temp_.Clear();
  hv_errors_.Clear();
  ts_status_.Clear();
  set_ts_status_das_.Clear();
  set_ts_status_handcart_.Clear();
  steer_status_.Clear();
  set_car_status_.Clear();
  set_pedals_range_.Clear();
  set_steering_angle_range_.Clear();
  car_status_.Clear();
  das_errors_.Clear();
  lv_current_.Clear();
  lv_voltage_.Clear();
  lv_total_voltage_.Clear();
  lv_temperature_.Clear();
  cooling_status_.Clear();
  set_radiator_speed_.Clear();
  set_pumps_power_.Clear();
  marker_.Clear();
  hv_cells_voltage_.Clear();
  hv_cells_temp_.Clear();
  hv_cell_balancing_status_.Clear();
  set_cell_balancing_status_.Clear();
  handcart_status_.Clear();
  speed_.Clear();
  inv_l_set_torque_.Clear();
  inv_l_response_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .primary.STEER_VERSION STEER_VERSION = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steer_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.DAS_VERSION DAS_VERSION = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_das_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HV_VERSION HV_VERSION = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hv_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.LV_VERSION LV_VERSION = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lv_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.TLM_VERSION TLM_VERSION = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlm_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.TIMESTAMP TIMESTAMP = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timestamp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SET_TLM_STATUS SET_TLM_STATUS = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_set_tlm_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.TLM_STATUS TLM_STATUS = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlm_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.STEER_SYSTEM_STATUS STEER_SYSTEM_STATUS = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steer_system_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HV_VOLTAGE HV_VOLTAGE = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hv_voltage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HV_CURRENT HV_CURRENT = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hv_current(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HV_TEMP HV_TEMP = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hv_temp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HV_ERRORS HV_ERRORS = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hv_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.TS_STATUS TS_STATUS = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ts_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SET_TS_STATUS_DAS SET_TS_STATUS_DAS = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_set_ts_status_das(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SET_TS_STATUS_HANDCART SET_TS_STATUS_HANDCART = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_ts_status_handcart(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.STEER_STATUS STEER_STATUS = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_steer_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SET_CAR_STATUS SET_CAR_STATUS = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_car_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SET_PEDALS_RANGE SET_PEDALS_RANGE = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_pedals_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SET_STEERING_ANGLE_RANGE SET_STEERING_ANGLE_RANGE = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_steering_angle_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.CAR_STATUS CAR_STATUS = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_car_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.DAS_ERRORS DAS_ERRORS = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_das_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.LV_CURRENT LV_CURRENT = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lv_current(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.LV_VOLTAGE LV_VOLTAGE = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lv_voltage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.LV_TOTAL_VOLTAGE LV_TOTAL_VOLTAGE = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lv_total_voltage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.LV_TEMPERATURE LV_TEMPERATURE = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lv_temperature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.COOLING_STATUS COOLING_STATUS = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_cooling_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SET_RADIATOR_SPEED SET_RADIATOR_SPEED = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_radiator_speed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SET_PUMPS_POWER SET_PUMPS_POWER = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_pumps_power(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.MARKER MARKER = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_marker(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HV_CELLS_VOLTAGE HV_CELLS_VOLTAGE = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_cells_voltage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HV_CELLS_TEMP HV_CELLS_TEMP = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_cells_temp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HV_CELL_BALANCING_STATUS HV_CELL_BALANCING_STATUS = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_cell_balancing_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SET_CELL_BALANCING_STATUS SET_CELL_BALANCING_STATUS = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_cell_balancing_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.HANDCART_STATUS HANDCART_STATUS = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_handcart_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.SPEED SPEED = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_speed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.INV_L_SET_TORQUE INV_L_SET_TORQUE = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inv_l_set_torque(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<298>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .primary.INV_L_RESPONSE INV_L_RESPONSE = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inv_l_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<306>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.Pack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .primary.STEER_VERSION STEER_VERSION = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_steer_version_size()); i < n; i++) {
    const auto& repfield = this->_internal_steer_version(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.DAS_VERSION DAS_VERSION = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_das_version_size()); i < n; i++) {
    const auto& repfield = this->_internal_das_version(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.HV_VERSION HV_VERSION = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hv_version_size()); i < n; i++) {
    const auto& repfield = this->_internal_hv_version(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.LV_VERSION LV_VERSION = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lv_version_size()); i < n; i++) {
    const auto& repfield = this->_internal_lv_version(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.TLM_VERSION TLM_VERSION = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tlm_version_size()); i < n; i++) {
    const auto& repfield = this->_internal_tlm_version(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.TIMESTAMP TIMESTAMP = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_timestamp_size()); i < n; i++) {
    const auto& repfield = this->_internal_timestamp(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.SET_TLM_STATUS SET_TLM_STATUS = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_tlm_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_tlm_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.TLM_STATUS TLM_STATUS = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tlm_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_tlm_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.STEER_SYSTEM_STATUS STEER_SYSTEM_STATUS = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_steer_system_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_steer_system_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.HV_VOLTAGE HV_VOLTAGE = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hv_voltage_size()); i < n; i++) {
    const auto& repfield = this->_internal_hv_voltage(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.HV_CURRENT HV_CURRENT = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hv_current_size()); i < n; i++) {
    const auto& repfield = this->_internal_hv_current(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.HV_TEMP HV_TEMP = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hv_temp_size()); i < n; i++) {
    const auto& repfield = this->_internal_hv_temp(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.HV_ERRORS HV_ERRORS = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hv_errors_size()); i < n; i++) {
    const auto& repfield = this->_internal_hv_errors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.TS_STATUS TS_STATUS = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ts_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_ts_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.SET_TS_STATUS_DAS SET_TS_STATUS_DAS = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_ts_status_das_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_ts_status_das(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.SET_TS_STATUS_HANDCART SET_TS_STATUS_HANDCART = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_ts_status_handcart_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_ts_status_handcart(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.STEER_STATUS STEER_STATUS = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_steer_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_steer_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.SET_CAR_STATUS SET_CAR_STATUS = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_car_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_car_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.SET_PEDALS_RANGE SET_PEDALS_RANGE = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_pedals_range_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_pedals_range(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.SET_STEERING_ANGLE_RANGE SET_STEERING_ANGLE_RANGE = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_steering_angle_range_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_steering_angle_range(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.CAR_STATUS CAR_STATUS = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_car_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_car_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.DAS_ERRORS DAS_ERRORS = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_das_errors_size()); i < n; i++) {
    const auto& repfield = this->_internal_das_errors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.LV_CURRENT LV_CURRENT = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lv_current_size()); i < n; i++) {
    const auto& repfield = this->_internal_lv_current(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.LV_VOLTAGE LV_VOLTAGE = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lv_voltage_size()); i < n; i++) {
    const auto& repfield = this->_internal_lv_voltage(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.LV_TOTAL_VOLTAGE LV_TOTAL_VOLTAGE = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lv_total_voltage_size()); i < n; i++) {
    const auto& repfield = this->_internal_lv_total_voltage(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.LV_TEMPERATURE LV_TEMPERATURE = 26;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lv_temperature_size()); i < n; i++) {
    const auto& repfield = this->_internal_lv_temperature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.COOLING_STATUS COOLING_STATUS = 27;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cooling_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_cooling_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.SET_RADIATOR_SPEED SET_RADIATOR_SPEED = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_radiator_speed_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_radiator_speed(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.SET_PUMPS_POWER SET_PUMPS_POWER = 29;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_pumps_power_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_pumps_power(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.MARKER MARKER = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_marker_size()); i < n; i++) {
    const auto& repfield = this->_internal_marker(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.HV_CELLS_VOLTAGE HV_CELLS_VOLTAGE = 31;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hv_cells_voltage_size()); i < n; i++) {
    const auto& repfield = this->_internal_hv_cells_voltage(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.HV_CELLS_TEMP HV_CELLS_TEMP = 32;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hv_cells_temp_size()); i < n; i++) {
    const auto& repfield = this->_internal_hv_cells_temp(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(32, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.HV_CELL_BALANCING_STATUS HV_CELL_BALANCING_STATUS = 33;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hv_cell_balancing_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_hv_cell_balancing_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.SET_CELL_BALANCING_STATUS SET_CELL_BALANCING_STATUS = 34;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_cell_balancing_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_cell_balancing_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(34, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.HANDCART_STATUS HANDCART_STATUS = 35;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_handcart_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_handcart_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(35, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.SPEED SPEED = 36;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speed_size()); i < n; i++) {
    const auto& repfield = this->_internal_speed(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(36, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.INV_L_SET_TORQUE INV_L_SET_TORQUE = 37;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inv_l_set_torque_size()); i < n; i++) {
    const auto& repfield = this->_internal_inv_l_set_torque(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(37, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .primary.INV_L_RESPONSE INV_L_RESPONSE = 38;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inv_l_response_size()); i < n; i++) {
    const auto& repfield = this->_internal_inv_l_response(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(38, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.Pack)
  return target;
}

size_t Pack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.Pack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .primary.STEER_VERSION STEER_VERSION = 1;
  total_size += 1UL * this->_internal_steer_version_size();
  for (const auto& msg : this->steer_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.DAS_VERSION DAS_VERSION = 2;
  total_size += 1UL * this->_internal_das_version_size();
  for (const auto& msg : this->das_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_VERSION HV_VERSION = 3;
  total_size += 1UL * this->_internal_hv_version_size();
  for (const auto& msg : this->hv_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LV_VERSION LV_VERSION = 4;
  total_size += 1UL * this->_internal_lv_version_size();
  for (const auto& msg : this->lv_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TLM_VERSION TLM_VERSION = 5;
  total_size += 1UL * this->_internal_tlm_version_size();
  for (const auto& msg : this->tlm_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TIMESTAMP TIMESTAMP = 6;
  total_size += 1UL * this->_internal_timestamp_size();
  for (const auto& msg : this->timestamp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_TLM_STATUS SET_TLM_STATUS = 7;
  total_size += 1UL * this->_internal_set_tlm_status_size();
  for (const auto& msg : this->set_tlm_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TLM_STATUS TLM_STATUS = 8;
  total_size += 1UL * this->_internal_tlm_status_size();
  for (const auto& msg : this->tlm_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.STEER_SYSTEM_STATUS STEER_SYSTEM_STATUS = 9;
  total_size += 1UL * this->_internal_steer_system_status_size();
  for (const auto& msg : this->steer_system_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_VOLTAGE HV_VOLTAGE = 10;
  total_size += 1UL * this->_internal_hv_voltage_size();
  for (const auto& msg : this->hv_voltage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_CURRENT HV_CURRENT = 11;
  total_size += 1UL * this->_internal_hv_current_size();
  for (const auto& msg : this->hv_current_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_TEMP HV_TEMP = 12;
  total_size += 1UL * this->_internal_hv_temp_size();
  for (const auto& msg : this->hv_temp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_ERRORS HV_ERRORS = 13;
  total_size += 1UL * this->_internal_hv_errors_size();
  for (const auto& msg : this->hv_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TS_STATUS TS_STATUS = 14;
  total_size += 1UL * this->_internal_ts_status_size();
  for (const auto& msg : this->ts_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_TS_STATUS_DAS SET_TS_STATUS_DAS = 15;
  total_size += 1UL * this->_internal_set_ts_status_das_size();
  for (const auto& msg : this->set_ts_status_das_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_TS_STATUS_HANDCART SET_TS_STATUS_HANDCART = 16;
  total_size += 2UL * this->_internal_set_ts_status_handcart_size();
  for (const auto& msg : this->set_ts_status_handcart_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.STEER_STATUS STEER_STATUS = 17;
  total_size += 2UL * this->_internal_steer_status_size();
  for (const auto& msg : this->steer_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_CAR_STATUS SET_CAR_STATUS = 18;
  total_size += 2UL * this->_internal_set_car_status_size();
  for (const auto& msg : this->set_car_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_PEDALS_RANGE SET_PEDALS_RANGE = 19;
  total_size += 2UL * this->_internal_set_pedals_range_size();
  for (const auto& msg : this->set_pedals_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_STEERING_ANGLE_RANGE SET_STEERING_ANGLE_RANGE = 20;
  total_size += 2UL * this->_internal_set_steering_angle_range_size();
  for (const auto& msg : this->set_steering_angle_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.CAR_STATUS CAR_STATUS = 21;
  total_size += 2UL * this->_internal_car_status_size();
  for (const auto& msg : this->car_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.DAS_ERRORS DAS_ERRORS = 22;
  total_size += 2UL * this->_internal_das_errors_size();
  for (const auto& msg : this->das_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LV_CURRENT LV_CURRENT = 23;
  total_size += 2UL * this->_internal_lv_current_size();
  for (const auto& msg : this->lv_current_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LV_VOLTAGE LV_VOLTAGE = 24;
  total_size += 2UL * this->_internal_lv_voltage_size();
  for (const auto& msg : this->lv_voltage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LV_TOTAL_VOLTAGE LV_TOTAL_VOLTAGE = 25;
  total_size += 2UL * this->_internal_lv_total_voltage_size();
  for (const auto& msg : this->lv_total_voltage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LV_TEMPERATURE LV_TEMPERATURE = 26;
  total_size += 2UL * this->_internal_lv_temperature_size();
  for (const auto& msg : this->lv_temperature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.COOLING_STATUS COOLING_STATUS = 27;
  total_size += 2UL * this->_internal_cooling_status_size();
  for (const auto& msg : this->cooling_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_RADIATOR_SPEED SET_RADIATOR_SPEED = 28;
  total_size += 2UL * this->_internal_set_radiator_speed_size();
  for (const auto& msg : this->set_radiator_speed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_PUMPS_POWER SET_PUMPS_POWER = 29;
  total_size += 2UL * this->_internal_set_pumps_power_size();
  for (const auto& msg : this->set_pumps_power_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.MARKER MARKER = 30;
  total_size += 2UL * this->_internal_marker_size();
  for (const auto& msg : this->marker_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_CELLS_VOLTAGE HV_CELLS_VOLTAGE = 31;
  total_size += 2UL * this->_internal_hv_cells_voltage_size();
  for (const auto& msg : this->hv_cells_voltage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_CELLS_TEMP HV_CELLS_TEMP = 32;
  total_size += 2UL * this->_internal_hv_cells_temp_size();
  for (const auto& msg : this->hv_cells_temp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_CELL_BALANCING_STATUS HV_CELL_BALANCING_STATUS = 33;
  total_size += 2UL * this->_internal_hv_cell_balancing_status_size();
  for (const auto& msg : this->hv_cell_balancing_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_CELL_BALANCING_STATUS SET_CELL_BALANCING_STATUS = 34;
  total_size += 2UL * this->_internal_set_cell_balancing_status_size();
  for (const auto& msg : this->set_cell_balancing_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HANDCART_STATUS HANDCART_STATUS = 35;
  total_size += 2UL * this->_internal_handcart_status_size();
  for (const auto& msg : this->handcart_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SPEED SPEED = 36;
  total_size += 2UL * this->_internal_speed_size();
  for (const auto& msg : this->speed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.INV_L_SET_TORQUE INV_L_SET_TORQUE = 37;
  total_size += 2UL * this->_internal_inv_l_set_torque_size();
  for (const auto& msg : this->inv_l_set_torque_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.INV_L_RESPONSE INV_L_RESPONSE = 38;
  total_size += 2UL * this->_internal_inv_l_response_size();
  for (const auto& msg : this->inv_l_response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pack::GetClassData() const { return &_class_data_; }

void Pack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pack *>(to)->MergeFrom(
      static_cast<const Pack &>(from));
}


void Pack::MergeFrom(const Pack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.Pack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steer_version_.MergeFrom(from.steer_version_);
  das_version_.MergeFrom(from.das_version_);
  hv_version_.MergeFrom(from.hv_version_);
  lv_version_.MergeFrom(from.lv_version_);
  tlm_version_.MergeFrom(from.tlm_version_);
  timestamp_.MergeFrom(from.timestamp_);
  set_tlm_status_.MergeFrom(from.set_tlm_status_);
  tlm_status_.MergeFrom(from.tlm_status_);
  steer_system_status_.MergeFrom(from.steer_system_status_);
  hv_voltage_.MergeFrom(from.hv_voltage_);
  hv_current_.MergeFrom(from.hv_current_);
  hv_temp_.MergeFrom(from.hv_temp_);
  hv_errors_.MergeFrom(from.hv_errors_);
  ts_status_.MergeFrom(from.ts_status_);
  set_ts_status_das_.MergeFrom(from.set_ts_status_das_);
  set_ts_status_handcart_.MergeFrom(from.set_ts_status_handcart_);
  steer_status_.MergeFrom(from.steer_status_);
  set_car_status_.MergeFrom(from.set_car_status_);
  set_pedals_range_.MergeFrom(from.set_pedals_range_);
  set_steering_angle_range_.MergeFrom(from.set_steering_angle_range_);
  car_status_.MergeFrom(from.car_status_);
  das_errors_.MergeFrom(from.das_errors_);
  lv_current_.MergeFrom(from.lv_current_);
  lv_voltage_.MergeFrom(from.lv_voltage_);
  lv_total_voltage_.MergeFrom(from.lv_total_voltage_);
  lv_temperature_.MergeFrom(from.lv_temperature_);
  cooling_status_.MergeFrom(from.cooling_status_);
  set_radiator_speed_.MergeFrom(from.set_radiator_speed_);
  set_pumps_power_.MergeFrom(from.set_pumps_power_);
  marker_.MergeFrom(from.marker_);
  hv_cells_voltage_.MergeFrom(from.hv_cells_voltage_);
  hv_cells_temp_.MergeFrom(from.hv_cells_temp_);
  hv_cell_balancing_status_.MergeFrom(from.hv_cell_balancing_status_);
  set_cell_balancing_status_.MergeFrom(from.set_cell_balancing_status_);
  handcart_status_.MergeFrom(from.handcart_status_);
  speed_.MergeFrom(from.speed_);
  inv_l_set_torque_.MergeFrom(from.inv_l_set_torque_);
  inv_l_response_.MergeFrom(from.inv_l_response_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pack::CopyFrom(const Pack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.Pack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pack::IsInitialized() const {
  return true;
}

void Pack::InternalSwap(Pack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  steer_version_.InternalSwap(&other->steer_version_);
  das_version_.InternalSwap(&other->das_version_);
  hv_version_.InternalSwap(&other->hv_version_);
  lv_version_.InternalSwap(&other->lv_version_);
  tlm_version_.InternalSwap(&other->tlm_version_);
  timestamp_.InternalSwap(&other->timestamp_);
  set_tlm_status_.InternalSwap(&other->set_tlm_status_);
  tlm_status_.InternalSwap(&other->tlm_status_);
  steer_system_status_.InternalSwap(&other->steer_system_status_);
  hv_voltage_.InternalSwap(&other->hv_voltage_);
  hv_current_.InternalSwap(&other->hv_current_);
  hv_temp_.InternalSwap(&other->hv_temp_);
  hv_errors_.InternalSwap(&other->hv_errors_);
  ts_status_.InternalSwap(&other->ts_status_);
  set_ts_status_das_.InternalSwap(&other->set_ts_status_das_);
  set_ts_status_handcart_.InternalSwap(&other->set_ts_status_handcart_);
  steer_status_.InternalSwap(&other->steer_status_);
  set_car_status_.InternalSwap(&other->set_car_status_);
  set_pedals_range_.InternalSwap(&other->set_pedals_range_);
  set_steering_angle_range_.InternalSwap(&other->set_steering_angle_range_);
  car_status_.InternalSwap(&other->car_status_);
  das_errors_.InternalSwap(&other->das_errors_);
  lv_current_.InternalSwap(&other->lv_current_);
  lv_voltage_.InternalSwap(&other->lv_voltage_);
  lv_total_voltage_.InternalSwap(&other->lv_total_voltage_);
  lv_temperature_.InternalSwap(&other->lv_temperature_);
  cooling_status_.InternalSwap(&other->cooling_status_);
  set_radiator_speed_.InternalSwap(&other->set_radiator_speed_);
  set_pumps_power_.InternalSwap(&other->set_pumps_power_);
  marker_.InternalSwap(&other->marker_);
  hv_cells_voltage_.InternalSwap(&other->hv_cells_voltage_);
  hv_cells_temp_.InternalSwap(&other->hv_cells_temp_);
  hv_cell_balancing_status_.InternalSwap(&other->hv_cell_balancing_status_);
  set_cell_balancing_status_.InternalSwap(&other->set_cell_balancing_status_);
  handcart_status_.InternalSwap(&other->handcart_status_);
  speed_.InternalSwap(&other->speed_);
  inv_l_set_torque_.InternalSwap(&other->inv_l_set_torque_);
  inv_l_response_.InternalSwap(&other->inv_l_response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[38]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace primary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::primary::STEER_VERSION*
Arena::CreateMaybeMessage< ::primary::STEER_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::STEER_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::DAS_VERSION*
Arena::CreateMaybeMessage< ::primary::DAS_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::DAS_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_VERSION*
Arena::CreateMaybeMessage< ::primary::HV_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_VERSION*
Arena::CreateMaybeMessage< ::primary::LV_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TLM_VERSION*
Arena::CreateMaybeMessage< ::primary::TLM_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TLM_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TIMESTAMP*
Arena::CreateMaybeMessage< ::primary::TIMESTAMP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TIMESTAMP >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_TLM_STATUS*
Arena::CreateMaybeMessage< ::primary::SET_TLM_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_TLM_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TLM_STATUS*
Arena::CreateMaybeMessage< ::primary::TLM_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TLM_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::STEER_SYSTEM_STATUS*
Arena::CreateMaybeMessage< ::primary::STEER_SYSTEM_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::STEER_SYSTEM_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_VOLTAGE*
Arena::CreateMaybeMessage< ::primary::HV_VOLTAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_VOLTAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CURRENT*
Arena::CreateMaybeMessage< ::primary::HV_CURRENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CURRENT >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_TEMP*
Arena::CreateMaybeMessage< ::primary::HV_TEMP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_TEMP >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_ERRORS*
Arena::CreateMaybeMessage< ::primary::HV_ERRORS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_ERRORS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TS_STATUS*
Arena::CreateMaybeMessage< ::primary::TS_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TS_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_TS_STATUS_DAS*
Arena::CreateMaybeMessage< ::primary::SET_TS_STATUS_DAS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_TS_STATUS_DAS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_TS_STATUS_HANDCART*
Arena::CreateMaybeMessage< ::primary::SET_TS_STATUS_HANDCART >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_TS_STATUS_HANDCART >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::STEER_STATUS*
Arena::CreateMaybeMessage< ::primary::STEER_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::STEER_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_CAR_STATUS*
Arena::CreateMaybeMessage< ::primary::SET_CAR_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_CAR_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_PEDALS_RANGE*
Arena::CreateMaybeMessage< ::primary::SET_PEDALS_RANGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_PEDALS_RANGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_STEERING_ANGLE_RANGE*
Arena::CreateMaybeMessage< ::primary::SET_STEERING_ANGLE_RANGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_STEERING_ANGLE_RANGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::CAR_STATUS*
Arena::CreateMaybeMessage< ::primary::CAR_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::CAR_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::DAS_ERRORS*
Arena::CreateMaybeMessage< ::primary::DAS_ERRORS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::DAS_ERRORS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_CURRENT*
Arena::CreateMaybeMessage< ::primary::LV_CURRENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_CURRENT >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_VOLTAGE*
Arena::CreateMaybeMessage< ::primary::LV_VOLTAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_VOLTAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_TOTAL_VOLTAGE*
Arena::CreateMaybeMessage< ::primary::LV_TOTAL_VOLTAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_TOTAL_VOLTAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_TEMPERATURE*
Arena::CreateMaybeMessage< ::primary::LV_TEMPERATURE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_TEMPERATURE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::COOLING_STATUS*
Arena::CreateMaybeMessage< ::primary::COOLING_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::COOLING_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_RADIATOR_SPEED*
Arena::CreateMaybeMessage< ::primary::SET_RADIATOR_SPEED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_RADIATOR_SPEED >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_PUMPS_POWER*
Arena::CreateMaybeMessage< ::primary::SET_PUMPS_POWER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_PUMPS_POWER >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::MARKER*
Arena::CreateMaybeMessage< ::primary::MARKER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::MARKER >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CELLS_VOLTAGE*
Arena::CreateMaybeMessage< ::primary::HV_CELLS_VOLTAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CELLS_VOLTAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CELLS_TEMP*
Arena::CreateMaybeMessage< ::primary::HV_CELLS_TEMP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CELLS_TEMP >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CELL_BALANCING_STATUS*
Arena::CreateMaybeMessage< ::primary::HV_CELL_BALANCING_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CELL_BALANCING_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_CELL_BALANCING_STATUS*
Arena::CreateMaybeMessage< ::primary::SET_CELL_BALANCING_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_CELL_BALANCING_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HANDCART_STATUS*
Arena::CreateMaybeMessage< ::primary::HANDCART_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HANDCART_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SPEED*
Arena::CreateMaybeMessage< ::primary::SPEED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SPEED >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::INV_L_SET_TORQUE*
Arena::CreateMaybeMessage< ::primary::INV_L_SET_TORQUE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::INV_L_SET_TORQUE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::INV_L_RESPONSE*
Arena::CreateMaybeMessage< ::primary::INV_L_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::INV_L_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::Pack*
Arena::CreateMaybeMessage< ::primary::Pack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::Pack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
