// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#include "network.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace secondary {
PROTOBUF_CONSTEXPR IMU_ANGULAR_RATE::IMU_ANGULAR_RATE(
    ::_pbi::ConstantInitialized)
  : ang_rate_x_(0u)
  , ang_rate_y_(0u)
  , _internal_timestamp_(uint64_t{0u})
  , ang_rate_z_(0u){}
struct IMU_ANGULAR_RATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMU_ANGULAR_RATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMU_ANGULAR_RATEDefaultTypeInternal() {}
  union {
    IMU_ANGULAR_RATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMU_ANGULAR_RATEDefaultTypeInternal _IMU_ANGULAR_RATE_default_instance_;
PROTOBUF_CONSTEXPR IMU_ACCELERATION::IMU_ACCELERATION(
    ::_pbi::ConstantInitialized)
  : accel_x_(0u)
  , accel_y_(0u)
  , _internal_timestamp_(uint64_t{0u})
  , accel_z_(0u){}
struct IMU_ACCELERATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMU_ACCELERATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMU_ACCELERATIONDefaultTypeInternal() {}
  union {
    IMU_ACCELERATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMU_ACCELERATIONDefaultTypeInternal _IMU_ACCELERATION_default_instance_;
PROTOBUF_CONSTEXPR IRTS_FL_0::IRTS_FL_0(
    ::_pbi::ConstantInitialized)
  : channel1_(0u)
  , channel2_(0u)
  , channel3_(0u)
  , channel4_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_FL_0DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_FL_0DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_FL_0DefaultTypeInternal() {}
  union {
    IRTS_FL_0 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_FL_0DefaultTypeInternal _IRTS_FL_0_default_instance_;
PROTOBUF_CONSTEXPR IRTS_FL_1::IRTS_FL_1(
    ::_pbi::ConstantInitialized)
  : channel5_(0u)
  , channel6_(0u)
  , channel7_(0u)
  , channel8_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_FL_1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_FL_1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_FL_1DefaultTypeInternal() {}
  union {
    IRTS_FL_1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_FL_1DefaultTypeInternal _IRTS_FL_1_default_instance_;
PROTOBUF_CONSTEXPR IRTS_FL_2::IRTS_FL_2(
    ::_pbi::ConstantInitialized)
  : channel9_(0u)
  , channel10_(0u)
  , channel11_(0u)
  , channel12_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_FL_2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_FL_2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_FL_2DefaultTypeInternal() {}
  union {
    IRTS_FL_2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_FL_2DefaultTypeInternal _IRTS_FL_2_default_instance_;
PROTOBUF_CONSTEXPR IRTS_FL_3::IRTS_FL_3(
    ::_pbi::ConstantInitialized)
  : channel13_(0u)
  , channel14_(0u)
  , channel15_(0u)
  , channel16_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_FL_3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_FL_3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_FL_3DefaultTypeInternal() {}
  union {
    IRTS_FL_3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_FL_3DefaultTypeInternal _IRTS_FL_3_default_instance_;
PROTOBUF_CONSTEXPR IRTS_FR_0::IRTS_FR_0(
    ::_pbi::ConstantInitialized)
  : channel1_(0u)
  , channel2_(0u)
  , channel3_(0u)
  , channel4_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_FR_0DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_FR_0DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_FR_0DefaultTypeInternal() {}
  union {
    IRTS_FR_0 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_FR_0DefaultTypeInternal _IRTS_FR_0_default_instance_;
PROTOBUF_CONSTEXPR IRTS_FR_1::IRTS_FR_1(
    ::_pbi::ConstantInitialized)
  : channel5_(0u)
  , channel6_(0u)
  , channel7_(0u)
  , channel8_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_FR_1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_FR_1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_FR_1DefaultTypeInternal() {}
  union {
    IRTS_FR_1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_FR_1DefaultTypeInternal _IRTS_FR_1_default_instance_;
PROTOBUF_CONSTEXPR IRTS_FR_2::IRTS_FR_2(
    ::_pbi::ConstantInitialized)
  : channel9_(0u)
  , channel10_(0u)
  , channel11_(0u)
  , channel12_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_FR_2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_FR_2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_FR_2DefaultTypeInternal() {}
  union {
    IRTS_FR_2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_FR_2DefaultTypeInternal _IRTS_FR_2_default_instance_;
PROTOBUF_CONSTEXPR IRTS_FR_3::IRTS_FR_3(
    ::_pbi::ConstantInitialized)
  : channel13_(0u)
  , channel14_(0u)
  , channel15_(0u)
  , channel16_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_FR_3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_FR_3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_FR_3DefaultTypeInternal() {}
  union {
    IRTS_FR_3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_FR_3DefaultTypeInternal _IRTS_FR_3_default_instance_;
PROTOBUF_CONSTEXPR IRTS_RL_0::IRTS_RL_0(
    ::_pbi::ConstantInitialized)
  : channel1_(0u)
  , channel2_(0u)
  , channel3_(0u)
  , channel4_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_RL_0DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_RL_0DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_RL_0DefaultTypeInternal() {}
  union {
    IRTS_RL_0 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_RL_0DefaultTypeInternal _IRTS_RL_0_default_instance_;
PROTOBUF_CONSTEXPR IRTS_RL_1::IRTS_RL_1(
    ::_pbi::ConstantInitialized)
  : channel5_(0u)
  , channel6_(0u)
  , channel7_(0u)
  , channel8_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_RL_1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_RL_1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_RL_1DefaultTypeInternal() {}
  union {
    IRTS_RL_1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_RL_1DefaultTypeInternal _IRTS_RL_1_default_instance_;
PROTOBUF_CONSTEXPR IRTS_RL_2::IRTS_RL_2(
    ::_pbi::ConstantInitialized)
  : channel9_(0u)
  , channel10_(0u)
  , channel11_(0u)
  , channel12_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_RL_2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_RL_2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_RL_2DefaultTypeInternal() {}
  union {
    IRTS_RL_2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_RL_2DefaultTypeInternal _IRTS_RL_2_default_instance_;
PROTOBUF_CONSTEXPR IRTS_RL_3::IRTS_RL_3(
    ::_pbi::ConstantInitialized)
  : channel13_(0u)
  , channel14_(0u)
  , channel15_(0u)
  , channel16_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_RL_3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_RL_3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_RL_3DefaultTypeInternal() {}
  union {
    IRTS_RL_3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_RL_3DefaultTypeInternal _IRTS_RL_3_default_instance_;
PROTOBUF_CONSTEXPR IRTS_RR_0::IRTS_RR_0(
    ::_pbi::ConstantInitialized)
  : channel1_(0u)
  , channel2_(0u)
  , channel3_(0u)
  , channel4_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_RR_0DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_RR_0DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_RR_0DefaultTypeInternal() {}
  union {
    IRTS_RR_0 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_RR_0DefaultTypeInternal _IRTS_RR_0_default_instance_;
PROTOBUF_CONSTEXPR IRTS_RR_1::IRTS_RR_1(
    ::_pbi::ConstantInitialized)
  : channel5_(0u)
  , channel6_(0u)
  , channel7_(0u)
  , channel8_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_RR_1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_RR_1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_RR_1DefaultTypeInternal() {}
  union {
    IRTS_RR_1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_RR_1DefaultTypeInternal _IRTS_RR_1_default_instance_;
PROTOBUF_CONSTEXPR IRTS_RR_2::IRTS_RR_2(
    ::_pbi::ConstantInitialized)
  : channel9_(0u)
  , channel10_(0u)
  , channel11_(0u)
  , channel12_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_RR_2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_RR_2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_RR_2DefaultTypeInternal() {}
  union {
    IRTS_RR_2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_RR_2DefaultTypeInternal _IRTS_RR_2_default_instance_;
PROTOBUF_CONSTEXPR IRTS_RR_3::IRTS_RR_3(
    ::_pbi::ConstantInitialized)
  : channel13_(0u)
  , channel14_(0u)
  , channel15_(0u)
  , channel16_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct IRTS_RR_3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRTS_RR_3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRTS_RR_3DefaultTypeInternal() {}
  union {
    IRTS_RR_3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRTS_RR_3DefaultTypeInternal _IRTS_RR_3_default_instance_;
PROTOBUF_CONSTEXPR GPS_COORDS::GPS_COORDS(
    ::_pbi::ConstantInitialized)
  : latitude_(0)
  , longitude_(0)
  , _internal_timestamp_(uint64_t{0u}){}
struct GPS_COORDSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GPS_COORDSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GPS_COORDSDefaultTypeInternal() {}
  union {
    GPS_COORDS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GPS_COORDSDefaultTypeInternal _GPS_COORDS_default_instance_;
PROTOBUF_CONSTEXPR GPS_SPEED::GPS_SPEED(
    ::_pbi::ConstantInitialized)
  : _internal_timestamp_(uint64_t{0u})
  , speed_(0u){}
struct GPS_SPEEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GPS_SPEEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GPS_SPEEDDefaultTypeInternal() {}
  union {
    GPS_SPEED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GPS_SPEEDDefaultTypeInternal _GPS_SPEED_default_instance_;
PROTOBUF_CONSTEXPR LAP_COUNT::LAP_COUNT(
    ::_pbi::ConstantInitialized)
  : timestamp_(0u)
  , lap_count_(0u)
  , _internal_timestamp_(uint64_t{0u}){}
struct LAP_COUNTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LAP_COUNTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LAP_COUNTDefaultTypeInternal() {}
  union {
    LAP_COUNT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LAP_COUNTDefaultTypeInternal _LAP_COUNT_default_instance_;
PROTOBUF_CONSTEXPR PEDALS_OUTPUT::PEDALS_OUTPUT(
    ::_pbi::ConstantInitialized)
  : bse_front_(0u)
  , bse_rear_(0u)
  , _internal_timestamp_(uint64_t{0u})
  , apps_(0u){}
struct PEDALS_OUTPUTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PEDALS_OUTPUTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PEDALS_OUTPUTDefaultTypeInternal() {}
  union {
    PEDALS_OUTPUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PEDALS_OUTPUTDefaultTypeInternal _PEDALS_OUTPUT_default_instance_;
PROTOBUF_CONSTEXPR CONTROL_OUTPUT::CONTROL_OUTPUT(
    ::_pbi::ConstantInitialized)
  : right_(0)
  , left_(0)
  , _internal_timestamp_(uint64_t{0u}){}
struct CONTROL_OUTPUTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CONTROL_OUTPUTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CONTROL_OUTPUTDefaultTypeInternal() {}
  union {
    CONTROL_OUTPUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CONTROL_OUTPUTDefaultTypeInternal _CONTROL_OUTPUT_default_instance_;
PROTOBUF_CONSTEXPR STEERING_ANGLE::STEERING_ANGLE(
    ::_pbi::ConstantInitialized)
  : _internal_timestamp_(uint64_t{0u})
  , angle_(0){}
struct STEERING_ANGLEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR STEERING_ANGLEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~STEERING_ANGLEDefaultTypeInternal() {}
  union {
    STEERING_ANGLE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 STEERING_ANGLEDefaultTypeInternal _STEERING_ANGLE_default_instance_;
PROTOBUF_CONSTEXPR Pack::Pack(
    ::_pbi::ConstantInitialized)
  : imu_angular_rate_()
  , imu_acceleration_()
  , irts_fl_0_()
  , irts_fl_1_()
  , irts_fl_2_()
  , irts_fl_3_()
  , irts_fr_0_()
  , irts_fr_1_()
  , irts_fr_2_()
  , irts_fr_3_()
  , irts_rl_0_()
  , irts_rl_1_()
  , irts_rl_2_()
  , irts_rl_3_()
  , irts_rr_0_()
  , irts_rr_1_()
  , irts_rr_2_()
  , irts_rr_3_()
  , gps_coords_()
  , gps_speed_()
  , lap_count_()
  , pedals_output_()
  , control_output_()
  , steering_angle_(){}
struct PackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackDefaultTypeInternal() {}
  union {
    Pack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackDefaultTypeInternal _Pack_default_instance_;
}  // namespace secondary
static ::_pb::Metadata file_level_metadata_network_2eproto[25];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_network_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_network_2eproto = nullptr;

const uint32_t TableStruct_network_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, ang_rate_x_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, ang_rate_y_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, ang_rate_z_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, accel_x_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, accel_y_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, accel_z_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, channel1_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, channel2_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, channel3_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, channel4_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, channel5_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, channel6_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, channel7_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, channel8_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, channel9_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, channel10_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, channel11_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, channel12_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, channel13_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, channel14_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, channel15_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, channel16_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, channel1_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, channel2_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, channel3_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, channel4_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, channel5_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, channel6_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, channel7_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, channel8_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, channel9_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, channel10_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, channel11_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, channel12_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, channel13_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, channel14_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, channel15_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, channel16_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, channel1_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, channel2_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, channel3_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, channel4_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, channel5_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, channel6_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, channel7_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, channel8_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, channel9_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, channel10_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, channel11_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, channel12_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, channel13_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, channel14_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, channel15_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, channel16_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, channel1_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, channel2_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, channel3_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, channel4_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, channel5_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, channel6_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, channel7_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, channel8_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, channel9_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, channel10_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, channel11_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, channel12_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, channel13_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, channel14_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, channel15_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, channel16_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_COORDS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_COORDS, latitude_),
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_COORDS, longitude_),
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_COORDS, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_SPEED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_SPEED, speed_),
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_SPEED, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::LAP_COUNT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::LAP_COUNT, timestamp_),
  PROTOBUF_FIELD_OFFSET(::secondary::LAP_COUNT, lap_count_),
  PROTOBUF_FIELD_OFFSET(::secondary::LAP_COUNT, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::PEDALS_OUTPUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::PEDALS_OUTPUT, bse_front_),
  PROTOBUF_FIELD_OFFSET(::secondary::PEDALS_OUTPUT, bse_rear_),
  PROTOBUF_FIELD_OFFSET(::secondary::PEDALS_OUTPUT, apps_),
  PROTOBUF_FIELD_OFFSET(::secondary::PEDALS_OUTPUT, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::CONTROL_OUTPUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::CONTROL_OUTPUT, right_),
  PROTOBUF_FIELD_OFFSET(::secondary::CONTROL_OUTPUT, left_),
  PROTOBUF_FIELD_OFFSET(::secondary::CONTROL_OUTPUT, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::STEERING_ANGLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::STEERING_ANGLE, angle_),
  PROTOBUF_FIELD_OFFSET(::secondary::STEERING_ANGLE, _internal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, imu_angular_rate_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, imu_acceleration_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fl_0_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fl_1_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fl_2_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fl_3_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fr_0_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fr_1_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fr_2_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fr_3_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rl_0_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rl_1_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rl_2_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rl_3_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rr_0_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rr_1_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rr_2_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rr_3_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, gps_coords_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, gps_speed_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, lap_count_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, pedals_output_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, control_output_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, steering_angle_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::secondary::IMU_ANGULAR_RATE)},
  { 10, -1, -1, sizeof(::secondary::IMU_ACCELERATION)},
  { 20, -1, -1, sizeof(::secondary::IRTS_FL_0)},
  { 31, -1, -1, sizeof(::secondary::IRTS_FL_1)},
  { 42, -1, -1, sizeof(::secondary::IRTS_FL_2)},
  { 53, -1, -1, sizeof(::secondary::IRTS_FL_3)},
  { 64, -1, -1, sizeof(::secondary::IRTS_FR_0)},
  { 75, -1, -1, sizeof(::secondary::IRTS_FR_1)},
  { 86, -1, -1, sizeof(::secondary::IRTS_FR_2)},
  { 97, -1, -1, sizeof(::secondary::IRTS_FR_3)},
  { 108, -1, -1, sizeof(::secondary::IRTS_RL_0)},
  { 119, -1, -1, sizeof(::secondary::IRTS_RL_1)},
  { 130, -1, -1, sizeof(::secondary::IRTS_RL_2)},
  { 141, -1, -1, sizeof(::secondary::IRTS_RL_3)},
  { 152, -1, -1, sizeof(::secondary::IRTS_RR_0)},
  { 163, -1, -1, sizeof(::secondary::IRTS_RR_1)},
  { 174, -1, -1, sizeof(::secondary::IRTS_RR_2)},
  { 185, -1, -1, sizeof(::secondary::IRTS_RR_3)},
  { 196, -1, -1, sizeof(::secondary::GPS_COORDS)},
  { 205, -1, -1, sizeof(::secondary::GPS_SPEED)},
  { 213, -1, -1, sizeof(::secondary::LAP_COUNT)},
  { 222, -1, -1, sizeof(::secondary::PEDALS_OUTPUT)},
  { 232, -1, -1, sizeof(::secondary::CONTROL_OUTPUT)},
  { 241, -1, -1, sizeof(::secondary::STEERING_ANGLE)},
  { 249, -1, -1, sizeof(::secondary::Pack)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::secondary::_IMU_ANGULAR_RATE_default_instance_._instance,
  &::secondary::_IMU_ACCELERATION_default_instance_._instance,
  &::secondary::_IRTS_FL_0_default_instance_._instance,
  &::secondary::_IRTS_FL_1_default_instance_._instance,
  &::secondary::_IRTS_FL_2_default_instance_._instance,
  &::secondary::_IRTS_FL_3_default_instance_._instance,
  &::secondary::_IRTS_FR_0_default_instance_._instance,
  &::secondary::_IRTS_FR_1_default_instance_._instance,
  &::secondary::_IRTS_FR_2_default_instance_._instance,
  &::secondary::_IRTS_FR_3_default_instance_._instance,
  &::secondary::_IRTS_RL_0_default_instance_._instance,
  &::secondary::_IRTS_RL_1_default_instance_._instance,
  &::secondary::_IRTS_RL_2_default_instance_._instance,
  &::secondary::_IRTS_RL_3_default_instance_._instance,
  &::secondary::_IRTS_RR_0_default_instance_._instance,
  &::secondary::_IRTS_RR_1_default_instance_._instance,
  &::secondary::_IRTS_RR_2_default_instance_._instance,
  &::secondary::_IRTS_RR_3_default_instance_._instance,
  &::secondary::_GPS_COORDS_default_instance_._instance,
  &::secondary::_GPS_SPEED_default_instance_._instance,
  &::secondary::_LAP_COUNT_default_instance_._instance,
  &::secondary::_PEDALS_OUTPUT_default_instance_._instance,
  &::secondary::_CONTROL_OUTPUT_default_instance_._instance,
  &::secondary::_STEERING_ANGLE_default_instance_._instance,
  &::secondary::_Pack_default_instance_._instance,
};

const char descriptor_table_protodef_network_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rnetwork.proto\022\tsecondary\"k\n\020IMU_ANGULA"
  "R_RATE\022\022\n\nang_rate_x\030\001 \001(\r\022\022\n\nang_rate_y"
  "\030\002 \001(\r\022\022\n\nang_rate_z\030\003 \001(\r\022\033\n\023_internal_"
  "timestamp\030\004 \001(\004\"b\n\020IMU_ACCELERATION\022\017\n\007a"
  "ccel_x\030\001 \001(\r\022\017\n\007accel_y\030\002 \001(\r\022\017\n\007accel_z"
  "\030\003 \001(\r\022\033\n\023_internal_timestamp\030\004 \001(\004\"p\n\tI"
  "RTS_FL_0\022\020\n\010channel1\030\001 \001(\r\022\020\n\010channel2\030\002"
  " \001(\r\022\020\n\010channel3\030\003 \001(\r\022\020\n\010channel4\030\004 \001(\r"
  "\022\033\n\023_internal_timestamp\030\005 \001(\004\"p\n\tIRTS_FL"
  "_1\022\020\n\010channel5\030\001 \001(\r\022\020\n\010channel6\030\002 \001(\r\022\020"
  "\n\010channel7\030\003 \001(\r\022\020\n\010channel8\030\004 \001(\r\022\033\n\023_i"
  "nternal_timestamp\030\005 \001(\004\"s\n\tIRTS_FL_2\022\020\n\010"
  "channel9\030\001 \001(\r\022\021\n\tchannel10\030\002 \001(\r\022\021\n\tcha"
  "nnel11\030\003 \001(\r\022\021\n\tchannel12\030\004 \001(\r\022\033\n\023_inte"
  "rnal_timestamp\030\005 \001(\004\"t\n\tIRTS_FL_3\022\021\n\tcha"
  "nnel13\030\001 \001(\r\022\021\n\tchannel14\030\002 \001(\r\022\021\n\tchann"
  "el15\030\003 \001(\r\022\021\n\tchannel16\030\004 \001(\r\022\033\n\023_intern"
  "al_timestamp\030\005 \001(\004\"p\n\tIRTS_FR_0\022\020\n\010chann"
  "el1\030\001 \001(\r\022\020\n\010channel2\030\002 \001(\r\022\020\n\010channel3\030"
  "\003 \001(\r\022\020\n\010channel4\030\004 \001(\r\022\033\n\023_internal_tim"
  "estamp\030\005 \001(\004\"p\n\tIRTS_FR_1\022\020\n\010channel5\030\001 "
  "\001(\r\022\020\n\010channel6\030\002 \001(\r\022\020\n\010channel7\030\003 \001(\r\022"
  "\020\n\010channel8\030\004 \001(\r\022\033\n\023_internal_timestamp"
  "\030\005 \001(\004\"s\n\tIRTS_FR_2\022\020\n\010channel9\030\001 \001(\r\022\021\n"
  "\tchannel10\030\002 \001(\r\022\021\n\tchannel11\030\003 \001(\r\022\021\n\tc"
  "hannel12\030\004 \001(\r\022\033\n\023_internal_timestamp\030\005 "
  "\001(\004\"t\n\tIRTS_FR_3\022\021\n\tchannel13\030\001 \001(\r\022\021\n\tc"
  "hannel14\030\002 \001(\r\022\021\n\tchannel15\030\003 \001(\r\022\021\n\tcha"
  "nnel16\030\004 \001(\r\022\033\n\023_internal_timestamp\030\005 \001("
  "\004\"p\n\tIRTS_RL_0\022\020\n\010channel1\030\001 \001(\r\022\020\n\010chan"
  "nel2\030\002 \001(\r\022\020\n\010channel3\030\003 \001(\r\022\020\n\010channel4"
  "\030\004 \001(\r\022\033\n\023_internal_timestamp\030\005 \001(\004\"p\n\tI"
  "RTS_RL_1\022\020\n\010channel5\030\001 \001(\r\022\020\n\010channel6\030\002"
  " \001(\r\022\020\n\010channel7\030\003 \001(\r\022\020\n\010channel8\030\004 \001(\r"
  "\022\033\n\023_internal_timestamp\030\005 \001(\004\"s\n\tIRTS_RL"
  "_2\022\020\n\010channel9\030\001 \001(\r\022\021\n\tchannel10\030\002 \001(\r\022"
  "\021\n\tchannel11\030\003 \001(\r\022\021\n\tchannel12\030\004 \001(\r\022\033\n"
  "\023_internal_timestamp\030\005 \001(\004\"t\n\tIRTS_RL_3\022"
  "\021\n\tchannel13\030\001 \001(\r\022\021\n\tchannel14\030\002 \001(\r\022\021\n"
  "\tchannel15\030\003 \001(\r\022\021\n\tchannel16\030\004 \001(\r\022\033\n\023_"
  "internal_timestamp\030\005 \001(\004\"p\n\tIRTS_RR_0\022\020\n"
  "\010channel1\030\001 \001(\r\022\020\n\010channel2\030\002 \001(\r\022\020\n\010cha"
  "nnel3\030\003 \001(\r\022\020\n\010channel4\030\004 \001(\r\022\033\n\023_intern"
  "al_timestamp\030\005 \001(\004\"p\n\tIRTS_RR_1\022\020\n\010chann"
  "el5\030\001 \001(\r\022\020\n\010channel6\030\002 \001(\r\022\020\n\010channel7\030"
  "\003 \001(\r\022\020\n\010channel8\030\004 \001(\r\022\033\n\023_internal_tim"
  "estamp\030\005 \001(\004\"s\n\tIRTS_RR_2\022\020\n\010channel9\030\001 "
  "\001(\r\022\021\n\tchannel10\030\002 \001(\r\022\021\n\tchannel11\030\003 \001("
  "\r\022\021\n\tchannel12\030\004 \001(\r\022\033\n\023_internal_timest"
  "amp\030\005 \001(\004\"t\n\tIRTS_RR_3\022\021\n\tchannel13\030\001 \001("
  "\r\022\021\n\tchannel14\030\002 \001(\r\022\021\n\tchannel15\030\003 \001(\r\022"
  "\021\n\tchannel16\030\004 \001(\r\022\033\n\023_internal_timestam"
  "p\030\005 \001(\004\"N\n\nGPS_COORDS\022\020\n\010latitude\030\001 \001(\002\022"
  "\021\n\tlongitude\030\002 \001(\002\022\033\n\023_internal_timestam"
  "p\030\003 \001(\004\"7\n\tGPS_SPEED\022\r\n\005speed\030\001 \001(\r\022\033\n\023_"
  "internal_timestamp\030\002 \001(\004\"N\n\tLAP_COUNT\022\021\n"
  "\ttimestamp\030\001 \001(\r\022\021\n\tlap_count\030\002 \001(\r\022\033\n\023_"
  "internal_timestamp\030\003 \001(\004\"_\n\rPEDALS_OUTPU"
  "T\022\021\n\tbse_front\030\001 \001(\r\022\020\n\010bse_rear\030\002 \001(\r\022\014"
  "\n\004apps\030\003 \001(\r\022\033\n\023_internal_timestamp\030\004 \001("
  "\004\"J\n\016CONTROL_OUTPUT\022\r\n\005right\030\001 \001(\002\022\014\n\004le"
  "ft\030\002 \001(\002\022\033\n\023_internal_timestamp\030\003 \001(\004\"<\n"
  "\016STEERING_ANGLE\022\r\n\005angle\030\001 \001(\002\022\033\n\023_inter"
  "nal_timestamp\030\002 \001(\004\"\230\010\n\004Pack\0225\n\020IMU_ANGU"
  "LAR_RATE\030\001 \003(\0132\033.secondary.IMU_ANGULAR_R"
  "ATE\0225\n\020IMU_ACCELERATION\030\002 \003(\0132\033.secondar"
  "y.IMU_ACCELERATION\022\'\n\tIRTS_FL_0\030\003 \003(\0132\024."
  "secondary.IRTS_FL_0\022\'\n\tIRTS_FL_1\030\004 \003(\0132\024"
  ".secondary.IRTS_FL_1\022\'\n\tIRTS_FL_2\030\005 \003(\0132"
  "\024.secondary.IRTS_FL_2\022\'\n\tIRTS_FL_3\030\006 \003(\013"
  "2\024.secondary.IRTS_FL_3\022\'\n\tIRTS_FR_0\030\007 \003("
  "\0132\024.secondary.IRTS_FR_0\022\'\n\tIRTS_FR_1\030\010 \003"
  "(\0132\024.secondary.IRTS_FR_1\022\'\n\tIRTS_FR_2\030\t "
  "\003(\0132\024.secondary.IRTS_FR_2\022\'\n\tIRTS_FR_3\030\n"
  " \003(\0132\024.secondary.IRTS_FR_3\022\'\n\tIRTS_RL_0\030"
  "\013 \003(\0132\024.secondary.IRTS_RL_0\022\'\n\tIRTS_RL_1"
  "\030\014 \003(\0132\024.secondary.IRTS_RL_1\022\'\n\tIRTS_RL_"
  "2\030\r \003(\0132\024.secondary.IRTS_RL_2\022\'\n\tIRTS_RL"
  "_3\030\016 \003(\0132\024.secondary.IRTS_RL_3\022\'\n\tIRTS_R"
  "R_0\030\017 \003(\0132\024.secondary.IRTS_RR_0\022\'\n\tIRTS_"
  "RR_1\030\020 \003(\0132\024.secondary.IRTS_RR_1\022\'\n\tIRTS"
  "_RR_2\030\021 \003(\0132\024.secondary.IRTS_RR_2\022\'\n\tIRT"
  "S_RR_3\030\022 \003(\0132\024.secondary.IRTS_RR_3\022)\n\nGP"
  "S_COORDS\030\023 \003(\0132\025.secondary.GPS_COORDS\022\'\n"
  "\tGPS_SPEED\030\024 \003(\0132\024.secondary.GPS_SPEED\022\'"
  "\n\tLAP_COUNT\030\025 \003(\0132\024.secondary.LAP_COUNT\022"
  "/\n\rPEDALS_OUTPUT\030\026 \003(\0132\030.secondary.PEDAL"
  "S_OUTPUT\0221\n\016CONTROL_OUTPUT\030\027 \003(\0132\031.secon"
  "dary.CONTROL_OUTPUT\0221\n\016STEERING_ANGLE\030\030 "
  "\003(\0132\031.secondary.STEERING_ANGLEb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_network_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_network_2eproto = {
    false, false, 3598, descriptor_table_protodef_network_2eproto,
    "network.proto",
    &descriptor_table_network_2eproto_once, nullptr, 0, 25,
    schemas, file_default_instances, TableStruct_network_2eproto::offsets,
    file_level_metadata_network_2eproto, file_level_enum_descriptors_network_2eproto,
    file_level_service_descriptors_network_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_network_2eproto_getter() {
  return &descriptor_table_network_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_network_2eproto(&descriptor_table_network_2eproto);
namespace secondary {

// ===================================================================

class IMU_ANGULAR_RATE::_Internal {
 public:
};

IMU_ANGULAR_RATE::IMU_ANGULAR_RATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IMU_ANGULAR_RATE)
}
IMU_ANGULAR_RATE::IMU_ANGULAR_RATE(const IMU_ANGULAR_RATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ang_rate_x_, &from.ang_rate_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&ang_rate_z_) -
    reinterpret_cast<char*>(&ang_rate_x_)) + sizeof(ang_rate_z_));
  // @@protoc_insertion_point(copy_constructor:secondary.IMU_ANGULAR_RATE)
}

inline void IMU_ANGULAR_RATE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ang_rate_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ang_rate_z_) -
    reinterpret_cast<char*>(&ang_rate_x_)) + sizeof(ang_rate_z_));
}

IMU_ANGULAR_RATE::~IMU_ANGULAR_RATE() {
  // @@protoc_insertion_point(destructor:secondary.IMU_ANGULAR_RATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMU_ANGULAR_RATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMU_ANGULAR_RATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMU_ANGULAR_RATE::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IMU_ANGULAR_RATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ang_rate_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ang_rate_z_) -
      reinterpret_cast<char*>(&ang_rate_x_)) + sizeof(ang_rate_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMU_ANGULAR_RATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ang_rate_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ang_rate_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ang_rate_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ang_rate_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ang_rate_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ang_rate_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMU_ANGULAR_RATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IMU_ANGULAR_RATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ang_rate_x = 1;
  if (this->_internal_ang_rate_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ang_rate_x(), target);
  }

  // uint32 ang_rate_y = 2;
  if (this->_internal_ang_rate_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ang_rate_y(), target);
  }

  // uint32 ang_rate_z = 3;
  if (this->_internal_ang_rate_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ang_rate_z(), target);
  }

  // uint64 _internal_timestamp = 4;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IMU_ANGULAR_RATE)
  return target;
}

size_t IMU_ANGULAR_RATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IMU_ANGULAR_RATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ang_rate_x = 1;
  if (this->_internal_ang_rate_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ang_rate_x());
  }

  // uint32 ang_rate_y = 2;
  if (this->_internal_ang_rate_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ang_rate_y());
  }

  // uint64 _internal_timestamp = 4;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  // uint32 ang_rate_z = 3;
  if (this->_internal_ang_rate_z() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ang_rate_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMU_ANGULAR_RATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMU_ANGULAR_RATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMU_ANGULAR_RATE::GetClassData() const { return &_class_data_; }

void IMU_ANGULAR_RATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMU_ANGULAR_RATE *>(to)->MergeFrom(
      static_cast<const IMU_ANGULAR_RATE &>(from));
}


void IMU_ANGULAR_RATE::MergeFrom(const IMU_ANGULAR_RATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IMU_ANGULAR_RATE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ang_rate_x() != 0) {
    _internal_set_ang_rate_x(from._internal_ang_rate_x());
  }
  if (from._internal_ang_rate_y() != 0) {
    _internal_set_ang_rate_y(from._internal_ang_rate_y());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  if (from._internal_ang_rate_z() != 0) {
    _internal_set_ang_rate_z(from._internal_ang_rate_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMU_ANGULAR_RATE::CopyFrom(const IMU_ANGULAR_RATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IMU_ANGULAR_RATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMU_ANGULAR_RATE::IsInitialized() const {
  return true;
}

void IMU_ANGULAR_RATE::InternalSwap(IMU_ANGULAR_RATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMU_ANGULAR_RATE, ang_rate_z_)
      + sizeof(IMU_ANGULAR_RATE::ang_rate_z_)
      - PROTOBUF_FIELD_OFFSET(IMU_ANGULAR_RATE, ang_rate_x_)>(
          reinterpret_cast<char*>(&ang_rate_x_),
          reinterpret_cast<char*>(&other->ang_rate_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMU_ANGULAR_RATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[0]);
}

// ===================================================================

class IMU_ACCELERATION::_Internal {
 public:
};

IMU_ACCELERATION::IMU_ACCELERATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IMU_ACCELERATION)
}
IMU_ACCELERATION::IMU_ACCELERATION(const IMU_ACCELERATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accel_x_, &from.accel_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&accel_z_) -
    reinterpret_cast<char*>(&accel_x_)) + sizeof(accel_z_));
  // @@protoc_insertion_point(copy_constructor:secondary.IMU_ACCELERATION)
}

inline void IMU_ACCELERATION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accel_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accel_z_) -
    reinterpret_cast<char*>(&accel_x_)) + sizeof(accel_z_));
}

IMU_ACCELERATION::~IMU_ACCELERATION() {
  // @@protoc_insertion_point(destructor:secondary.IMU_ACCELERATION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMU_ACCELERATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMU_ACCELERATION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMU_ACCELERATION::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IMU_ACCELERATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accel_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accel_z_) -
      reinterpret_cast<char*>(&accel_x_)) + sizeof(accel_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMU_ACCELERATION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 accel_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          accel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 accel_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          accel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 accel_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          accel_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMU_ACCELERATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IMU_ACCELERATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 accel_x = 1;
  if (this->_internal_accel_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accel_x(), target);
  }

  // uint32 accel_y = 2;
  if (this->_internal_accel_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accel_y(), target);
  }

  // uint32 accel_z = 3;
  if (this->_internal_accel_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_accel_z(), target);
  }

  // uint64 _internal_timestamp = 4;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IMU_ACCELERATION)
  return target;
}

size_t IMU_ACCELERATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IMU_ACCELERATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 accel_x = 1;
  if (this->_internal_accel_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accel_x());
  }

  // uint32 accel_y = 2;
  if (this->_internal_accel_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accel_y());
  }

  // uint64 _internal_timestamp = 4;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  // uint32 accel_z = 3;
  if (this->_internal_accel_z() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accel_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMU_ACCELERATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMU_ACCELERATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMU_ACCELERATION::GetClassData() const { return &_class_data_; }

void IMU_ACCELERATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMU_ACCELERATION *>(to)->MergeFrom(
      static_cast<const IMU_ACCELERATION &>(from));
}


void IMU_ACCELERATION::MergeFrom(const IMU_ACCELERATION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IMU_ACCELERATION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_accel_x() != 0) {
    _internal_set_accel_x(from._internal_accel_x());
  }
  if (from._internal_accel_y() != 0) {
    _internal_set_accel_y(from._internal_accel_y());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  if (from._internal_accel_z() != 0) {
    _internal_set_accel_z(from._internal_accel_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMU_ACCELERATION::CopyFrom(const IMU_ACCELERATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IMU_ACCELERATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMU_ACCELERATION::IsInitialized() const {
  return true;
}

void IMU_ACCELERATION::InternalSwap(IMU_ACCELERATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMU_ACCELERATION, accel_z_)
      + sizeof(IMU_ACCELERATION::accel_z_)
      - PROTOBUF_FIELD_OFFSET(IMU_ACCELERATION, accel_x_)>(
          reinterpret_cast<char*>(&accel_x_),
          reinterpret_cast<char*>(&other->accel_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMU_ACCELERATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[1]);
}

// ===================================================================

class IRTS_FL_0::_Internal {
 public:
};

IRTS_FL_0::IRTS_FL_0(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FL_0)
}
IRTS_FL_0::IRTS_FL_0(const IRTS_FL_0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel1_, &from.channel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FL_0)
}

inline void IRTS_FL_0::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(_internal_timestamp_));
}

IRTS_FL_0::~IRTS_FL_0() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FL_0)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_FL_0::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FL_0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FL_0::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FL_0)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FL_0::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FL_0::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FL_0)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel1(), target);
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel2(), target);
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel3(), target);
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel4(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FL_0)
  return target;
}

size_t IRTS_FL_0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FL_0)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel1());
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel2());
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel3());
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel4());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FL_0::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FL_0::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FL_0::GetClassData() const { return &_class_data_; }

void IRTS_FL_0::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FL_0 *>(to)->MergeFrom(
      static_cast<const IRTS_FL_0 &>(from));
}


void IRTS_FL_0::MergeFrom(const IRTS_FL_0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FL_0)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel1() != 0) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (from._internal_channel2() != 0) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (from._internal_channel3() != 0) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (from._internal_channel4() != 0) {
    _internal_set_channel4(from._internal_channel4());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FL_0::CopyFrom(const IRTS_FL_0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FL_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FL_0::IsInitialized() const {
  return true;
}

void IRTS_FL_0::InternalSwap(IRTS_FL_0* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FL_0, _internal_timestamp_)
      + sizeof(IRTS_FL_0::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FL_0, channel1_)>(
          reinterpret_cast<char*>(&channel1_),
          reinterpret_cast<char*>(&other->channel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FL_0::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[2]);
}

// ===================================================================

class IRTS_FL_1::_Internal {
 public:
};

IRTS_FL_1::IRTS_FL_1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FL_1)
}
IRTS_FL_1::IRTS_FL_1(const IRTS_FL_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel5_, &from.channel5_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FL_1)
}

inline void IRTS_FL_1::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel5_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(_internal_timestamp_));
}

IRTS_FL_1::~IRTS_FL_1() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FL_1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_FL_1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FL_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FL_1::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FL_1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FL_1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FL_1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FL_1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel5(), target);
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel6(), target);
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel7(), target);
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel8(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FL_1)
  return target;
}

size_t IRTS_FL_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FL_1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel5());
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel6());
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel7());
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel8());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FL_1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FL_1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FL_1::GetClassData() const { return &_class_data_; }

void IRTS_FL_1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FL_1 *>(to)->MergeFrom(
      static_cast<const IRTS_FL_1 &>(from));
}


void IRTS_FL_1::MergeFrom(const IRTS_FL_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FL_1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel5() != 0) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (from._internal_channel6() != 0) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (from._internal_channel7() != 0) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (from._internal_channel8() != 0) {
    _internal_set_channel8(from._internal_channel8());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FL_1::CopyFrom(const IRTS_FL_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FL_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FL_1::IsInitialized() const {
  return true;
}

void IRTS_FL_1::InternalSwap(IRTS_FL_1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FL_1, _internal_timestamp_)
      + sizeof(IRTS_FL_1::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FL_1, channel5_)>(
          reinterpret_cast<char*>(&channel5_),
          reinterpret_cast<char*>(&other->channel5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FL_1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[3]);
}

// ===================================================================

class IRTS_FL_2::_Internal {
 public:
};

IRTS_FL_2::IRTS_FL_2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FL_2)
}
IRTS_FL_2::IRTS_FL_2(const IRTS_FL_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel9_, &from.channel9_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FL_2)
}

inline void IRTS_FL_2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel9_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(_internal_timestamp_));
}

IRTS_FL_2::~IRTS_FL_2() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FL_2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_FL_2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FL_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FL_2::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FL_2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FL_2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel9 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel11 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FL_2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FL_2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel9(), target);
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel10(), target);
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel11(), target);
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel12(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FL_2)
  return target;
}

size_t IRTS_FL_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FL_2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel9());
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel10());
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel11());
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel12());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FL_2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FL_2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FL_2::GetClassData() const { return &_class_data_; }

void IRTS_FL_2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FL_2 *>(to)->MergeFrom(
      static_cast<const IRTS_FL_2 &>(from));
}


void IRTS_FL_2::MergeFrom(const IRTS_FL_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FL_2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel9() != 0) {
    _internal_set_channel9(from._internal_channel9());
  }
  if (from._internal_channel10() != 0) {
    _internal_set_channel10(from._internal_channel10());
  }
  if (from._internal_channel11() != 0) {
    _internal_set_channel11(from._internal_channel11());
  }
  if (from._internal_channel12() != 0) {
    _internal_set_channel12(from._internal_channel12());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FL_2::CopyFrom(const IRTS_FL_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FL_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FL_2::IsInitialized() const {
  return true;
}

void IRTS_FL_2::InternalSwap(IRTS_FL_2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FL_2, _internal_timestamp_)
      + sizeof(IRTS_FL_2::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FL_2, channel9_)>(
          reinterpret_cast<char*>(&channel9_),
          reinterpret_cast<char*>(&other->channel9_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FL_2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[4]);
}

// ===================================================================

class IRTS_FL_3::_Internal {
 public:
};

IRTS_FL_3::IRTS_FL_3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FL_3)
}
IRTS_FL_3::IRTS_FL_3(const IRTS_FL_3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel13_, &from.channel13_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FL_3)
}

inline void IRTS_FL_3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel13_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(_internal_timestamp_));
}

IRTS_FL_3::~IRTS_FL_3() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FL_3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_FL_3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FL_3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FL_3::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FL_3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FL_3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel13 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FL_3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FL_3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel13(), target);
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel14(), target);
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel15(), target);
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel16(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FL_3)
  return target;
}

size_t IRTS_FL_3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FL_3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel13());
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel14());
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel15());
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel16());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FL_3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FL_3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FL_3::GetClassData() const { return &_class_data_; }

void IRTS_FL_3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FL_3 *>(to)->MergeFrom(
      static_cast<const IRTS_FL_3 &>(from));
}


void IRTS_FL_3::MergeFrom(const IRTS_FL_3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FL_3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel13() != 0) {
    _internal_set_channel13(from._internal_channel13());
  }
  if (from._internal_channel14() != 0) {
    _internal_set_channel14(from._internal_channel14());
  }
  if (from._internal_channel15() != 0) {
    _internal_set_channel15(from._internal_channel15());
  }
  if (from._internal_channel16() != 0) {
    _internal_set_channel16(from._internal_channel16());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FL_3::CopyFrom(const IRTS_FL_3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FL_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FL_3::IsInitialized() const {
  return true;
}

void IRTS_FL_3::InternalSwap(IRTS_FL_3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FL_3, _internal_timestamp_)
      + sizeof(IRTS_FL_3::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FL_3, channel13_)>(
          reinterpret_cast<char*>(&channel13_),
          reinterpret_cast<char*>(&other->channel13_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FL_3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[5]);
}

// ===================================================================

class IRTS_FR_0::_Internal {
 public:
};

IRTS_FR_0::IRTS_FR_0(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FR_0)
}
IRTS_FR_0::IRTS_FR_0(const IRTS_FR_0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel1_, &from.channel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FR_0)
}

inline void IRTS_FR_0::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(_internal_timestamp_));
}

IRTS_FR_0::~IRTS_FR_0() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FR_0)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_FR_0::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FR_0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FR_0::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FR_0)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FR_0::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FR_0::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FR_0)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel1(), target);
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel2(), target);
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel3(), target);
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel4(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FR_0)
  return target;
}

size_t IRTS_FR_0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FR_0)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel1());
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel2());
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel3());
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel4());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FR_0::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FR_0::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FR_0::GetClassData() const { return &_class_data_; }

void IRTS_FR_0::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FR_0 *>(to)->MergeFrom(
      static_cast<const IRTS_FR_0 &>(from));
}


void IRTS_FR_0::MergeFrom(const IRTS_FR_0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FR_0)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel1() != 0) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (from._internal_channel2() != 0) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (from._internal_channel3() != 0) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (from._internal_channel4() != 0) {
    _internal_set_channel4(from._internal_channel4());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FR_0::CopyFrom(const IRTS_FR_0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FR_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FR_0::IsInitialized() const {
  return true;
}

void IRTS_FR_0::InternalSwap(IRTS_FR_0* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FR_0, _internal_timestamp_)
      + sizeof(IRTS_FR_0::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FR_0, channel1_)>(
          reinterpret_cast<char*>(&channel1_),
          reinterpret_cast<char*>(&other->channel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FR_0::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[6]);
}

// ===================================================================

class IRTS_FR_1::_Internal {
 public:
};

IRTS_FR_1::IRTS_FR_1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FR_1)
}
IRTS_FR_1::IRTS_FR_1(const IRTS_FR_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel5_, &from.channel5_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FR_1)
}

inline void IRTS_FR_1::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel5_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(_internal_timestamp_));
}

IRTS_FR_1::~IRTS_FR_1() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FR_1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_FR_1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FR_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FR_1::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FR_1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FR_1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FR_1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FR_1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel5(), target);
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel6(), target);
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel7(), target);
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel8(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FR_1)
  return target;
}

size_t IRTS_FR_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FR_1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel5());
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel6());
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel7());
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel8());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FR_1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FR_1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FR_1::GetClassData() const { return &_class_data_; }

void IRTS_FR_1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FR_1 *>(to)->MergeFrom(
      static_cast<const IRTS_FR_1 &>(from));
}


void IRTS_FR_1::MergeFrom(const IRTS_FR_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FR_1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel5() != 0) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (from._internal_channel6() != 0) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (from._internal_channel7() != 0) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (from._internal_channel8() != 0) {
    _internal_set_channel8(from._internal_channel8());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FR_1::CopyFrom(const IRTS_FR_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FR_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FR_1::IsInitialized() const {
  return true;
}

void IRTS_FR_1::InternalSwap(IRTS_FR_1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FR_1, _internal_timestamp_)
      + sizeof(IRTS_FR_1::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FR_1, channel5_)>(
          reinterpret_cast<char*>(&channel5_),
          reinterpret_cast<char*>(&other->channel5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FR_1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[7]);
}

// ===================================================================

class IRTS_FR_2::_Internal {
 public:
};

IRTS_FR_2::IRTS_FR_2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FR_2)
}
IRTS_FR_2::IRTS_FR_2(const IRTS_FR_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel9_, &from.channel9_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FR_2)
}

inline void IRTS_FR_2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel9_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(_internal_timestamp_));
}

IRTS_FR_2::~IRTS_FR_2() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FR_2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_FR_2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FR_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FR_2::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FR_2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FR_2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel9 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel11 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FR_2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FR_2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel9(), target);
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel10(), target);
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel11(), target);
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel12(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FR_2)
  return target;
}

size_t IRTS_FR_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FR_2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel9());
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel10());
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel11());
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel12());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FR_2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FR_2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FR_2::GetClassData() const { return &_class_data_; }

void IRTS_FR_2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FR_2 *>(to)->MergeFrom(
      static_cast<const IRTS_FR_2 &>(from));
}


void IRTS_FR_2::MergeFrom(const IRTS_FR_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FR_2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel9() != 0) {
    _internal_set_channel9(from._internal_channel9());
  }
  if (from._internal_channel10() != 0) {
    _internal_set_channel10(from._internal_channel10());
  }
  if (from._internal_channel11() != 0) {
    _internal_set_channel11(from._internal_channel11());
  }
  if (from._internal_channel12() != 0) {
    _internal_set_channel12(from._internal_channel12());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FR_2::CopyFrom(const IRTS_FR_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FR_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FR_2::IsInitialized() const {
  return true;
}

void IRTS_FR_2::InternalSwap(IRTS_FR_2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FR_2, _internal_timestamp_)
      + sizeof(IRTS_FR_2::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FR_2, channel9_)>(
          reinterpret_cast<char*>(&channel9_),
          reinterpret_cast<char*>(&other->channel9_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FR_2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[8]);
}

// ===================================================================

class IRTS_FR_3::_Internal {
 public:
};

IRTS_FR_3::IRTS_FR_3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FR_3)
}
IRTS_FR_3::IRTS_FR_3(const IRTS_FR_3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel13_, &from.channel13_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FR_3)
}

inline void IRTS_FR_3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel13_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(_internal_timestamp_));
}

IRTS_FR_3::~IRTS_FR_3() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FR_3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_FR_3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FR_3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FR_3::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FR_3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FR_3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel13 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FR_3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FR_3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel13(), target);
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel14(), target);
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel15(), target);
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel16(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FR_3)
  return target;
}

size_t IRTS_FR_3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FR_3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel13());
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel14());
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel15());
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel16());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FR_3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FR_3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FR_3::GetClassData() const { return &_class_data_; }

void IRTS_FR_3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FR_3 *>(to)->MergeFrom(
      static_cast<const IRTS_FR_3 &>(from));
}


void IRTS_FR_3::MergeFrom(const IRTS_FR_3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FR_3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel13() != 0) {
    _internal_set_channel13(from._internal_channel13());
  }
  if (from._internal_channel14() != 0) {
    _internal_set_channel14(from._internal_channel14());
  }
  if (from._internal_channel15() != 0) {
    _internal_set_channel15(from._internal_channel15());
  }
  if (from._internal_channel16() != 0) {
    _internal_set_channel16(from._internal_channel16());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FR_3::CopyFrom(const IRTS_FR_3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FR_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FR_3::IsInitialized() const {
  return true;
}

void IRTS_FR_3::InternalSwap(IRTS_FR_3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FR_3, _internal_timestamp_)
      + sizeof(IRTS_FR_3::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FR_3, channel13_)>(
          reinterpret_cast<char*>(&channel13_),
          reinterpret_cast<char*>(&other->channel13_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FR_3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[9]);
}

// ===================================================================

class IRTS_RL_0::_Internal {
 public:
};

IRTS_RL_0::IRTS_RL_0(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RL_0)
}
IRTS_RL_0::IRTS_RL_0(const IRTS_RL_0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel1_, &from.channel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RL_0)
}

inline void IRTS_RL_0::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(_internal_timestamp_));
}

IRTS_RL_0::~IRTS_RL_0() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RL_0)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_RL_0::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RL_0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RL_0::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RL_0)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RL_0::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RL_0::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RL_0)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel1(), target);
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel2(), target);
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel3(), target);
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel4(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RL_0)
  return target;
}

size_t IRTS_RL_0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RL_0)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel1());
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel2());
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel3());
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel4());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RL_0::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RL_0::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RL_0::GetClassData() const { return &_class_data_; }

void IRTS_RL_0::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RL_0 *>(to)->MergeFrom(
      static_cast<const IRTS_RL_0 &>(from));
}


void IRTS_RL_0::MergeFrom(const IRTS_RL_0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RL_0)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel1() != 0) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (from._internal_channel2() != 0) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (from._internal_channel3() != 0) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (from._internal_channel4() != 0) {
    _internal_set_channel4(from._internal_channel4());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RL_0::CopyFrom(const IRTS_RL_0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RL_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RL_0::IsInitialized() const {
  return true;
}

void IRTS_RL_0::InternalSwap(IRTS_RL_0* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RL_0, _internal_timestamp_)
      + sizeof(IRTS_RL_0::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RL_0, channel1_)>(
          reinterpret_cast<char*>(&channel1_),
          reinterpret_cast<char*>(&other->channel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RL_0::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[10]);
}

// ===================================================================

class IRTS_RL_1::_Internal {
 public:
};

IRTS_RL_1::IRTS_RL_1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RL_1)
}
IRTS_RL_1::IRTS_RL_1(const IRTS_RL_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel5_, &from.channel5_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RL_1)
}

inline void IRTS_RL_1::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel5_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(_internal_timestamp_));
}

IRTS_RL_1::~IRTS_RL_1() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RL_1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_RL_1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RL_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RL_1::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RL_1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RL_1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RL_1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RL_1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel5(), target);
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel6(), target);
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel7(), target);
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel8(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RL_1)
  return target;
}

size_t IRTS_RL_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RL_1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel5());
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel6());
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel7());
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel8());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RL_1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RL_1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RL_1::GetClassData() const { return &_class_data_; }

void IRTS_RL_1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RL_1 *>(to)->MergeFrom(
      static_cast<const IRTS_RL_1 &>(from));
}


void IRTS_RL_1::MergeFrom(const IRTS_RL_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RL_1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel5() != 0) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (from._internal_channel6() != 0) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (from._internal_channel7() != 0) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (from._internal_channel8() != 0) {
    _internal_set_channel8(from._internal_channel8());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RL_1::CopyFrom(const IRTS_RL_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RL_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RL_1::IsInitialized() const {
  return true;
}

void IRTS_RL_1::InternalSwap(IRTS_RL_1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RL_1, _internal_timestamp_)
      + sizeof(IRTS_RL_1::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RL_1, channel5_)>(
          reinterpret_cast<char*>(&channel5_),
          reinterpret_cast<char*>(&other->channel5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RL_1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[11]);
}

// ===================================================================

class IRTS_RL_2::_Internal {
 public:
};

IRTS_RL_2::IRTS_RL_2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RL_2)
}
IRTS_RL_2::IRTS_RL_2(const IRTS_RL_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel9_, &from.channel9_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RL_2)
}

inline void IRTS_RL_2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel9_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(_internal_timestamp_));
}

IRTS_RL_2::~IRTS_RL_2() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RL_2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_RL_2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RL_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RL_2::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RL_2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RL_2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel9 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel11 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RL_2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RL_2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel9(), target);
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel10(), target);
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel11(), target);
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel12(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RL_2)
  return target;
}

size_t IRTS_RL_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RL_2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel9());
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel10());
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel11());
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel12());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RL_2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RL_2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RL_2::GetClassData() const { return &_class_data_; }

void IRTS_RL_2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RL_2 *>(to)->MergeFrom(
      static_cast<const IRTS_RL_2 &>(from));
}


void IRTS_RL_2::MergeFrom(const IRTS_RL_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RL_2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel9() != 0) {
    _internal_set_channel9(from._internal_channel9());
  }
  if (from._internal_channel10() != 0) {
    _internal_set_channel10(from._internal_channel10());
  }
  if (from._internal_channel11() != 0) {
    _internal_set_channel11(from._internal_channel11());
  }
  if (from._internal_channel12() != 0) {
    _internal_set_channel12(from._internal_channel12());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RL_2::CopyFrom(const IRTS_RL_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RL_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RL_2::IsInitialized() const {
  return true;
}

void IRTS_RL_2::InternalSwap(IRTS_RL_2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RL_2, _internal_timestamp_)
      + sizeof(IRTS_RL_2::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RL_2, channel9_)>(
          reinterpret_cast<char*>(&channel9_),
          reinterpret_cast<char*>(&other->channel9_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RL_2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[12]);
}

// ===================================================================

class IRTS_RL_3::_Internal {
 public:
};

IRTS_RL_3::IRTS_RL_3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RL_3)
}
IRTS_RL_3::IRTS_RL_3(const IRTS_RL_3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel13_, &from.channel13_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RL_3)
}

inline void IRTS_RL_3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel13_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(_internal_timestamp_));
}

IRTS_RL_3::~IRTS_RL_3() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RL_3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_RL_3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RL_3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RL_3::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RL_3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RL_3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel13 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RL_3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RL_3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel13(), target);
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel14(), target);
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel15(), target);
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel16(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RL_3)
  return target;
}

size_t IRTS_RL_3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RL_3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel13());
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel14());
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel15());
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel16());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RL_3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RL_3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RL_3::GetClassData() const { return &_class_data_; }

void IRTS_RL_3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RL_3 *>(to)->MergeFrom(
      static_cast<const IRTS_RL_3 &>(from));
}


void IRTS_RL_3::MergeFrom(const IRTS_RL_3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RL_3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel13() != 0) {
    _internal_set_channel13(from._internal_channel13());
  }
  if (from._internal_channel14() != 0) {
    _internal_set_channel14(from._internal_channel14());
  }
  if (from._internal_channel15() != 0) {
    _internal_set_channel15(from._internal_channel15());
  }
  if (from._internal_channel16() != 0) {
    _internal_set_channel16(from._internal_channel16());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RL_3::CopyFrom(const IRTS_RL_3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RL_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RL_3::IsInitialized() const {
  return true;
}

void IRTS_RL_3::InternalSwap(IRTS_RL_3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RL_3, _internal_timestamp_)
      + sizeof(IRTS_RL_3::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RL_3, channel13_)>(
          reinterpret_cast<char*>(&channel13_),
          reinterpret_cast<char*>(&other->channel13_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RL_3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[13]);
}

// ===================================================================

class IRTS_RR_0::_Internal {
 public:
};

IRTS_RR_0::IRTS_RR_0(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RR_0)
}
IRTS_RR_0::IRTS_RR_0(const IRTS_RR_0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel1_, &from.channel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RR_0)
}

inline void IRTS_RR_0::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(_internal_timestamp_));
}

IRTS_RR_0::~IRTS_RR_0() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RR_0)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_RR_0::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RR_0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RR_0::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RR_0)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RR_0::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RR_0::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RR_0)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel1(), target);
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel2(), target);
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel3(), target);
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel4(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RR_0)
  return target;
}

size_t IRTS_RR_0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RR_0)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel1());
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel2());
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel3());
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel4());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RR_0::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RR_0::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RR_0::GetClassData() const { return &_class_data_; }

void IRTS_RR_0::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RR_0 *>(to)->MergeFrom(
      static_cast<const IRTS_RR_0 &>(from));
}


void IRTS_RR_0::MergeFrom(const IRTS_RR_0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RR_0)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel1() != 0) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (from._internal_channel2() != 0) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (from._internal_channel3() != 0) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (from._internal_channel4() != 0) {
    _internal_set_channel4(from._internal_channel4());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RR_0::CopyFrom(const IRTS_RR_0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RR_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RR_0::IsInitialized() const {
  return true;
}

void IRTS_RR_0::InternalSwap(IRTS_RR_0* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RR_0, _internal_timestamp_)
      + sizeof(IRTS_RR_0::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RR_0, channel1_)>(
          reinterpret_cast<char*>(&channel1_),
          reinterpret_cast<char*>(&other->channel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RR_0::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[14]);
}

// ===================================================================

class IRTS_RR_1::_Internal {
 public:
};

IRTS_RR_1::IRTS_RR_1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RR_1)
}
IRTS_RR_1::IRTS_RR_1(const IRTS_RR_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel5_, &from.channel5_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RR_1)
}

inline void IRTS_RR_1::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel5_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(_internal_timestamp_));
}

IRTS_RR_1::~IRTS_RR_1() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RR_1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_RR_1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RR_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RR_1::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RR_1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RR_1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RR_1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RR_1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel5(), target);
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel6(), target);
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel7(), target);
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel8(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RR_1)
  return target;
}

size_t IRTS_RR_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RR_1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel5());
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel6());
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel7());
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel8());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RR_1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RR_1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RR_1::GetClassData() const { return &_class_data_; }

void IRTS_RR_1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RR_1 *>(to)->MergeFrom(
      static_cast<const IRTS_RR_1 &>(from));
}


void IRTS_RR_1::MergeFrom(const IRTS_RR_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RR_1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel5() != 0) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (from._internal_channel6() != 0) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (from._internal_channel7() != 0) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (from._internal_channel8() != 0) {
    _internal_set_channel8(from._internal_channel8());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RR_1::CopyFrom(const IRTS_RR_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RR_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RR_1::IsInitialized() const {
  return true;
}

void IRTS_RR_1::InternalSwap(IRTS_RR_1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RR_1, _internal_timestamp_)
      + sizeof(IRTS_RR_1::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RR_1, channel5_)>(
          reinterpret_cast<char*>(&channel5_),
          reinterpret_cast<char*>(&other->channel5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RR_1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[15]);
}

// ===================================================================

class IRTS_RR_2::_Internal {
 public:
};

IRTS_RR_2::IRTS_RR_2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RR_2)
}
IRTS_RR_2::IRTS_RR_2(const IRTS_RR_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel9_, &from.channel9_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RR_2)
}

inline void IRTS_RR_2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel9_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(_internal_timestamp_));
}

IRTS_RR_2::~IRTS_RR_2() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RR_2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_RR_2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RR_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RR_2::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RR_2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RR_2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel9 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel11 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RR_2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RR_2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel9(), target);
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel10(), target);
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel11(), target);
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel12(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RR_2)
  return target;
}

size_t IRTS_RR_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RR_2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel9());
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel10());
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel11());
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel12());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RR_2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RR_2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RR_2::GetClassData() const { return &_class_data_; }

void IRTS_RR_2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RR_2 *>(to)->MergeFrom(
      static_cast<const IRTS_RR_2 &>(from));
}


void IRTS_RR_2::MergeFrom(const IRTS_RR_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RR_2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel9() != 0) {
    _internal_set_channel9(from._internal_channel9());
  }
  if (from._internal_channel10() != 0) {
    _internal_set_channel10(from._internal_channel10());
  }
  if (from._internal_channel11() != 0) {
    _internal_set_channel11(from._internal_channel11());
  }
  if (from._internal_channel12() != 0) {
    _internal_set_channel12(from._internal_channel12());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RR_2::CopyFrom(const IRTS_RR_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RR_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RR_2::IsInitialized() const {
  return true;
}

void IRTS_RR_2::InternalSwap(IRTS_RR_2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RR_2, _internal_timestamp_)
      + sizeof(IRTS_RR_2::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RR_2, channel9_)>(
          reinterpret_cast<char*>(&channel9_),
          reinterpret_cast<char*>(&other->channel9_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RR_2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[16]);
}

// ===================================================================

class IRTS_RR_3::_Internal {
 public:
};

IRTS_RR_3::IRTS_RR_3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RR_3)
}
IRTS_RR_3::IRTS_RR_3(const IRTS_RR_3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel13_, &from.channel13_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RR_3)
}

inline void IRTS_RR_3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel13_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(_internal_timestamp_));
}

IRTS_RR_3::~IRTS_RR_3() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RR_3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRTS_RR_3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RR_3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RR_3::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RR_3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RR_3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel13 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RR_3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RR_3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel13(), target);
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel14(), target);
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel15(), target);
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel16(), target);
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RR_3)
  return target;
}

size_t IRTS_RR_3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RR_3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel13());
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel14());
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel15());
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel16());
  }

  // uint64 _internal_timestamp = 5;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RR_3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RR_3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RR_3::GetClassData() const { return &_class_data_; }

void IRTS_RR_3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RR_3 *>(to)->MergeFrom(
      static_cast<const IRTS_RR_3 &>(from));
}


void IRTS_RR_3::MergeFrom(const IRTS_RR_3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RR_3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel13() != 0) {
    _internal_set_channel13(from._internal_channel13());
  }
  if (from._internal_channel14() != 0) {
    _internal_set_channel14(from._internal_channel14());
  }
  if (from._internal_channel15() != 0) {
    _internal_set_channel15(from._internal_channel15());
  }
  if (from._internal_channel16() != 0) {
    _internal_set_channel16(from._internal_channel16());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RR_3::CopyFrom(const IRTS_RR_3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RR_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RR_3::IsInitialized() const {
  return true;
}

void IRTS_RR_3::InternalSwap(IRTS_RR_3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RR_3, _internal_timestamp_)
      + sizeof(IRTS_RR_3::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RR_3, channel13_)>(
          reinterpret_cast<char*>(&channel13_),
          reinterpret_cast<char*>(&other->channel13_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RR_3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[17]);
}

// ===================================================================

class GPS_COORDS::_Internal {
 public:
};

GPS_COORDS::GPS_COORDS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.GPS_COORDS)
}
GPS_COORDS::GPS_COORDS(const GPS_COORDS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.GPS_COORDS)
}

inline void GPS_COORDS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(_internal_timestamp_));
}

GPS_COORDS::~GPS_COORDS() {
  // @@protoc_insertion_point(destructor:secondary.GPS_COORDS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GPS_COORDS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GPS_COORDS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPS_COORDS::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.GPS_COORDS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPS_COORDS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GPS_COORDS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.GPS_COORDS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float latitude = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_latitude(), target);
  }

  // float longitude = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_longitude(), target);
  }

  // uint64 _internal_timestamp = 3;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.GPS_COORDS)
  return target;
}

size_t GPS_COORDS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.GPS_COORDS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float latitude = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 4;
  }

  // float longitude = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 4;
  }

  // uint64 _internal_timestamp = 3;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPS_COORDS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GPS_COORDS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPS_COORDS::GetClassData() const { return &_class_data_; }

void GPS_COORDS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GPS_COORDS *>(to)->MergeFrom(
      static_cast<const GPS_COORDS &>(from));
}


void GPS_COORDS::MergeFrom(const GPS_COORDS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.GPS_COORDS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = from._internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = from._internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GPS_COORDS::CopyFrom(const GPS_COORDS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.GPS_COORDS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPS_COORDS::IsInitialized() const {
  return true;
}

void GPS_COORDS::InternalSwap(GPS_COORDS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPS_COORDS, _internal_timestamp_)
      + sizeof(GPS_COORDS::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(GPS_COORDS, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPS_COORDS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[18]);
}

// ===================================================================

class GPS_SPEED::_Internal {
 public:
};

GPS_SPEED::GPS_SPEED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.GPS_SPEED)
}
GPS_SPEED::GPS_SPEED(const GPS_SPEED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_internal_timestamp_, &from._internal_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&_internal_timestamp_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:secondary.GPS_SPEED)
}

inline void GPS_SPEED::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_internal_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&_internal_timestamp_)) + sizeof(speed_));
}

GPS_SPEED::~GPS_SPEED() {
  // @@protoc_insertion_point(destructor:secondary.GPS_SPEED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GPS_SPEED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GPS_SPEED::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPS_SPEED::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.GPS_SPEED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_internal_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&_internal_timestamp_)) + sizeof(speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPS_SPEED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GPS_SPEED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.GPS_SPEED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 speed = 1;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_speed(), target);
  }

  // uint64 _internal_timestamp = 2;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.GPS_SPEED)
  return target;
}

size_t GPS_SPEED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.GPS_SPEED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _internal_timestamp = 2;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  // uint32 speed = 1;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_speed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPS_SPEED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GPS_SPEED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPS_SPEED::GetClassData() const { return &_class_data_; }

void GPS_SPEED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GPS_SPEED *>(to)->MergeFrom(
      static_cast<const GPS_SPEED &>(from));
}


void GPS_SPEED::MergeFrom(const GPS_SPEED& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.GPS_SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  if (from._internal_speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GPS_SPEED::CopyFrom(const GPS_SPEED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.GPS_SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPS_SPEED::IsInitialized() const {
  return true;
}

void GPS_SPEED::InternalSwap(GPS_SPEED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPS_SPEED, speed_)
      + sizeof(GPS_SPEED::speed_)
      - PROTOBUF_FIELD_OFFSET(GPS_SPEED, _internal_timestamp_)>(
          reinterpret_cast<char*>(&_internal_timestamp_),
          reinterpret_cast<char*>(&other->_internal_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPS_SPEED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[19]);
}

// ===================================================================

class LAP_COUNT::_Internal {
 public:
};

LAP_COUNT::LAP_COUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.LAP_COUNT)
}
LAP_COUNT::LAP_COUNT(const LAP_COUNT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.LAP_COUNT)
}

inline void LAP_COUNT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(_internal_timestamp_));
}

LAP_COUNT::~LAP_COUNT() {
  // @@protoc_insertion_point(destructor:secondary.LAP_COUNT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LAP_COUNT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LAP_COUNT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LAP_COUNT::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.LAP_COUNT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LAP_COUNT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lap_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lap_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LAP_COUNT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.LAP_COUNT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // uint32 lap_count = 2;
  if (this->_internal_lap_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lap_count(), target);
  }

  // uint64 _internal_timestamp = 3;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.LAP_COUNT)
  return target;
}

size_t LAP_COUNT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.LAP_COUNT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  // uint32 lap_count = 2;
  if (this->_internal_lap_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lap_count());
  }

  // uint64 _internal_timestamp = 3;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LAP_COUNT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LAP_COUNT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LAP_COUNT::GetClassData() const { return &_class_data_; }

void LAP_COUNT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LAP_COUNT *>(to)->MergeFrom(
      static_cast<const LAP_COUNT &>(from));
}


void LAP_COUNT::MergeFrom(const LAP_COUNT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.LAP_COUNT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_lap_count() != 0) {
    _internal_set_lap_count(from._internal_lap_count());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LAP_COUNT::CopyFrom(const LAP_COUNT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.LAP_COUNT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LAP_COUNT::IsInitialized() const {
  return true;
}

void LAP_COUNT::InternalSwap(LAP_COUNT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LAP_COUNT, _internal_timestamp_)
      + sizeof(LAP_COUNT::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(LAP_COUNT, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LAP_COUNT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[20]);
}

// ===================================================================

class PEDALS_OUTPUT::_Internal {
 public:
};

PEDALS_OUTPUT::PEDALS_OUTPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.PEDALS_OUTPUT)
}
PEDALS_OUTPUT::PEDALS_OUTPUT(const PEDALS_OUTPUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bse_front_, &from.bse_front_,
    static_cast<size_t>(reinterpret_cast<char*>(&apps_) -
    reinterpret_cast<char*>(&bse_front_)) + sizeof(apps_));
  // @@protoc_insertion_point(copy_constructor:secondary.PEDALS_OUTPUT)
}

inline void PEDALS_OUTPUT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bse_front_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&apps_) -
    reinterpret_cast<char*>(&bse_front_)) + sizeof(apps_));
}

PEDALS_OUTPUT::~PEDALS_OUTPUT() {
  // @@protoc_insertion_point(destructor:secondary.PEDALS_OUTPUT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PEDALS_OUTPUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PEDALS_OUTPUT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PEDALS_OUTPUT::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.PEDALS_OUTPUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bse_front_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&apps_) -
      reinterpret_cast<char*>(&bse_front_)) + sizeof(apps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PEDALS_OUTPUT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 bse_front = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bse_front_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bse_rear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bse_rear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 apps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          apps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PEDALS_OUTPUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.PEDALS_OUTPUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bse_front = 1;
  if (this->_internal_bse_front() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bse_front(), target);
  }

  // uint32 bse_rear = 2;
  if (this->_internal_bse_rear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bse_rear(), target);
  }

  // uint32 apps = 3;
  if (this->_internal_apps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_apps(), target);
  }

  // uint64 _internal_timestamp = 4;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.PEDALS_OUTPUT)
  return target;
}

size_t PEDALS_OUTPUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.PEDALS_OUTPUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bse_front = 1;
  if (this->_internal_bse_front() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bse_front());
  }

  // uint32 bse_rear = 2;
  if (this->_internal_bse_rear() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bse_rear());
  }

  // uint64 _internal_timestamp = 4;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  // uint32 apps = 3;
  if (this->_internal_apps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apps());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PEDALS_OUTPUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PEDALS_OUTPUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PEDALS_OUTPUT::GetClassData() const { return &_class_data_; }

void PEDALS_OUTPUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PEDALS_OUTPUT *>(to)->MergeFrom(
      static_cast<const PEDALS_OUTPUT &>(from));
}


void PEDALS_OUTPUT::MergeFrom(const PEDALS_OUTPUT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.PEDALS_OUTPUT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bse_front() != 0) {
    _internal_set_bse_front(from._internal_bse_front());
  }
  if (from._internal_bse_rear() != 0) {
    _internal_set_bse_rear(from._internal_bse_rear());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  if (from._internal_apps() != 0) {
    _internal_set_apps(from._internal_apps());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PEDALS_OUTPUT::CopyFrom(const PEDALS_OUTPUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.PEDALS_OUTPUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEDALS_OUTPUT::IsInitialized() const {
  return true;
}

void PEDALS_OUTPUT::InternalSwap(PEDALS_OUTPUT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PEDALS_OUTPUT, apps_)
      + sizeof(PEDALS_OUTPUT::apps_)
      - PROTOBUF_FIELD_OFFSET(PEDALS_OUTPUT, bse_front_)>(
          reinterpret_cast<char*>(&bse_front_),
          reinterpret_cast<char*>(&other->bse_front_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PEDALS_OUTPUT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[21]);
}

// ===================================================================

class CONTROL_OUTPUT::_Internal {
 public:
};

CONTROL_OUTPUT::CONTROL_OUTPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.CONTROL_OUTPUT)
}
CONTROL_OUTPUT::CONTROL_OUTPUT(const CONTROL_OUTPUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&right_, &from.right_,
    static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&right_)) + sizeof(_internal_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.CONTROL_OUTPUT)
}

inline void CONTROL_OUTPUT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&right_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&_internal_timestamp_) -
    reinterpret_cast<char*>(&right_)) + sizeof(_internal_timestamp_));
}

CONTROL_OUTPUT::~CONTROL_OUTPUT() {
  // @@protoc_insertion_point(destructor:secondary.CONTROL_OUTPUT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CONTROL_OUTPUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CONTROL_OUTPUT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CONTROL_OUTPUT::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.CONTROL_OUTPUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_internal_timestamp_) -
      reinterpret_cast<char*>(&right_)) + sizeof(_internal_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CONTROL_OUTPUT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float right = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CONTROL_OUTPUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.CONTROL_OUTPUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float right = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right = this->_internal_right();
  uint32_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_right(), target);
  }

  // float left = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left = this->_internal_left();
  uint32_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_left(), target);
  }

  // uint64 _internal_timestamp = 3;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.CONTROL_OUTPUT)
  return target;
}

size_t CONTROL_OUTPUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.CONTROL_OUTPUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float right = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right = this->_internal_right();
  uint32_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    total_size += 1 + 4;
  }

  // float left = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left = this->_internal_left();
  uint32_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    total_size += 1 + 4;
  }

  // uint64 _internal_timestamp = 3;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CONTROL_OUTPUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CONTROL_OUTPUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CONTROL_OUTPUT::GetClassData() const { return &_class_data_; }

void CONTROL_OUTPUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CONTROL_OUTPUT *>(to)->MergeFrom(
      static_cast<const CONTROL_OUTPUT &>(from));
}


void CONTROL_OUTPUT::MergeFrom(const CONTROL_OUTPUT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.CONTROL_OUTPUT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right = from._internal_right();
  uint32_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    _internal_set_right(from._internal_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left = from._internal_left();
  uint32_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    _internal_set_left(from._internal_left());
  }
  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CONTROL_OUTPUT::CopyFrom(const CONTROL_OUTPUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.CONTROL_OUTPUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CONTROL_OUTPUT::IsInitialized() const {
  return true;
}

void CONTROL_OUTPUT::InternalSwap(CONTROL_OUTPUT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CONTROL_OUTPUT, _internal_timestamp_)
      + sizeof(CONTROL_OUTPUT::_internal_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CONTROL_OUTPUT, right_)>(
          reinterpret_cast<char*>(&right_),
          reinterpret_cast<char*>(&other->right_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CONTROL_OUTPUT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[22]);
}

// ===================================================================

class STEERING_ANGLE::_Internal {
 public:
};

STEERING_ANGLE::STEERING_ANGLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.STEERING_ANGLE)
}
STEERING_ANGLE::STEERING_ANGLE(const STEERING_ANGLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_internal_timestamp_, &from._internal_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&_internal_timestamp_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:secondary.STEERING_ANGLE)
}

inline void STEERING_ANGLE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&_internal_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&_internal_timestamp_)) + sizeof(angle_));
}

STEERING_ANGLE::~STEERING_ANGLE() {
  // @@protoc_insertion_point(destructor:secondary.STEERING_ANGLE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void STEERING_ANGLE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void STEERING_ANGLE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void STEERING_ANGLE::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.STEERING_ANGLE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_internal_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&_internal_timestamp_)) + sizeof(angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STEERING_ANGLE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 _internal_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STEERING_ANGLE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.STEERING_ANGLE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float angle = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_angle(), target);
  }

  // uint64 _internal_timestamp = 2;
  if (this->_internal__internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal__internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.STEERING_ANGLE)
  return target;
}

size_t STEERING_ANGLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.STEERING_ANGLE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _internal_timestamp = 2;
  if (this->_internal__internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal__internal_timestamp());
  }

  // float angle = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STEERING_ANGLE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STEERING_ANGLE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STEERING_ANGLE::GetClassData() const { return &_class_data_; }

void STEERING_ANGLE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STEERING_ANGLE *>(to)->MergeFrom(
      static_cast<const STEERING_ANGLE &>(from));
}


void STEERING_ANGLE::MergeFrom(const STEERING_ANGLE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.STEERING_ANGLE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal__internal_timestamp() != 0) {
    _internal_set__internal_timestamp(from._internal__internal_timestamp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _internal_set_angle(from._internal_angle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STEERING_ANGLE::CopyFrom(const STEERING_ANGLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.STEERING_ANGLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STEERING_ANGLE::IsInitialized() const {
  return true;
}

void STEERING_ANGLE::InternalSwap(STEERING_ANGLE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STEERING_ANGLE, angle_)
      + sizeof(STEERING_ANGLE::angle_)
      - PROTOBUF_FIELD_OFFSET(STEERING_ANGLE, _internal_timestamp_)>(
          reinterpret_cast<char*>(&_internal_timestamp_),
          reinterpret_cast<char*>(&other->_internal_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STEERING_ANGLE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[23]);
}

// ===================================================================

class Pack::_Internal {
 public:
};

Pack::Pack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  imu_angular_rate_(arena),
  imu_acceleration_(arena),
  irts_fl_0_(arena),
  irts_fl_1_(arena),
  irts_fl_2_(arena),
  irts_fl_3_(arena),
  irts_fr_0_(arena),
  irts_fr_1_(arena),
  irts_fr_2_(arena),
  irts_fr_3_(arena),
  irts_rl_0_(arena),
  irts_rl_1_(arena),
  irts_rl_2_(arena),
  irts_rl_3_(arena),
  irts_rr_0_(arena),
  irts_rr_1_(arena),
  irts_rr_2_(arena),
  irts_rr_3_(arena),
  gps_coords_(arena),
  gps_speed_(arena),
  lap_count_(arena),
  pedals_output_(arena),
  control_output_(arena),
  steering_angle_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:secondary.Pack)
}
Pack::Pack(const Pack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      imu_angular_rate_(from.imu_angular_rate_),
      imu_acceleration_(from.imu_acceleration_),
      irts_fl_0_(from.irts_fl_0_),
      irts_fl_1_(from.irts_fl_1_),
      irts_fl_2_(from.irts_fl_2_),
      irts_fl_3_(from.irts_fl_3_),
      irts_fr_0_(from.irts_fr_0_),
      irts_fr_1_(from.irts_fr_1_),
      irts_fr_2_(from.irts_fr_2_),
      irts_fr_3_(from.irts_fr_3_),
      irts_rl_0_(from.irts_rl_0_),
      irts_rl_1_(from.irts_rl_1_),
      irts_rl_2_(from.irts_rl_2_),
      irts_rl_3_(from.irts_rl_3_),
      irts_rr_0_(from.irts_rr_0_),
      irts_rr_1_(from.irts_rr_1_),
      irts_rr_2_(from.irts_rr_2_),
      irts_rr_3_(from.irts_rr_3_),
      gps_coords_(from.gps_coords_),
      gps_speed_(from.gps_speed_),
      lap_count_(from.lap_count_),
      pedals_output_(from.pedals_output_),
      control_output_(from.control_output_),
      steering_angle_(from.steering_angle_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:secondary.Pack)
}

inline void Pack::SharedCtor() {
}

Pack::~Pack() {
  // @@protoc_insertion_point(destructor:secondary.Pack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pack::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.Pack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imu_angular_rate_.Clear();
  imu_acceleration_.Clear();
  irts_fl_0_.Clear();
  irts_fl_1_.Clear();
  irts_fl_2_.Clear();
  irts_fl_3_.Clear();
  irts_fr_0_.Clear();
  irts_fr_1_.Clear();
  irts_fr_2_.Clear();
  irts_fr_3_.Clear();
  irts_rl_0_.Clear();
  irts_rl_1_.Clear();
  irts_rl_2_.Clear();
  irts_rl_3_.Clear();
  irts_rr_0_.Clear();
  irts_rr_1_.Clear();
  irts_rr_2_.Clear();
  irts_rr_3_.Clear();
  gps_coords_.Clear();
  gps_speed_.Clear();
  lap_count_.Clear();
  pedals_output_.Clear();
  control_output_.Clear();
  steering_angle_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .secondary.IMU_ANGULAR_RATE IMU_ANGULAR_RATE = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_imu_angular_rate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IMU_ACCELERATION IMU_ACCELERATION = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_imu_acceleration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FL_0 IRTS_FL_0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fl_0(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FL_1 IRTS_FL_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fl_1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FL_2 IRTS_FL_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fl_2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FL_3 IRTS_FL_3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fl_3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FR_0 IRTS_FR_0 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fr_0(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FR_1 IRTS_FR_1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fr_1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FR_2 IRTS_FR_2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fr_2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FR_3 IRTS_FR_3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fr_3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RL_0 IRTS_RL_0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_rl_0(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RL_1 IRTS_RL_1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_rl_1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RL_2 IRTS_RL_2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_rl_2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RL_3 IRTS_RL_3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_rl_3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RR_0 IRTS_RR_0 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_rr_0(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RR_1 IRTS_RR_1 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_irts_rr_1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RR_2 IRTS_RR_2 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_irts_rr_2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RR_3 IRTS_RR_3 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_irts_rr_3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.GPS_COORDS GPS_COORDS = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gps_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.GPS_SPEED GPS_SPEED = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gps_speed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.LAP_COUNT LAP_COUNT = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lap_count(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.PEDALS_OUTPUT PEDALS_OUTPUT = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pedals_output(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.CONTROL_OUTPUT CONTROL_OUTPUT = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_control_output(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .secondary.STEERING_ANGLE STEERING_ANGLE = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_steering_angle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.Pack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .secondary.IMU_ANGULAR_RATE IMU_ANGULAR_RATE = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_imu_angular_rate_size()); i < n; i++) {
    const auto& repfield = this->_internal_imu_angular_rate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IMU_ACCELERATION IMU_ACCELERATION = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_imu_acceleration_size()); i < n; i++) {
    const auto& repfield = this->_internal_imu_acceleration(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_FL_0 IRTS_FL_0 = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_fl_0_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_fl_0(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_FL_1 IRTS_FL_1 = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_fl_1_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_fl_1(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_FL_2 IRTS_FL_2 = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_fl_2_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_fl_2(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_FL_3 IRTS_FL_3 = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_fl_3_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_fl_3(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_FR_0 IRTS_FR_0 = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_fr_0_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_fr_0(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_FR_1 IRTS_FR_1 = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_fr_1_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_fr_1(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_FR_2 IRTS_FR_2 = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_fr_2_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_fr_2(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_FR_3 IRTS_FR_3 = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_fr_3_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_fr_3(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_RL_0 IRTS_RL_0 = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_rl_0_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_rl_0(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_RL_1 IRTS_RL_1 = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_rl_1_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_rl_1(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_RL_2 IRTS_RL_2 = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_rl_2_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_rl_2(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_RL_3 IRTS_RL_3 = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_rl_3_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_rl_3(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_RR_0 IRTS_RR_0 = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_rr_0_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_rr_0(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_RR_1 IRTS_RR_1 = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_rr_1_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_rr_1(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_RR_2 IRTS_RR_2 = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_rr_2_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_rr_2(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.IRTS_RR_3 IRTS_RR_3 = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_irts_rr_3_size()); i < n; i++) {
    const auto& repfield = this->_internal_irts_rr_3(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.GPS_COORDS GPS_COORDS = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gps_coords_size()); i < n; i++) {
    const auto& repfield = this->_internal_gps_coords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.GPS_SPEED GPS_SPEED = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gps_speed_size()); i < n; i++) {
    const auto& repfield = this->_internal_gps_speed(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.LAP_COUNT LAP_COUNT = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lap_count_size()); i < n; i++) {
    const auto& repfield = this->_internal_lap_count(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.PEDALS_OUTPUT PEDALS_OUTPUT = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pedals_output_size()); i < n; i++) {
    const auto& repfield = this->_internal_pedals_output(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.CONTROL_OUTPUT CONTROL_OUTPUT = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_control_output_size()); i < n; i++) {
    const auto& repfield = this->_internal_control_output(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .secondary.STEERING_ANGLE STEERING_ANGLE = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_steering_angle_size()); i < n; i++) {
    const auto& repfield = this->_internal_steering_angle(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.Pack)
  return target;
}

size_t Pack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.Pack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .secondary.IMU_ANGULAR_RATE IMU_ANGULAR_RATE = 1;
  total_size += 1UL * this->_internal_imu_angular_rate_size();
  for (const auto& msg : this->imu_angular_rate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IMU_ACCELERATION IMU_ACCELERATION = 2;
  total_size += 1UL * this->_internal_imu_acceleration_size();
  for (const auto& msg : this->imu_acceleration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FL_0 IRTS_FL_0 = 3;
  total_size += 1UL * this->_internal_irts_fl_0_size();
  for (const auto& msg : this->irts_fl_0_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FL_1 IRTS_FL_1 = 4;
  total_size += 1UL * this->_internal_irts_fl_1_size();
  for (const auto& msg : this->irts_fl_1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FL_2 IRTS_FL_2 = 5;
  total_size += 1UL * this->_internal_irts_fl_2_size();
  for (const auto& msg : this->irts_fl_2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FL_3 IRTS_FL_3 = 6;
  total_size += 1UL * this->_internal_irts_fl_3_size();
  for (const auto& msg : this->irts_fl_3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FR_0 IRTS_FR_0 = 7;
  total_size += 1UL * this->_internal_irts_fr_0_size();
  for (const auto& msg : this->irts_fr_0_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FR_1 IRTS_FR_1 = 8;
  total_size += 1UL * this->_internal_irts_fr_1_size();
  for (const auto& msg : this->irts_fr_1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FR_2 IRTS_FR_2 = 9;
  total_size += 1UL * this->_internal_irts_fr_2_size();
  for (const auto& msg : this->irts_fr_2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FR_3 IRTS_FR_3 = 10;
  total_size += 1UL * this->_internal_irts_fr_3_size();
  for (const auto& msg : this->irts_fr_3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RL_0 IRTS_RL_0 = 11;
  total_size += 1UL * this->_internal_irts_rl_0_size();
  for (const auto& msg : this->irts_rl_0_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RL_1 IRTS_RL_1 = 12;
  total_size += 1UL * this->_internal_irts_rl_1_size();
  for (const auto& msg : this->irts_rl_1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RL_2 IRTS_RL_2 = 13;
  total_size += 1UL * this->_internal_irts_rl_2_size();
  for (const auto& msg : this->irts_rl_2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RL_3 IRTS_RL_3 = 14;
  total_size += 1UL * this->_internal_irts_rl_3_size();
  for (const auto& msg : this->irts_rl_3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RR_0 IRTS_RR_0 = 15;
  total_size += 1UL * this->_internal_irts_rr_0_size();
  for (const auto& msg : this->irts_rr_0_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RR_1 IRTS_RR_1 = 16;
  total_size += 2UL * this->_internal_irts_rr_1_size();
  for (const auto& msg : this->irts_rr_1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RR_2 IRTS_RR_2 = 17;
  total_size += 2UL * this->_internal_irts_rr_2_size();
  for (const auto& msg : this->irts_rr_2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RR_3 IRTS_RR_3 = 18;
  total_size += 2UL * this->_internal_irts_rr_3_size();
  for (const auto& msg : this->irts_rr_3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.GPS_COORDS GPS_COORDS = 19;
  total_size += 2UL * this->_internal_gps_coords_size();
  for (const auto& msg : this->gps_coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.GPS_SPEED GPS_SPEED = 20;
  total_size += 2UL * this->_internal_gps_speed_size();
  for (const auto& msg : this->gps_speed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.LAP_COUNT LAP_COUNT = 21;
  total_size += 2UL * this->_internal_lap_count_size();
  for (const auto& msg : this->lap_count_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.PEDALS_OUTPUT PEDALS_OUTPUT = 22;
  total_size += 2UL * this->_internal_pedals_output_size();
  for (const auto& msg : this->pedals_output_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.CONTROL_OUTPUT CONTROL_OUTPUT = 23;
  total_size += 2UL * this->_internal_control_output_size();
  for (const auto& msg : this->control_output_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.STEERING_ANGLE STEERING_ANGLE = 24;
  total_size += 2UL * this->_internal_steering_angle_size();
  for (const auto& msg : this->steering_angle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pack::GetClassData() const { return &_class_data_; }

void Pack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pack *>(to)->MergeFrom(
      static_cast<const Pack &>(from));
}


void Pack::MergeFrom(const Pack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.Pack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  imu_angular_rate_.MergeFrom(from.imu_angular_rate_);
  imu_acceleration_.MergeFrom(from.imu_acceleration_);
  irts_fl_0_.MergeFrom(from.irts_fl_0_);
  irts_fl_1_.MergeFrom(from.irts_fl_1_);
  irts_fl_2_.MergeFrom(from.irts_fl_2_);
  irts_fl_3_.MergeFrom(from.irts_fl_3_);
  irts_fr_0_.MergeFrom(from.irts_fr_0_);
  irts_fr_1_.MergeFrom(from.irts_fr_1_);
  irts_fr_2_.MergeFrom(from.irts_fr_2_);
  irts_fr_3_.MergeFrom(from.irts_fr_3_);
  irts_rl_0_.MergeFrom(from.irts_rl_0_);
  irts_rl_1_.MergeFrom(from.irts_rl_1_);
  irts_rl_2_.MergeFrom(from.irts_rl_2_);
  irts_rl_3_.MergeFrom(from.irts_rl_3_);
  irts_rr_0_.MergeFrom(from.irts_rr_0_);
  irts_rr_1_.MergeFrom(from.irts_rr_1_);
  irts_rr_2_.MergeFrom(from.irts_rr_2_);
  irts_rr_3_.MergeFrom(from.irts_rr_3_);
  gps_coords_.MergeFrom(from.gps_coords_);
  gps_speed_.MergeFrom(from.gps_speed_);
  lap_count_.MergeFrom(from.lap_count_);
  pedals_output_.MergeFrom(from.pedals_output_);
  control_output_.MergeFrom(from.control_output_);
  steering_angle_.MergeFrom(from.steering_angle_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pack::CopyFrom(const Pack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.Pack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pack::IsInitialized() const {
  return true;
}

void Pack::InternalSwap(Pack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  imu_angular_rate_.InternalSwap(&other->imu_angular_rate_);
  imu_acceleration_.InternalSwap(&other->imu_acceleration_);
  irts_fl_0_.InternalSwap(&other->irts_fl_0_);
  irts_fl_1_.InternalSwap(&other->irts_fl_1_);
  irts_fl_2_.InternalSwap(&other->irts_fl_2_);
  irts_fl_3_.InternalSwap(&other->irts_fl_3_);
  irts_fr_0_.InternalSwap(&other->irts_fr_0_);
  irts_fr_1_.InternalSwap(&other->irts_fr_1_);
  irts_fr_2_.InternalSwap(&other->irts_fr_2_);
  irts_fr_3_.InternalSwap(&other->irts_fr_3_);
  irts_rl_0_.InternalSwap(&other->irts_rl_0_);
  irts_rl_1_.InternalSwap(&other->irts_rl_1_);
  irts_rl_2_.InternalSwap(&other->irts_rl_2_);
  irts_rl_3_.InternalSwap(&other->irts_rl_3_);
  irts_rr_0_.InternalSwap(&other->irts_rr_0_);
  irts_rr_1_.InternalSwap(&other->irts_rr_1_);
  irts_rr_2_.InternalSwap(&other->irts_rr_2_);
  irts_rr_3_.InternalSwap(&other->irts_rr_3_);
  gps_coords_.InternalSwap(&other->gps_coords_);
  gps_speed_.InternalSwap(&other->gps_speed_);
  lap_count_.InternalSwap(&other->lap_count_);
  pedals_output_.InternalSwap(&other->pedals_output_);
  control_output_.InternalSwap(&other->control_output_);
  steering_angle_.InternalSwap(&other->steering_angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[24]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace secondary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::secondary::IMU_ANGULAR_RATE*
Arena::CreateMaybeMessage< ::secondary::IMU_ANGULAR_RATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IMU_ANGULAR_RATE >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IMU_ACCELERATION*
Arena::CreateMaybeMessage< ::secondary::IMU_ACCELERATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IMU_ACCELERATION >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FL_0*
Arena::CreateMaybeMessage< ::secondary::IRTS_FL_0 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FL_0 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FL_1*
Arena::CreateMaybeMessage< ::secondary::IRTS_FL_1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FL_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FL_2*
Arena::CreateMaybeMessage< ::secondary::IRTS_FL_2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FL_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FL_3*
Arena::CreateMaybeMessage< ::secondary::IRTS_FL_3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FL_3 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FR_0*
Arena::CreateMaybeMessage< ::secondary::IRTS_FR_0 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FR_0 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FR_1*
Arena::CreateMaybeMessage< ::secondary::IRTS_FR_1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FR_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FR_2*
Arena::CreateMaybeMessage< ::secondary::IRTS_FR_2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FR_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FR_3*
Arena::CreateMaybeMessage< ::secondary::IRTS_FR_3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FR_3 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RL_0*
Arena::CreateMaybeMessage< ::secondary::IRTS_RL_0 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RL_0 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RL_1*
Arena::CreateMaybeMessage< ::secondary::IRTS_RL_1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RL_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RL_2*
Arena::CreateMaybeMessage< ::secondary::IRTS_RL_2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RL_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RL_3*
Arena::CreateMaybeMessage< ::secondary::IRTS_RL_3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RL_3 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RR_0*
Arena::CreateMaybeMessage< ::secondary::IRTS_RR_0 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RR_0 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RR_1*
Arena::CreateMaybeMessage< ::secondary::IRTS_RR_1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RR_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RR_2*
Arena::CreateMaybeMessage< ::secondary::IRTS_RR_2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RR_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RR_3*
Arena::CreateMaybeMessage< ::secondary::IRTS_RR_3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RR_3 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::GPS_COORDS*
Arena::CreateMaybeMessage< ::secondary::GPS_COORDS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::GPS_COORDS >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::GPS_SPEED*
Arena::CreateMaybeMessage< ::secondary::GPS_SPEED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::GPS_SPEED >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::LAP_COUNT*
Arena::CreateMaybeMessage< ::secondary::LAP_COUNT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::LAP_COUNT >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::PEDALS_OUTPUT*
Arena::CreateMaybeMessage< ::secondary::PEDALS_OUTPUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::PEDALS_OUTPUT >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::CONTROL_OUTPUT*
Arena::CreateMaybeMessage< ::secondary::CONTROL_OUTPUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::CONTROL_OUTPUT >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::STEERING_ANGLE*
Arena::CreateMaybeMessage< ::secondary::STEERING_ANGLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::STEERING_ANGLE >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::Pack*
Arena::CreateMaybeMessage< ::secondary::Pack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::Pack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
